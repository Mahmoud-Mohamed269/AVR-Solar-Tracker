
Solar_Tracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00002c8a  00002d1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800070  00800070  00002d2e  2**0
                  ALLOC
  3 .stab         000024e4  00000000  00000000  00002d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000127b  00000000  00000000  00005214  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__ctors_end>
       4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       8:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      10:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      14:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      18:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      1c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      20:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      24:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      28:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      2c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      30:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      34:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      38:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      3c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      40:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      44:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      48:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      4c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      50:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>

00000054 <str_inf.1428>:
      54:	69 6e 66 00 49 4e 46 00                             inf.INF.

0000005c <str_nan.1427>:
      5c:	6e 61 6e 00 4e 41 4e 00 00 40 7a 10 f3 5a 00 a0     nan.NAN..@z..Z..
      6c:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      7c:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      8c:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      9c:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      ac:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      bc:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
      cc:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
      dc:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
      ec:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
      fc:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     10c:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     11c:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     12c:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     13c:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     14c:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     15c:	3d 27                                               ='

0000015e <__ctors_end>:
     15e:	11 24       	eor	r1, r1
     160:	1f be       	out	0x3f, r1	; 63
     162:	cf e5       	ldi	r28, 0x5F	; 95
     164:	d8 e0       	ldi	r29, 0x08	; 8
     166:	de bf       	out	0x3e, r29	; 62
     168:	cd bf       	out	0x3d, r28	; 61

0000016a <__do_copy_data>:
     16a:	10 e0       	ldi	r17, 0x00	; 0
     16c:	a0 e6       	ldi	r26, 0x60	; 96
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	ea e8       	ldi	r30, 0x8A	; 138
     172:	fc e2       	ldi	r31, 0x2C	; 44
     174:	02 c0       	rjmp	.+4      	; 0x17a <.do_copy_data_start>

00000176 <.do_copy_data_loop>:
     176:	05 90       	lpm	r0, Z+
     178:	0d 92       	st	X+, r0

0000017a <.do_copy_data_start>:
     17a:	a0 37       	cpi	r26, 0x70	; 112
     17c:	b1 07       	cpc	r27, r17
     17e:	d9 f7       	brne	.-10     	; 0x176 <.do_copy_data_loop>

00000180 <__do_clear_bss>:
     180:	10 e0       	ldi	r17, 0x00	; 0
     182:	a0 e7       	ldi	r26, 0x70	; 112
     184:	b0 e0       	ldi	r27, 0x00	; 0
     186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
     188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
     18a:	a6 37       	cpi	r26, 0x76	; 118
     18c:	b1 07       	cpc	r27, r17
     18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>
     190:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <main>
     194:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <_exit>

00000198 <__bad_interrupt>:
     198:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019c <__fixunssfsi>:
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	7b 01       	movw	r14, r22
     1a6:	8c 01       	movw	r16, r24
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	40 e0       	ldi	r20, 0x00	; 0
     1ae:	5f e4       	ldi	r21, 0x4F	; 79
     1b0:	0e 94 ce 03 	call	0x79c	; 0x79c <__gesf2>
     1b4:	88 23       	and	r24, r24
     1b6:	8c f0       	brlt	.+34     	; 0x1da <__fixunssfsi+0x3e>
     1b8:	c8 01       	movw	r24, r16
     1ba:	b7 01       	movw	r22, r14
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	40 e0       	ldi	r20, 0x00	; 0
     1c2:	5f e4       	ldi	r21, 0x4F	; 79
     1c4:	0e 94 46 02 	call	0x48c	; 0x48c <__subsf3>
     1c8:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixsfsi>
     1cc:	9b 01       	movw	r18, r22
     1ce:	ac 01       	movw	r20, r24
     1d0:	20 50       	subi	r18, 0x00	; 0
     1d2:	30 40       	sbci	r19, 0x00	; 0
     1d4:	40 40       	sbci	r20, 0x00	; 0
     1d6:	50 48       	sbci	r21, 0x80	; 128
     1d8:	06 c0       	rjmp	.+12     	; 0x1e6 <__fixunssfsi+0x4a>
     1da:	c8 01       	movw	r24, r16
     1dc:	b7 01       	movw	r22, r14
     1de:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixsfsi>
     1e2:	9b 01       	movw	r18, r22
     1e4:	ac 01       	movw	r20, r24
     1e6:	b9 01       	movw	r22, r18
     1e8:	ca 01       	movw	r24, r20
     1ea:	1f 91       	pop	r17
     1ec:	0f 91       	pop	r16
     1ee:	ff 90       	pop	r15
     1f0:	ef 90       	pop	r14
     1f2:	08 95       	ret

000001f4 <_fpadd_parts>:
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	e0 e0       	ldi	r30, 0x00	; 0
     1fa:	f1 e0       	ldi	r31, 0x01	; 1
     1fc:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <__prologue_saves__>
     200:	dc 01       	movw	r26, r24
     202:	2b 01       	movw	r4, r22
     204:	fa 01       	movw	r30, r20
     206:	9c 91       	ld	r25, X
     208:	92 30       	cpi	r25, 0x02	; 2
     20a:	08 f4       	brcc	.+2      	; 0x20e <_fpadd_parts+0x1a>
     20c:	39 c1       	rjmp	.+626    	; 0x480 <_fpadd_parts+0x28c>
     20e:	eb 01       	movw	r28, r22
     210:	88 81       	ld	r24, Y
     212:	82 30       	cpi	r24, 0x02	; 2
     214:	08 f4       	brcc	.+2      	; 0x218 <_fpadd_parts+0x24>
     216:	33 c1       	rjmp	.+614    	; 0x47e <_fpadd_parts+0x28a>
     218:	94 30       	cpi	r25, 0x04	; 4
     21a:	69 f4       	brne	.+26     	; 0x236 <_fpadd_parts+0x42>
     21c:	84 30       	cpi	r24, 0x04	; 4
     21e:	09 f0       	breq	.+2      	; 0x222 <_fpadd_parts+0x2e>
     220:	2f c1       	rjmp	.+606    	; 0x480 <_fpadd_parts+0x28c>
     222:	11 96       	adiw	r26, 0x01	; 1
     224:	9c 91       	ld	r25, X
     226:	11 97       	sbiw	r26, 0x01	; 1
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	98 17       	cp	r25, r24
     22c:	09 f4       	brne	.+2      	; 0x230 <_fpadd_parts+0x3c>
     22e:	28 c1       	rjmp	.+592    	; 0x480 <_fpadd_parts+0x28c>
     230:	a7 e6       	ldi	r26, 0x67	; 103
     232:	b0 e0       	ldi	r27, 0x00	; 0
     234:	25 c1       	rjmp	.+586    	; 0x480 <_fpadd_parts+0x28c>
     236:	84 30       	cpi	r24, 0x04	; 4
     238:	09 f4       	brne	.+2      	; 0x23c <_fpadd_parts+0x48>
     23a:	21 c1       	rjmp	.+578    	; 0x47e <_fpadd_parts+0x28a>
     23c:	82 30       	cpi	r24, 0x02	; 2
     23e:	a9 f4       	brne	.+42     	; 0x26a <_fpadd_parts+0x76>
     240:	92 30       	cpi	r25, 0x02	; 2
     242:	09 f0       	breq	.+2      	; 0x246 <_fpadd_parts+0x52>
     244:	1d c1       	rjmp	.+570    	; 0x480 <_fpadd_parts+0x28c>
     246:	9a 01       	movw	r18, r20
     248:	ad 01       	movw	r20, r26
     24a:	88 e0       	ldi	r24, 0x08	; 8
     24c:	ea 01       	movw	r28, r20
     24e:	09 90       	ld	r0, Y+
     250:	ae 01       	movw	r20, r28
     252:	e9 01       	movw	r28, r18
     254:	09 92       	st	Y+, r0
     256:	9e 01       	movw	r18, r28
     258:	81 50       	subi	r24, 0x01	; 1
     25a:	c1 f7       	brne	.-16     	; 0x24c <_fpadd_parts+0x58>
     25c:	e2 01       	movw	r28, r4
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	11 96       	adiw	r26, 0x01	; 1
     262:	9c 91       	ld	r25, X
     264:	89 23       	and	r24, r25
     266:	81 83       	std	Z+1, r24	; 0x01
     268:	08 c1       	rjmp	.+528    	; 0x47a <_fpadd_parts+0x286>
     26a:	92 30       	cpi	r25, 0x02	; 2
     26c:	09 f4       	brne	.+2      	; 0x270 <_fpadd_parts+0x7c>
     26e:	07 c1       	rjmp	.+526    	; 0x47e <_fpadd_parts+0x28a>
     270:	12 96       	adiw	r26, 0x02	; 2
     272:	2d 90       	ld	r2, X+
     274:	3c 90       	ld	r3, X
     276:	13 97       	sbiw	r26, 0x03	; 3
     278:	eb 01       	movw	r28, r22
     27a:	8a 81       	ldd	r24, Y+2	; 0x02
     27c:	9b 81       	ldd	r25, Y+3	; 0x03
     27e:	14 96       	adiw	r26, 0x04	; 4
     280:	ad 90       	ld	r10, X+
     282:	bd 90       	ld	r11, X+
     284:	cd 90       	ld	r12, X+
     286:	dc 90       	ld	r13, X
     288:	17 97       	sbiw	r26, 0x07	; 7
     28a:	ec 80       	ldd	r14, Y+4	; 0x04
     28c:	fd 80       	ldd	r15, Y+5	; 0x05
     28e:	0e 81       	ldd	r16, Y+6	; 0x06
     290:	1f 81       	ldd	r17, Y+7	; 0x07
     292:	91 01       	movw	r18, r2
     294:	28 1b       	sub	r18, r24
     296:	39 0b       	sbc	r19, r25
     298:	b9 01       	movw	r22, r18
     29a:	37 ff       	sbrs	r19, 7
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <_fpadd_parts+0xb2>
     29e:	66 27       	eor	r22, r22
     2a0:	77 27       	eor	r23, r23
     2a2:	62 1b       	sub	r22, r18
     2a4:	73 0b       	sbc	r23, r19
     2a6:	60 32       	cpi	r22, 0x20	; 32
     2a8:	71 05       	cpc	r23, r1
     2aa:	0c f0       	brlt	.+2      	; 0x2ae <_fpadd_parts+0xba>
     2ac:	61 c0       	rjmp	.+194    	; 0x370 <_fpadd_parts+0x17c>
     2ae:	12 16       	cp	r1, r18
     2b0:	13 06       	cpc	r1, r19
     2b2:	6c f5       	brge	.+90     	; 0x30e <_fpadd_parts+0x11a>
     2b4:	37 01       	movw	r6, r14
     2b6:	48 01       	movw	r8, r16
     2b8:	06 2e       	mov	r0, r22
     2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <_fpadd_parts+0xd0>
     2bc:	96 94       	lsr	r9
     2be:	87 94       	ror	r8
     2c0:	77 94       	ror	r7
     2c2:	67 94       	ror	r6
     2c4:	0a 94       	dec	r0
     2c6:	d2 f7       	brpl	.-12     	; 0x2bc <_fpadd_parts+0xc8>
     2c8:	21 e0       	ldi	r18, 0x01	; 1
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <_fpadd_parts+0xe6>
     2d2:	22 0f       	add	r18, r18
     2d4:	33 1f       	adc	r19, r19
     2d6:	44 1f       	adc	r20, r20
     2d8:	55 1f       	adc	r21, r21
     2da:	6a 95       	dec	r22
     2dc:	d2 f7       	brpl	.-12     	; 0x2d2 <_fpadd_parts+0xde>
     2de:	21 50       	subi	r18, 0x01	; 1
     2e0:	30 40       	sbci	r19, 0x00	; 0
     2e2:	40 40       	sbci	r20, 0x00	; 0
     2e4:	50 40       	sbci	r21, 0x00	; 0
     2e6:	2e 21       	and	r18, r14
     2e8:	3f 21       	and	r19, r15
     2ea:	40 23       	and	r20, r16
     2ec:	51 23       	and	r21, r17
     2ee:	21 15       	cp	r18, r1
     2f0:	31 05       	cpc	r19, r1
     2f2:	41 05       	cpc	r20, r1
     2f4:	51 05       	cpc	r21, r1
     2f6:	21 f0       	breq	.+8      	; 0x300 <_fpadd_parts+0x10c>
     2f8:	21 e0       	ldi	r18, 0x01	; 1
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	40 e0       	ldi	r20, 0x00	; 0
     2fe:	50 e0       	ldi	r21, 0x00	; 0
     300:	79 01       	movw	r14, r18
     302:	8a 01       	movw	r16, r20
     304:	e6 28       	or	r14, r6
     306:	f7 28       	or	r15, r7
     308:	08 29       	or	r16, r8
     30a:	19 29       	or	r17, r9
     30c:	3c c0       	rjmp	.+120    	; 0x386 <_fpadd_parts+0x192>
     30e:	23 2b       	or	r18, r19
     310:	d1 f1       	breq	.+116    	; 0x386 <_fpadd_parts+0x192>
     312:	26 0e       	add	r2, r22
     314:	37 1e       	adc	r3, r23
     316:	35 01       	movw	r6, r10
     318:	46 01       	movw	r8, r12
     31a:	06 2e       	mov	r0, r22
     31c:	04 c0       	rjmp	.+8      	; 0x326 <_fpadd_parts+0x132>
     31e:	96 94       	lsr	r9
     320:	87 94       	ror	r8
     322:	77 94       	ror	r7
     324:	67 94       	ror	r6
     326:	0a 94       	dec	r0
     328:	d2 f7       	brpl	.-12     	; 0x31e <_fpadd_parts+0x12a>
     32a:	21 e0       	ldi	r18, 0x01	; 1
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e0       	ldi	r20, 0x00	; 0
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	04 c0       	rjmp	.+8      	; 0x33c <_fpadd_parts+0x148>
     334:	22 0f       	add	r18, r18
     336:	33 1f       	adc	r19, r19
     338:	44 1f       	adc	r20, r20
     33a:	55 1f       	adc	r21, r21
     33c:	6a 95       	dec	r22
     33e:	d2 f7       	brpl	.-12     	; 0x334 <_fpadd_parts+0x140>
     340:	21 50       	subi	r18, 0x01	; 1
     342:	30 40       	sbci	r19, 0x00	; 0
     344:	40 40       	sbci	r20, 0x00	; 0
     346:	50 40       	sbci	r21, 0x00	; 0
     348:	2a 21       	and	r18, r10
     34a:	3b 21       	and	r19, r11
     34c:	4c 21       	and	r20, r12
     34e:	5d 21       	and	r21, r13
     350:	21 15       	cp	r18, r1
     352:	31 05       	cpc	r19, r1
     354:	41 05       	cpc	r20, r1
     356:	51 05       	cpc	r21, r1
     358:	21 f0       	breq	.+8      	; 0x362 <_fpadd_parts+0x16e>
     35a:	21 e0       	ldi	r18, 0x01	; 1
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	40 e0       	ldi	r20, 0x00	; 0
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	59 01       	movw	r10, r18
     364:	6a 01       	movw	r12, r20
     366:	a6 28       	or	r10, r6
     368:	b7 28       	or	r11, r7
     36a:	c8 28       	or	r12, r8
     36c:	d9 28       	or	r13, r9
     36e:	0b c0       	rjmp	.+22     	; 0x386 <_fpadd_parts+0x192>
     370:	82 15       	cp	r24, r2
     372:	93 05       	cpc	r25, r3
     374:	2c f0       	brlt	.+10     	; 0x380 <_fpadd_parts+0x18c>
     376:	1c 01       	movw	r2, r24
     378:	aa 24       	eor	r10, r10
     37a:	bb 24       	eor	r11, r11
     37c:	65 01       	movw	r12, r10
     37e:	03 c0       	rjmp	.+6      	; 0x386 <_fpadd_parts+0x192>
     380:	ee 24       	eor	r14, r14
     382:	ff 24       	eor	r15, r15
     384:	87 01       	movw	r16, r14
     386:	11 96       	adiw	r26, 0x01	; 1
     388:	9c 91       	ld	r25, X
     38a:	d2 01       	movw	r26, r4
     38c:	11 96       	adiw	r26, 0x01	; 1
     38e:	8c 91       	ld	r24, X
     390:	98 17       	cp	r25, r24
     392:	09 f4       	brne	.+2      	; 0x396 <_fpadd_parts+0x1a2>
     394:	45 c0       	rjmp	.+138    	; 0x420 <_fpadd_parts+0x22c>
     396:	99 23       	and	r25, r25
     398:	39 f0       	breq	.+14     	; 0x3a8 <_fpadd_parts+0x1b4>
     39a:	a8 01       	movw	r20, r16
     39c:	97 01       	movw	r18, r14
     39e:	2a 19       	sub	r18, r10
     3a0:	3b 09       	sbc	r19, r11
     3a2:	4c 09       	sbc	r20, r12
     3a4:	5d 09       	sbc	r21, r13
     3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <_fpadd_parts+0x1c0>
     3a8:	a6 01       	movw	r20, r12
     3aa:	95 01       	movw	r18, r10
     3ac:	2e 19       	sub	r18, r14
     3ae:	3f 09       	sbc	r19, r15
     3b0:	40 0b       	sbc	r20, r16
     3b2:	51 0b       	sbc	r21, r17
     3b4:	57 fd       	sbrc	r21, 7
     3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <_fpadd_parts+0x1d4>
     3b8:	11 82       	std	Z+1, r1	; 0x01
     3ba:	33 82       	std	Z+3, r3	; 0x03
     3bc:	22 82       	std	Z+2, r2	; 0x02
     3be:	24 83       	std	Z+4, r18	; 0x04
     3c0:	35 83       	std	Z+5, r19	; 0x05
     3c2:	46 83       	std	Z+6, r20	; 0x06
     3c4:	57 83       	std	Z+7, r21	; 0x07
     3c6:	1d c0       	rjmp	.+58     	; 0x402 <_fpadd_parts+0x20e>
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	81 83       	std	Z+1, r24	; 0x01
     3cc:	33 82       	std	Z+3, r3	; 0x03
     3ce:	22 82       	std	Z+2, r2	; 0x02
     3d0:	88 27       	eor	r24, r24
     3d2:	99 27       	eor	r25, r25
     3d4:	dc 01       	movw	r26, r24
     3d6:	82 1b       	sub	r24, r18
     3d8:	93 0b       	sbc	r25, r19
     3da:	a4 0b       	sbc	r26, r20
     3dc:	b5 0b       	sbc	r27, r21
     3de:	84 83       	std	Z+4, r24	; 0x04
     3e0:	95 83       	std	Z+5, r25	; 0x05
     3e2:	a6 83       	std	Z+6, r26	; 0x06
     3e4:	b7 83       	std	Z+7, r27	; 0x07
     3e6:	0d c0       	rjmp	.+26     	; 0x402 <_fpadd_parts+0x20e>
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
     3ec:	44 1f       	adc	r20, r20
     3ee:	55 1f       	adc	r21, r21
     3f0:	24 83       	std	Z+4, r18	; 0x04
     3f2:	35 83       	std	Z+5, r19	; 0x05
     3f4:	46 83       	std	Z+6, r20	; 0x06
     3f6:	57 83       	std	Z+7, r21	; 0x07
     3f8:	82 81       	ldd	r24, Z+2	; 0x02
     3fa:	93 81       	ldd	r25, Z+3	; 0x03
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	93 83       	std	Z+3, r25	; 0x03
     400:	82 83       	std	Z+2, r24	; 0x02
     402:	24 81       	ldd	r18, Z+4	; 0x04
     404:	35 81       	ldd	r19, Z+5	; 0x05
     406:	46 81       	ldd	r20, Z+6	; 0x06
     408:	57 81       	ldd	r21, Z+7	; 0x07
     40a:	da 01       	movw	r26, r20
     40c:	c9 01       	movw	r24, r18
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	a1 09       	sbc	r26, r1
     412:	b1 09       	sbc	r27, r1
     414:	8f 5f       	subi	r24, 0xFF	; 255
     416:	9f 4f       	sbci	r25, 0xFF	; 255
     418:	af 4f       	sbci	r26, 0xFF	; 255
     41a:	bf 43       	sbci	r27, 0x3F	; 63
     41c:	28 f3       	brcs	.-54     	; 0x3e8 <_fpadd_parts+0x1f4>
     41e:	0b c0       	rjmp	.+22     	; 0x436 <_fpadd_parts+0x242>
     420:	91 83       	std	Z+1, r25	; 0x01
     422:	33 82       	std	Z+3, r3	; 0x03
     424:	22 82       	std	Z+2, r2	; 0x02
     426:	ea 0c       	add	r14, r10
     428:	fb 1c       	adc	r15, r11
     42a:	0c 1d       	adc	r16, r12
     42c:	1d 1d       	adc	r17, r13
     42e:	e4 82       	std	Z+4, r14	; 0x04
     430:	f5 82       	std	Z+5, r15	; 0x05
     432:	06 83       	std	Z+6, r16	; 0x06
     434:	17 83       	std	Z+7, r17	; 0x07
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	80 83       	st	Z, r24
     43a:	24 81       	ldd	r18, Z+4	; 0x04
     43c:	35 81       	ldd	r19, Z+5	; 0x05
     43e:	46 81       	ldd	r20, Z+6	; 0x06
     440:	57 81       	ldd	r21, Z+7	; 0x07
     442:	57 ff       	sbrs	r21, 7
     444:	1a c0       	rjmp	.+52     	; 0x47a <_fpadd_parts+0x286>
     446:	c9 01       	movw	r24, r18
     448:	aa 27       	eor	r26, r26
     44a:	97 fd       	sbrc	r25, 7
     44c:	a0 95       	com	r26
     44e:	ba 2f       	mov	r27, r26
     450:	81 70       	andi	r24, 0x01	; 1
     452:	90 70       	andi	r25, 0x00	; 0
     454:	a0 70       	andi	r26, 0x00	; 0
     456:	b0 70       	andi	r27, 0x00	; 0
     458:	56 95       	lsr	r21
     45a:	47 95       	ror	r20
     45c:	37 95       	ror	r19
     45e:	27 95       	ror	r18
     460:	82 2b       	or	r24, r18
     462:	93 2b       	or	r25, r19
     464:	a4 2b       	or	r26, r20
     466:	b5 2b       	or	r27, r21
     468:	84 83       	std	Z+4, r24	; 0x04
     46a:	95 83       	std	Z+5, r25	; 0x05
     46c:	a6 83       	std	Z+6, r26	; 0x06
     46e:	b7 83       	std	Z+7, r27	; 0x07
     470:	82 81       	ldd	r24, Z+2	; 0x02
     472:	93 81       	ldd	r25, Z+3	; 0x03
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	93 83       	std	Z+3, r25	; 0x03
     478:	82 83       	std	Z+2, r24	; 0x02
     47a:	df 01       	movw	r26, r30
     47c:	01 c0       	rjmp	.+2      	; 0x480 <_fpadd_parts+0x28c>
     47e:	d2 01       	movw	r26, r4
     480:	cd 01       	movw	r24, r26
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	e2 e1       	ldi	r30, 0x12	; 18
     488:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__epilogue_restores__>

0000048c <__subsf3>:
     48c:	a0 e2       	ldi	r26, 0x20	; 32
     48e:	b0 e0       	ldi	r27, 0x00	; 0
     490:	ec e4       	ldi	r30, 0x4C	; 76
     492:	f2 e0       	ldi	r31, 0x02	; 2
     494:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__prologue_saves__+0x18>
     498:	69 83       	std	Y+1, r22	; 0x01
     49a:	7a 83       	std	Y+2, r23	; 0x02
     49c:	8b 83       	std	Y+3, r24	; 0x03
     49e:	9c 83       	std	Y+4, r25	; 0x04
     4a0:	2d 83       	std	Y+5, r18	; 0x05
     4a2:	3e 83       	std	Y+6, r19	; 0x06
     4a4:	4f 83       	std	Y+7, r20	; 0x07
     4a6:	58 87       	std	Y+8, r21	; 0x08
     4a8:	e9 e0       	ldi	r30, 0x09	; 9
     4aa:	ee 2e       	mov	r14, r30
     4ac:	f1 2c       	mov	r15, r1
     4ae:	ec 0e       	add	r14, r28
     4b0:	fd 1e       	adc	r15, r29
     4b2:	ce 01       	movw	r24, r28
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	b7 01       	movw	r22, r14
     4b8:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     4bc:	8e 01       	movw	r16, r28
     4be:	0f 5e       	subi	r16, 0xEF	; 239
     4c0:	1f 4f       	sbci	r17, 0xFF	; 255
     4c2:	ce 01       	movw	r24, r28
     4c4:	05 96       	adiw	r24, 0x05	; 5
     4c6:	b8 01       	movw	r22, r16
     4c8:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     4cc:	8a 89       	ldd	r24, Y+18	; 0x12
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	89 27       	eor	r24, r25
     4d2:	8a 8b       	std	Y+18, r24	; 0x12
     4d4:	c7 01       	movw	r24, r14
     4d6:	b8 01       	movw	r22, r16
     4d8:	ae 01       	movw	r20, r28
     4da:	47 5e       	subi	r20, 0xE7	; 231
     4dc:	5f 4f       	sbci	r21, 0xFF	; 255
     4de:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_fpadd_parts>
     4e2:	0e 94 82 04 	call	0x904	; 0x904 <__pack_f>
     4e6:	a0 96       	adiw	r28, 0x20	; 32
     4e8:	e6 e0       	ldi	r30, 0x06	; 6
     4ea:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__epilogue_restores__+0x18>

000004ee <__addsf3>:
     4ee:	a0 e2       	ldi	r26, 0x20	; 32
     4f0:	b0 e0       	ldi	r27, 0x00	; 0
     4f2:	ed e7       	ldi	r30, 0x7D	; 125
     4f4:	f2 e0       	ldi	r31, 0x02	; 2
     4f6:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__prologue_saves__+0x18>
     4fa:	69 83       	std	Y+1, r22	; 0x01
     4fc:	7a 83       	std	Y+2, r23	; 0x02
     4fe:	8b 83       	std	Y+3, r24	; 0x03
     500:	9c 83       	std	Y+4, r25	; 0x04
     502:	2d 83       	std	Y+5, r18	; 0x05
     504:	3e 83       	std	Y+6, r19	; 0x06
     506:	4f 83       	std	Y+7, r20	; 0x07
     508:	58 87       	std	Y+8, r21	; 0x08
     50a:	f9 e0       	ldi	r31, 0x09	; 9
     50c:	ef 2e       	mov	r14, r31
     50e:	f1 2c       	mov	r15, r1
     510:	ec 0e       	add	r14, r28
     512:	fd 1e       	adc	r15, r29
     514:	ce 01       	movw	r24, r28
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	b7 01       	movw	r22, r14
     51a:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     51e:	8e 01       	movw	r16, r28
     520:	0f 5e       	subi	r16, 0xEF	; 239
     522:	1f 4f       	sbci	r17, 0xFF	; 255
     524:	ce 01       	movw	r24, r28
     526:	05 96       	adiw	r24, 0x05	; 5
     528:	b8 01       	movw	r22, r16
     52a:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     52e:	c7 01       	movw	r24, r14
     530:	b8 01       	movw	r22, r16
     532:	ae 01       	movw	r20, r28
     534:	47 5e       	subi	r20, 0xE7	; 231
     536:	5f 4f       	sbci	r21, 0xFF	; 255
     538:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_fpadd_parts>
     53c:	0e 94 82 04 	call	0x904	; 0x904 <__pack_f>
     540:	a0 96       	adiw	r28, 0x20	; 32
     542:	e6 e0       	ldi	r30, 0x06	; 6
     544:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__epilogue_restores__+0x18>

00000548 <__mulsf3>:
     548:	a0 e2       	ldi	r26, 0x20	; 32
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	ea ea       	ldi	r30, 0xAA	; 170
     54e:	f2 e0       	ldi	r31, 0x02	; 2
     550:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <__prologue_saves__>
     554:	69 83       	std	Y+1, r22	; 0x01
     556:	7a 83       	std	Y+2, r23	; 0x02
     558:	8b 83       	std	Y+3, r24	; 0x03
     55a:	9c 83       	std	Y+4, r25	; 0x04
     55c:	2d 83       	std	Y+5, r18	; 0x05
     55e:	3e 83       	std	Y+6, r19	; 0x06
     560:	4f 83       	std	Y+7, r20	; 0x07
     562:	58 87       	std	Y+8, r21	; 0x08
     564:	ce 01       	movw	r24, r28
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	be 01       	movw	r22, r28
     56a:	67 5f       	subi	r22, 0xF7	; 247
     56c:	7f 4f       	sbci	r23, 0xFF	; 255
     56e:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     572:	ce 01       	movw	r24, r28
     574:	05 96       	adiw	r24, 0x05	; 5
     576:	be 01       	movw	r22, r28
     578:	6f 5e       	subi	r22, 0xEF	; 239
     57a:	7f 4f       	sbci	r23, 0xFF	; 255
     57c:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     580:	99 85       	ldd	r25, Y+9	; 0x09
     582:	92 30       	cpi	r25, 0x02	; 2
     584:	88 f0       	brcs	.+34     	; 0x5a8 <__mulsf3+0x60>
     586:	89 89       	ldd	r24, Y+17	; 0x11
     588:	82 30       	cpi	r24, 0x02	; 2
     58a:	c8 f0       	brcs	.+50     	; 0x5be <__mulsf3+0x76>
     58c:	94 30       	cpi	r25, 0x04	; 4
     58e:	19 f4       	brne	.+6      	; 0x596 <__mulsf3+0x4e>
     590:	82 30       	cpi	r24, 0x02	; 2
     592:	51 f4       	brne	.+20     	; 0x5a8 <__mulsf3+0x60>
     594:	04 c0       	rjmp	.+8      	; 0x59e <__mulsf3+0x56>
     596:	84 30       	cpi	r24, 0x04	; 4
     598:	29 f4       	brne	.+10     	; 0x5a4 <__mulsf3+0x5c>
     59a:	92 30       	cpi	r25, 0x02	; 2
     59c:	81 f4       	brne	.+32     	; 0x5be <__mulsf3+0x76>
     59e:	87 e6       	ldi	r24, 0x67	; 103
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	c6 c0       	rjmp	.+396    	; 0x730 <__mulsf3+0x1e8>
     5a4:	92 30       	cpi	r25, 0x02	; 2
     5a6:	49 f4       	brne	.+18     	; 0x5ba <__mulsf3+0x72>
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ac:	8a 89       	ldd	r24, Y+18	; 0x12
     5ae:	98 13       	cpse	r25, r24
     5b0:	21 e0       	ldi	r18, 0x01	; 1
     5b2:	2a 87       	std	Y+10, r18	; 0x0a
     5b4:	ce 01       	movw	r24, r28
     5b6:	09 96       	adiw	r24, 0x09	; 9
     5b8:	bb c0       	rjmp	.+374    	; 0x730 <__mulsf3+0x1e8>
     5ba:	82 30       	cpi	r24, 0x02	; 2
     5bc:	49 f4       	brne	.+18     	; 0x5d0 <__mulsf3+0x88>
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5c2:	8a 89       	ldd	r24, Y+18	; 0x12
     5c4:	98 13       	cpse	r25, r24
     5c6:	21 e0       	ldi	r18, 0x01	; 1
     5c8:	2a 8b       	std	Y+18, r18	; 0x12
     5ca:	ce 01       	movw	r24, r28
     5cc:	41 96       	adiw	r24, 0x11	; 17
     5ce:	b0 c0       	rjmp	.+352    	; 0x730 <__mulsf3+0x1e8>
     5d0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5d2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5d4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5d6:	58 88       	ldd	r5, Y+16	; 0x10
     5d8:	6d 88       	ldd	r6, Y+21	; 0x15
     5da:	7e 88       	ldd	r7, Y+22	; 0x16
     5dc:	8f 88       	ldd	r8, Y+23	; 0x17
     5de:	98 8c       	ldd	r9, Y+24	; 0x18
     5e0:	ee 24       	eor	r14, r14
     5e2:	ff 24       	eor	r15, r15
     5e4:	87 01       	movw	r16, r14
     5e6:	aa 24       	eor	r10, r10
     5e8:	bb 24       	eor	r11, r11
     5ea:	65 01       	movw	r12, r10
     5ec:	40 e0       	ldi	r20, 0x00	; 0
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	e0 e0       	ldi	r30, 0x00	; 0
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	c1 01       	movw	r24, r2
     5fa:	81 70       	andi	r24, 0x01	; 1
     5fc:	90 70       	andi	r25, 0x00	; 0
     5fe:	89 2b       	or	r24, r25
     600:	e9 f0       	breq	.+58     	; 0x63c <__mulsf3+0xf4>
     602:	e6 0c       	add	r14, r6
     604:	f7 1c       	adc	r15, r7
     606:	08 1d       	adc	r16, r8
     608:	19 1d       	adc	r17, r9
     60a:	9a 01       	movw	r18, r20
     60c:	ab 01       	movw	r20, r22
     60e:	2a 0d       	add	r18, r10
     610:	3b 1d       	adc	r19, r11
     612:	4c 1d       	adc	r20, r12
     614:	5d 1d       	adc	r21, r13
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	a0 e0       	ldi	r26, 0x00	; 0
     61c:	b0 e0       	ldi	r27, 0x00	; 0
     61e:	e6 14       	cp	r14, r6
     620:	f7 04       	cpc	r15, r7
     622:	08 05       	cpc	r16, r8
     624:	19 05       	cpc	r17, r9
     626:	20 f4       	brcc	.+8      	; 0x630 <__mulsf3+0xe8>
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	a0 e0       	ldi	r26, 0x00	; 0
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	ba 01       	movw	r22, r20
     632:	a9 01       	movw	r20, r18
     634:	48 0f       	add	r20, r24
     636:	59 1f       	adc	r21, r25
     638:	6a 1f       	adc	r22, r26
     63a:	7b 1f       	adc	r23, r27
     63c:	aa 0c       	add	r10, r10
     63e:	bb 1c       	adc	r11, r11
     640:	cc 1c       	adc	r12, r12
     642:	dd 1c       	adc	r13, r13
     644:	97 fe       	sbrs	r9, 7
     646:	08 c0       	rjmp	.+16     	; 0x658 <__mulsf3+0x110>
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	a0 e0       	ldi	r26, 0x00	; 0
     64e:	b0 e0       	ldi	r27, 0x00	; 0
     650:	a8 2a       	or	r10, r24
     652:	b9 2a       	or	r11, r25
     654:	ca 2a       	or	r12, r26
     656:	db 2a       	or	r13, r27
     658:	31 96       	adiw	r30, 0x01	; 1
     65a:	e0 32       	cpi	r30, 0x20	; 32
     65c:	f1 05       	cpc	r31, r1
     65e:	49 f0       	breq	.+18     	; 0x672 <__mulsf3+0x12a>
     660:	66 0c       	add	r6, r6
     662:	77 1c       	adc	r7, r7
     664:	88 1c       	adc	r8, r8
     666:	99 1c       	adc	r9, r9
     668:	56 94       	lsr	r5
     66a:	47 94       	ror	r4
     66c:	37 94       	ror	r3
     66e:	27 94       	ror	r2
     670:	c3 cf       	rjmp	.-122    	; 0x5f8 <__mulsf3+0xb0>
     672:	fa 85       	ldd	r31, Y+10	; 0x0a
     674:	ea 89       	ldd	r30, Y+18	; 0x12
     676:	2b 89       	ldd	r18, Y+19	; 0x13
     678:	3c 89       	ldd	r19, Y+20	; 0x14
     67a:	8b 85       	ldd	r24, Y+11	; 0x0b
     67c:	9c 85       	ldd	r25, Y+12	; 0x0c
     67e:	28 0f       	add	r18, r24
     680:	39 1f       	adc	r19, r25
     682:	2e 5f       	subi	r18, 0xFE	; 254
     684:	3f 4f       	sbci	r19, 0xFF	; 255
     686:	17 c0       	rjmp	.+46     	; 0x6b6 <__mulsf3+0x16e>
     688:	ca 01       	movw	r24, r20
     68a:	81 70       	andi	r24, 0x01	; 1
     68c:	90 70       	andi	r25, 0x00	; 0
     68e:	89 2b       	or	r24, r25
     690:	61 f0       	breq	.+24     	; 0x6aa <__mulsf3+0x162>
     692:	16 95       	lsr	r17
     694:	07 95       	ror	r16
     696:	f7 94       	ror	r15
     698:	e7 94       	ror	r14
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	a0 e0       	ldi	r26, 0x00	; 0
     6a0:	b0 e8       	ldi	r27, 0x80	; 128
     6a2:	e8 2a       	or	r14, r24
     6a4:	f9 2a       	or	r15, r25
     6a6:	0a 2b       	or	r16, r26
     6a8:	1b 2b       	or	r17, r27
     6aa:	76 95       	lsr	r23
     6ac:	67 95       	ror	r22
     6ae:	57 95       	ror	r21
     6b0:	47 95       	ror	r20
     6b2:	2f 5f       	subi	r18, 0xFF	; 255
     6b4:	3f 4f       	sbci	r19, 0xFF	; 255
     6b6:	77 fd       	sbrc	r23, 7
     6b8:	e7 cf       	rjmp	.-50     	; 0x688 <__mulsf3+0x140>
     6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <__mulsf3+0x18c>
     6bc:	44 0f       	add	r20, r20
     6be:	55 1f       	adc	r21, r21
     6c0:	66 1f       	adc	r22, r22
     6c2:	77 1f       	adc	r23, r23
     6c4:	17 fd       	sbrc	r17, 7
     6c6:	41 60       	ori	r20, 0x01	; 1
     6c8:	ee 0c       	add	r14, r14
     6ca:	ff 1c       	adc	r15, r15
     6cc:	00 1f       	adc	r16, r16
     6ce:	11 1f       	adc	r17, r17
     6d0:	21 50       	subi	r18, 0x01	; 1
     6d2:	30 40       	sbci	r19, 0x00	; 0
     6d4:	40 30       	cpi	r20, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	59 07       	cpc	r21, r25
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	69 07       	cpc	r22, r25
     6de:	90 e4       	ldi	r25, 0x40	; 64
     6e0:	79 07       	cpc	r23, r25
     6e2:	60 f3       	brcs	.-40     	; 0x6bc <__mulsf3+0x174>
     6e4:	2b 8f       	std	Y+27, r18	; 0x1b
     6e6:	3c 8f       	std	Y+28, r19	; 0x1c
     6e8:	db 01       	movw	r26, r22
     6ea:	ca 01       	movw	r24, r20
     6ec:	8f 77       	andi	r24, 0x7F	; 127
     6ee:	90 70       	andi	r25, 0x00	; 0
     6f0:	a0 70       	andi	r26, 0x00	; 0
     6f2:	b0 70       	andi	r27, 0x00	; 0
     6f4:	80 34       	cpi	r24, 0x40	; 64
     6f6:	91 05       	cpc	r25, r1
     6f8:	a1 05       	cpc	r26, r1
     6fa:	b1 05       	cpc	r27, r1
     6fc:	61 f4       	brne	.+24     	; 0x716 <__mulsf3+0x1ce>
     6fe:	47 fd       	sbrc	r20, 7
     700:	0a c0       	rjmp	.+20     	; 0x716 <__mulsf3+0x1ce>
     702:	e1 14       	cp	r14, r1
     704:	f1 04       	cpc	r15, r1
     706:	01 05       	cpc	r16, r1
     708:	11 05       	cpc	r17, r1
     70a:	29 f0       	breq	.+10     	; 0x716 <__mulsf3+0x1ce>
     70c:	40 5c       	subi	r20, 0xC0	; 192
     70e:	5f 4f       	sbci	r21, 0xFF	; 255
     710:	6f 4f       	sbci	r22, 0xFF	; 255
     712:	7f 4f       	sbci	r23, 0xFF	; 255
     714:	40 78       	andi	r20, 0x80	; 128
     716:	1a 8e       	std	Y+26, r1	; 0x1a
     718:	fe 17       	cp	r31, r30
     71a:	11 f0       	breq	.+4      	; 0x720 <__mulsf3+0x1d8>
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	8a 8f       	std	Y+26, r24	; 0x1a
     720:	4d 8f       	std	Y+29, r20	; 0x1d
     722:	5e 8f       	std	Y+30, r21	; 0x1e
     724:	6f 8f       	std	Y+31, r22	; 0x1f
     726:	78 a3       	std	Y+32, r23	; 0x20
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	89 8f       	std	Y+25, r24	; 0x19
     72c:	ce 01       	movw	r24, r28
     72e:	49 96       	adiw	r24, 0x19	; 25
     730:	0e 94 82 04 	call	0x904	; 0x904 <__pack_f>
     734:	a0 96       	adiw	r28, 0x20	; 32
     736:	e2 e1       	ldi	r30, 0x12	; 18
     738:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__epilogue_restores__>

0000073c <__gtsf2>:
     73c:	a8 e1       	ldi	r26, 0x18	; 24
     73e:	b0 e0       	ldi	r27, 0x00	; 0
     740:	e4 ea       	ldi	r30, 0xA4	; 164
     742:	f3 e0       	ldi	r31, 0x03	; 3
     744:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__prologue_saves__+0x18>
     748:	69 83       	std	Y+1, r22	; 0x01
     74a:	7a 83       	std	Y+2, r23	; 0x02
     74c:	8b 83       	std	Y+3, r24	; 0x03
     74e:	9c 83       	std	Y+4, r25	; 0x04
     750:	2d 83       	std	Y+5, r18	; 0x05
     752:	3e 83       	std	Y+6, r19	; 0x06
     754:	4f 83       	std	Y+7, r20	; 0x07
     756:	58 87       	std	Y+8, r21	; 0x08
     758:	89 e0       	ldi	r24, 0x09	; 9
     75a:	e8 2e       	mov	r14, r24
     75c:	f1 2c       	mov	r15, r1
     75e:	ec 0e       	add	r14, r28
     760:	fd 1e       	adc	r15, r29
     762:	ce 01       	movw	r24, r28
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	b7 01       	movw	r22, r14
     768:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     76c:	8e 01       	movw	r16, r28
     76e:	0f 5e       	subi	r16, 0xEF	; 239
     770:	1f 4f       	sbci	r17, 0xFF	; 255
     772:	ce 01       	movw	r24, r28
     774:	05 96       	adiw	r24, 0x05	; 5
     776:	b8 01       	movw	r22, r16
     778:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     77c:	89 85       	ldd	r24, Y+9	; 0x09
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	40 f0       	brcs	.+16     	; 0x792 <__gtsf2+0x56>
     782:	89 89       	ldd	r24, Y+17	; 0x11
     784:	82 30       	cpi	r24, 0x02	; 2
     786:	28 f0       	brcs	.+10     	; 0x792 <__gtsf2+0x56>
     788:	c7 01       	movw	r24, r14
     78a:	b8 01       	movw	r22, r16
     78c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fpcmp_parts_f>
     790:	01 c0       	rjmp	.+2      	; 0x794 <__gtsf2+0x58>
     792:	8f ef       	ldi	r24, 0xFF	; 255
     794:	68 96       	adiw	r28, 0x18	; 24
     796:	e6 e0       	ldi	r30, 0x06	; 6
     798:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__epilogue_restores__+0x18>

0000079c <__gesf2>:
     79c:	a8 e1       	ldi	r26, 0x18	; 24
     79e:	b0 e0       	ldi	r27, 0x00	; 0
     7a0:	e4 ed       	ldi	r30, 0xD4	; 212
     7a2:	f3 e0       	ldi	r31, 0x03	; 3
     7a4:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__prologue_saves__+0x18>
     7a8:	69 83       	std	Y+1, r22	; 0x01
     7aa:	7a 83       	std	Y+2, r23	; 0x02
     7ac:	8b 83       	std	Y+3, r24	; 0x03
     7ae:	9c 83       	std	Y+4, r25	; 0x04
     7b0:	2d 83       	std	Y+5, r18	; 0x05
     7b2:	3e 83       	std	Y+6, r19	; 0x06
     7b4:	4f 83       	std	Y+7, r20	; 0x07
     7b6:	58 87       	std	Y+8, r21	; 0x08
     7b8:	89 e0       	ldi	r24, 0x09	; 9
     7ba:	e8 2e       	mov	r14, r24
     7bc:	f1 2c       	mov	r15, r1
     7be:	ec 0e       	add	r14, r28
     7c0:	fd 1e       	adc	r15, r29
     7c2:	ce 01       	movw	r24, r28
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	b7 01       	movw	r22, r14
     7c8:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     7cc:	8e 01       	movw	r16, r28
     7ce:	0f 5e       	subi	r16, 0xEF	; 239
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
     7d2:	ce 01       	movw	r24, r28
     7d4:	05 96       	adiw	r24, 0x05	; 5
     7d6:	b8 01       	movw	r22, r16
     7d8:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     7dc:	89 85       	ldd	r24, Y+9	; 0x09
     7de:	82 30       	cpi	r24, 0x02	; 2
     7e0:	40 f0       	brcs	.+16     	; 0x7f2 <__gesf2+0x56>
     7e2:	89 89       	ldd	r24, Y+17	; 0x11
     7e4:	82 30       	cpi	r24, 0x02	; 2
     7e6:	28 f0       	brcs	.+10     	; 0x7f2 <__gesf2+0x56>
     7e8:	c7 01       	movw	r24, r14
     7ea:	b8 01       	movw	r22, r16
     7ec:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fpcmp_parts_f>
     7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <__gesf2+0x58>
     7f2:	8f ef       	ldi	r24, 0xFF	; 255
     7f4:	68 96       	adiw	r28, 0x18	; 24
     7f6:	e6 e0       	ldi	r30, 0x06	; 6
     7f8:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__epilogue_restores__+0x18>

000007fc <__ltsf2>:
     7fc:	a8 e1       	ldi	r26, 0x18	; 24
     7fe:	b0 e0       	ldi	r27, 0x00	; 0
     800:	e4 e0       	ldi	r30, 0x04	; 4
     802:	f4 e0       	ldi	r31, 0x04	; 4
     804:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__prologue_saves__+0x18>
     808:	69 83       	std	Y+1, r22	; 0x01
     80a:	7a 83       	std	Y+2, r23	; 0x02
     80c:	8b 83       	std	Y+3, r24	; 0x03
     80e:	9c 83       	std	Y+4, r25	; 0x04
     810:	2d 83       	std	Y+5, r18	; 0x05
     812:	3e 83       	std	Y+6, r19	; 0x06
     814:	4f 83       	std	Y+7, r20	; 0x07
     816:	58 87       	std	Y+8, r21	; 0x08
     818:	89 e0       	ldi	r24, 0x09	; 9
     81a:	e8 2e       	mov	r14, r24
     81c:	f1 2c       	mov	r15, r1
     81e:	ec 0e       	add	r14, r28
     820:	fd 1e       	adc	r15, r29
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	b7 01       	movw	r22, r14
     828:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     82c:	8e 01       	movw	r16, r28
     82e:	0f 5e       	subi	r16, 0xEF	; 239
     830:	1f 4f       	sbci	r17, 0xFF	; 255
     832:	ce 01       	movw	r24, r28
     834:	05 96       	adiw	r24, 0x05	; 5
     836:	b8 01       	movw	r22, r16
     838:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     83c:	89 85       	ldd	r24, Y+9	; 0x09
     83e:	82 30       	cpi	r24, 0x02	; 2
     840:	40 f0       	brcs	.+16     	; 0x852 <__ltsf2+0x56>
     842:	89 89       	ldd	r24, Y+17	; 0x11
     844:	82 30       	cpi	r24, 0x02	; 2
     846:	28 f0       	brcs	.+10     	; 0x852 <__ltsf2+0x56>
     848:	c7 01       	movw	r24, r14
     84a:	b8 01       	movw	r22, r16
     84c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fpcmp_parts_f>
     850:	01 c0       	rjmp	.+2      	; 0x854 <__ltsf2+0x58>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	68 96       	adiw	r28, 0x18	; 24
     856:	e6 e0       	ldi	r30, 0x06	; 6
     858:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__epilogue_restores__+0x18>

0000085c <__fixsfsi>:
     85c:	ac e0       	ldi	r26, 0x0C	; 12
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	e4 e3       	ldi	r30, 0x34	; 52
     862:	f4 e0       	ldi	r31, 0x04	; 4
     864:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__prologue_saves__+0x20>
     868:	69 83       	std	Y+1, r22	; 0x01
     86a:	7a 83       	std	Y+2, r23	; 0x02
     86c:	8b 83       	std	Y+3, r24	; 0x03
     86e:	9c 83       	std	Y+4, r25	; 0x04
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	be 01       	movw	r22, r28
     876:	6b 5f       	subi	r22, 0xFB	; 251
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	0e 94 57 05 	call	0xaae	; 0xaae <__unpack_f>
     87e:	8d 81       	ldd	r24, Y+5	; 0x05
     880:	82 30       	cpi	r24, 0x02	; 2
     882:	61 f1       	breq	.+88     	; 0x8dc <__stack+0x7d>
     884:	82 30       	cpi	r24, 0x02	; 2
     886:	50 f1       	brcs	.+84     	; 0x8dc <__stack+0x7d>
     888:	84 30       	cpi	r24, 0x04	; 4
     88a:	21 f4       	brne	.+8      	; 0x894 <__stack+0x35>
     88c:	8e 81       	ldd	r24, Y+6	; 0x06
     88e:	88 23       	and	r24, r24
     890:	51 f1       	breq	.+84     	; 0x8e6 <__stack+0x87>
     892:	2e c0       	rjmp	.+92     	; 0x8f0 <__stack+0x91>
     894:	2f 81       	ldd	r18, Y+7	; 0x07
     896:	38 85       	ldd	r19, Y+8	; 0x08
     898:	37 fd       	sbrc	r19, 7
     89a:	20 c0       	rjmp	.+64     	; 0x8dc <__stack+0x7d>
     89c:	6e 81       	ldd	r22, Y+6	; 0x06
     89e:	2f 31       	cpi	r18, 0x1F	; 31
     8a0:	31 05       	cpc	r19, r1
     8a2:	1c f0       	brlt	.+6      	; 0x8aa <__stack+0x4b>
     8a4:	66 23       	and	r22, r22
     8a6:	f9 f0       	breq	.+62     	; 0x8e6 <__stack+0x87>
     8a8:	23 c0       	rjmp	.+70     	; 0x8f0 <__stack+0x91>
     8aa:	8e e1       	ldi	r24, 0x1E	; 30
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	82 1b       	sub	r24, r18
     8b0:	93 0b       	sbc	r25, r19
     8b2:	29 85       	ldd	r18, Y+9	; 0x09
     8b4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8b6:	4b 85       	ldd	r20, Y+11	; 0x0b
     8b8:	5c 85       	ldd	r21, Y+12	; 0x0c
     8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <__stack+0x65>
     8bc:	56 95       	lsr	r21
     8be:	47 95       	ror	r20
     8c0:	37 95       	ror	r19
     8c2:	27 95       	ror	r18
     8c4:	8a 95       	dec	r24
     8c6:	d2 f7       	brpl	.-12     	; 0x8bc <__stack+0x5d>
     8c8:	66 23       	and	r22, r22
     8ca:	b1 f0       	breq	.+44     	; 0x8f8 <__stack+0x99>
     8cc:	50 95       	com	r21
     8ce:	40 95       	com	r20
     8d0:	30 95       	com	r19
     8d2:	21 95       	neg	r18
     8d4:	3f 4f       	sbci	r19, 0xFF	; 255
     8d6:	4f 4f       	sbci	r20, 0xFF	; 255
     8d8:	5f 4f       	sbci	r21, 0xFF	; 255
     8da:	0e c0       	rjmp	.+28     	; 0x8f8 <__stack+0x99>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e0       	ldi	r20, 0x00	; 0
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <__stack+0x99>
     8e6:	2f ef       	ldi	r18, 0xFF	; 255
     8e8:	3f ef       	ldi	r19, 0xFF	; 255
     8ea:	4f ef       	ldi	r20, 0xFF	; 255
     8ec:	5f e7       	ldi	r21, 0x7F	; 127
     8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <__stack+0x99>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e8       	ldi	r21, 0x80	; 128
     8f8:	b9 01       	movw	r22, r18
     8fa:	ca 01       	movw	r24, r20
     8fc:	2c 96       	adiw	r28, 0x0c	; 12
     8fe:	e2 e0       	ldi	r30, 0x02	; 2
     900:	0c 94 24 16 	jmp	0x2c48	; 0x2c48 <__epilogue_restores__+0x20>

00000904 <__pack_f>:
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	fc 01       	movw	r30, r24
     910:	e4 80       	ldd	r14, Z+4	; 0x04
     912:	f5 80       	ldd	r15, Z+5	; 0x05
     914:	06 81       	ldd	r16, Z+6	; 0x06
     916:	17 81       	ldd	r17, Z+7	; 0x07
     918:	d1 80       	ldd	r13, Z+1	; 0x01
     91a:	80 81       	ld	r24, Z
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	48 f4       	brcc	.+18     	; 0x932 <__pack_f+0x2e>
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e1       	ldi	r26, 0x10	; 16
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	e8 2a       	or	r14, r24
     92a:	f9 2a       	or	r15, r25
     92c:	0a 2b       	or	r16, r26
     92e:	1b 2b       	or	r17, r27
     930:	a5 c0       	rjmp	.+330    	; 0xa7c <__pack_f+0x178>
     932:	84 30       	cpi	r24, 0x04	; 4
     934:	09 f4       	brne	.+2      	; 0x938 <__pack_f+0x34>
     936:	9f c0       	rjmp	.+318    	; 0xa76 <__pack_f+0x172>
     938:	82 30       	cpi	r24, 0x02	; 2
     93a:	21 f4       	brne	.+8      	; 0x944 <__pack_f+0x40>
     93c:	ee 24       	eor	r14, r14
     93e:	ff 24       	eor	r15, r15
     940:	87 01       	movw	r16, r14
     942:	05 c0       	rjmp	.+10     	; 0x94e <__pack_f+0x4a>
     944:	e1 14       	cp	r14, r1
     946:	f1 04       	cpc	r15, r1
     948:	01 05       	cpc	r16, r1
     94a:	11 05       	cpc	r17, r1
     94c:	19 f4       	brne	.+6      	; 0x954 <__pack_f+0x50>
     94e:	e0 e0       	ldi	r30, 0x00	; 0
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	96 c0       	rjmp	.+300    	; 0xa80 <__pack_f+0x17c>
     954:	62 81       	ldd	r22, Z+2	; 0x02
     956:	73 81       	ldd	r23, Z+3	; 0x03
     958:	9f ef       	ldi	r25, 0xFF	; 255
     95a:	62 38       	cpi	r22, 0x82	; 130
     95c:	79 07       	cpc	r23, r25
     95e:	0c f0       	brlt	.+2      	; 0x962 <__pack_f+0x5e>
     960:	5b c0       	rjmp	.+182    	; 0xa18 <__pack_f+0x114>
     962:	22 e8       	ldi	r18, 0x82	; 130
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	26 1b       	sub	r18, r22
     968:	37 0b       	sbc	r19, r23
     96a:	2a 31       	cpi	r18, 0x1A	; 26
     96c:	31 05       	cpc	r19, r1
     96e:	2c f0       	brlt	.+10     	; 0x97a <__pack_f+0x76>
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	2a c0       	rjmp	.+84     	; 0x9ce <__pack_f+0xca>
     97a:	b8 01       	movw	r22, r16
     97c:	a7 01       	movw	r20, r14
     97e:	02 2e       	mov	r0, r18
     980:	04 c0       	rjmp	.+8      	; 0x98a <__pack_f+0x86>
     982:	76 95       	lsr	r23
     984:	67 95       	ror	r22
     986:	57 95       	ror	r21
     988:	47 95       	ror	r20
     98a:	0a 94       	dec	r0
     98c:	d2 f7       	brpl	.-12     	; 0x982 <__pack_f+0x7e>
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a0 e0       	ldi	r26, 0x00	; 0
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__pack_f+0x9c>
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	aa 1f       	adc	r26, r26
     99e:	bb 1f       	adc	r27, r27
     9a0:	2a 95       	dec	r18
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__pack_f+0x94>
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	a1 09       	sbc	r26, r1
     9a8:	b1 09       	sbc	r27, r1
     9aa:	8e 21       	and	r24, r14
     9ac:	9f 21       	and	r25, r15
     9ae:	a0 23       	and	r26, r16
     9b0:	b1 23       	and	r27, r17
     9b2:	00 97       	sbiw	r24, 0x00	; 0
     9b4:	a1 05       	cpc	r26, r1
     9b6:	b1 05       	cpc	r27, r1
     9b8:	21 f0       	breq	.+8      	; 0x9c2 <__pack_f+0xbe>
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	9a 01       	movw	r18, r20
     9c4:	ab 01       	movw	r20, r22
     9c6:	28 2b       	or	r18, r24
     9c8:	39 2b       	or	r19, r25
     9ca:	4a 2b       	or	r20, r26
     9cc:	5b 2b       	or	r21, r27
     9ce:	da 01       	movw	r26, r20
     9d0:	c9 01       	movw	r24, r18
     9d2:	8f 77       	andi	r24, 0x7F	; 127
     9d4:	90 70       	andi	r25, 0x00	; 0
     9d6:	a0 70       	andi	r26, 0x00	; 0
     9d8:	b0 70       	andi	r27, 0x00	; 0
     9da:	80 34       	cpi	r24, 0x40	; 64
     9dc:	91 05       	cpc	r25, r1
     9de:	a1 05       	cpc	r26, r1
     9e0:	b1 05       	cpc	r27, r1
     9e2:	39 f4       	brne	.+14     	; 0x9f2 <__pack_f+0xee>
     9e4:	27 ff       	sbrs	r18, 7
     9e6:	09 c0       	rjmp	.+18     	; 0x9fa <__pack_f+0xf6>
     9e8:	20 5c       	subi	r18, 0xC0	; 192
     9ea:	3f 4f       	sbci	r19, 0xFF	; 255
     9ec:	4f 4f       	sbci	r20, 0xFF	; 255
     9ee:	5f 4f       	sbci	r21, 0xFF	; 255
     9f0:	04 c0       	rjmp	.+8      	; 0x9fa <__pack_f+0xf6>
     9f2:	21 5c       	subi	r18, 0xC1	; 193
     9f4:	3f 4f       	sbci	r19, 0xFF	; 255
     9f6:	4f 4f       	sbci	r20, 0xFF	; 255
     9f8:	5f 4f       	sbci	r21, 0xFF	; 255
     9fa:	e0 e0       	ldi	r30, 0x00	; 0
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	20 30       	cpi	r18, 0x00	; 0
     a00:	a0 e0       	ldi	r26, 0x00	; 0
     a02:	3a 07       	cpc	r19, r26
     a04:	a0 e0       	ldi	r26, 0x00	; 0
     a06:	4a 07       	cpc	r20, r26
     a08:	a0 e4       	ldi	r26, 0x40	; 64
     a0a:	5a 07       	cpc	r21, r26
     a0c:	10 f0       	brcs	.+4      	; 0xa12 <__pack_f+0x10e>
     a0e:	e1 e0       	ldi	r30, 0x01	; 1
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	79 01       	movw	r14, r18
     a14:	8a 01       	movw	r16, r20
     a16:	27 c0       	rjmp	.+78     	; 0xa66 <__pack_f+0x162>
     a18:	60 38       	cpi	r22, 0x80	; 128
     a1a:	71 05       	cpc	r23, r1
     a1c:	64 f5       	brge	.+88     	; 0xa76 <__pack_f+0x172>
     a1e:	fb 01       	movw	r30, r22
     a20:	e1 58       	subi	r30, 0x81	; 129
     a22:	ff 4f       	sbci	r31, 0xFF	; 255
     a24:	d8 01       	movw	r26, r16
     a26:	c7 01       	movw	r24, r14
     a28:	8f 77       	andi	r24, 0x7F	; 127
     a2a:	90 70       	andi	r25, 0x00	; 0
     a2c:	a0 70       	andi	r26, 0x00	; 0
     a2e:	b0 70       	andi	r27, 0x00	; 0
     a30:	80 34       	cpi	r24, 0x40	; 64
     a32:	91 05       	cpc	r25, r1
     a34:	a1 05       	cpc	r26, r1
     a36:	b1 05       	cpc	r27, r1
     a38:	39 f4       	brne	.+14     	; 0xa48 <__pack_f+0x144>
     a3a:	e7 fe       	sbrs	r14, 7
     a3c:	0d c0       	rjmp	.+26     	; 0xa58 <__pack_f+0x154>
     a3e:	80 e4       	ldi	r24, 0x40	; 64
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <__pack_f+0x14c>
     a48:	8f e3       	ldi	r24, 0x3F	; 63
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	a0 e0       	ldi	r26, 0x00	; 0
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	e8 0e       	add	r14, r24
     a52:	f9 1e       	adc	r15, r25
     a54:	0a 1f       	adc	r16, r26
     a56:	1b 1f       	adc	r17, r27
     a58:	17 ff       	sbrs	r17, 7
     a5a:	05 c0       	rjmp	.+10     	; 0xa66 <__pack_f+0x162>
     a5c:	16 95       	lsr	r17
     a5e:	07 95       	ror	r16
     a60:	f7 94       	ror	r15
     a62:	e7 94       	ror	r14
     a64:	31 96       	adiw	r30, 0x01	; 1
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	16 95       	lsr	r17
     a6a:	07 95       	ror	r16
     a6c:	f7 94       	ror	r15
     a6e:	e7 94       	ror	r14
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__pack_f+0x164>
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <__pack_f+0x17c>
     a76:	ee 24       	eor	r14, r14
     a78:	ff 24       	eor	r15, r15
     a7a:	87 01       	movw	r16, r14
     a7c:	ef ef       	ldi	r30, 0xFF	; 255
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	6e 2f       	mov	r22, r30
     a82:	67 95       	ror	r22
     a84:	66 27       	eor	r22, r22
     a86:	67 95       	ror	r22
     a88:	90 2f       	mov	r25, r16
     a8a:	9f 77       	andi	r25, 0x7F	; 127
     a8c:	d7 94       	ror	r13
     a8e:	dd 24       	eor	r13, r13
     a90:	d7 94       	ror	r13
     a92:	8e 2f       	mov	r24, r30
     a94:	86 95       	lsr	r24
     a96:	49 2f       	mov	r20, r25
     a98:	46 2b       	or	r20, r22
     a9a:	58 2f       	mov	r21, r24
     a9c:	5d 29       	or	r21, r13
     a9e:	b7 01       	movw	r22, r14
     aa0:	ca 01       	movw	r24, r20
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	df 90       	pop	r13
     aac:	08 95       	ret

00000aae <__unpack_f>:
     aae:	fc 01       	movw	r30, r24
     ab0:	db 01       	movw	r26, r22
     ab2:	40 81       	ld	r20, Z
     ab4:	51 81       	ldd	r21, Z+1	; 0x01
     ab6:	22 81       	ldd	r18, Z+2	; 0x02
     ab8:	62 2f       	mov	r22, r18
     aba:	6f 77       	andi	r22, 0x7F	; 127
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	22 1f       	adc	r18, r18
     ac0:	22 27       	eor	r18, r18
     ac2:	22 1f       	adc	r18, r18
     ac4:	93 81       	ldd	r25, Z+3	; 0x03
     ac6:	89 2f       	mov	r24, r25
     ac8:	88 0f       	add	r24, r24
     aca:	82 2b       	or	r24, r18
     acc:	28 2f       	mov	r18, r24
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	99 1f       	adc	r25, r25
     ad2:	99 27       	eor	r25, r25
     ad4:	99 1f       	adc	r25, r25
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	9c 93       	st	X, r25
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	21 15       	cp	r18, r1
     ade:	31 05       	cpc	r19, r1
     ae0:	a9 f5       	brne	.+106    	; 0xb4c <__unpack_f+0x9e>
     ae2:	41 15       	cp	r20, r1
     ae4:	51 05       	cpc	r21, r1
     ae6:	61 05       	cpc	r22, r1
     ae8:	71 05       	cpc	r23, r1
     aea:	11 f4       	brne	.+4      	; 0xaf0 <__unpack_f+0x42>
     aec:	82 e0       	ldi	r24, 0x02	; 2
     aee:	37 c0       	rjmp	.+110    	; 0xb5e <__unpack_f+0xb0>
     af0:	82 e8       	ldi	r24, 0x82	; 130
     af2:	9f ef       	ldi	r25, 0xFF	; 255
     af4:	13 96       	adiw	r26, 0x03	; 3
     af6:	9c 93       	st	X, r25
     af8:	8e 93       	st	-X, r24
     afa:	12 97       	sbiw	r26, 0x02	; 2
     afc:	9a 01       	movw	r18, r20
     afe:	ab 01       	movw	r20, r22
     b00:	67 e0       	ldi	r22, 0x07	; 7
     b02:	22 0f       	add	r18, r18
     b04:	33 1f       	adc	r19, r19
     b06:	44 1f       	adc	r20, r20
     b08:	55 1f       	adc	r21, r21
     b0a:	6a 95       	dec	r22
     b0c:	d1 f7       	brne	.-12     	; 0xb02 <__unpack_f+0x54>
     b0e:	83 e0       	ldi	r24, 0x03	; 3
     b10:	8c 93       	st	X, r24
     b12:	0d c0       	rjmp	.+26     	; 0xb2e <__unpack_f+0x80>
     b14:	22 0f       	add	r18, r18
     b16:	33 1f       	adc	r19, r19
     b18:	44 1f       	adc	r20, r20
     b1a:	55 1f       	adc	r21, r21
     b1c:	12 96       	adiw	r26, 0x02	; 2
     b1e:	8d 91       	ld	r24, X+
     b20:	9c 91       	ld	r25, X
     b22:	13 97       	sbiw	r26, 0x03	; 3
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	13 96       	adiw	r26, 0x03	; 3
     b28:	9c 93       	st	X, r25
     b2a:	8e 93       	st	-X, r24
     b2c:	12 97       	sbiw	r26, 0x02	; 2
     b2e:	20 30       	cpi	r18, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	38 07       	cpc	r19, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	48 07       	cpc	r20, r24
     b38:	80 e4       	ldi	r24, 0x40	; 64
     b3a:	58 07       	cpc	r21, r24
     b3c:	58 f3       	brcs	.-42     	; 0xb14 <__unpack_f+0x66>
     b3e:	14 96       	adiw	r26, 0x04	; 4
     b40:	2d 93       	st	X+, r18
     b42:	3d 93       	st	X+, r19
     b44:	4d 93       	st	X+, r20
     b46:	5c 93       	st	X, r21
     b48:	17 97       	sbiw	r26, 0x07	; 7
     b4a:	08 95       	ret
     b4c:	2f 3f       	cpi	r18, 0xFF	; 255
     b4e:	31 05       	cpc	r19, r1
     b50:	79 f4       	brne	.+30     	; 0xb70 <__unpack_f+0xc2>
     b52:	41 15       	cp	r20, r1
     b54:	51 05       	cpc	r21, r1
     b56:	61 05       	cpc	r22, r1
     b58:	71 05       	cpc	r23, r1
     b5a:	19 f4       	brne	.+6      	; 0xb62 <__unpack_f+0xb4>
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	8c 93       	st	X, r24
     b60:	08 95       	ret
     b62:	64 ff       	sbrs	r22, 4
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <__unpack_f+0xbe>
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	8c 93       	st	X, r24
     b6a:	12 c0       	rjmp	.+36     	; 0xb90 <__unpack_f+0xe2>
     b6c:	1c 92       	st	X, r1
     b6e:	10 c0       	rjmp	.+32     	; 0xb90 <__unpack_f+0xe2>
     b70:	2f 57       	subi	r18, 0x7F	; 127
     b72:	30 40       	sbci	r19, 0x00	; 0
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	3c 93       	st	X, r19
     b78:	2e 93       	st	-X, r18
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	8c 93       	st	X, r24
     b80:	87 e0       	ldi	r24, 0x07	; 7
     b82:	44 0f       	add	r20, r20
     b84:	55 1f       	adc	r21, r21
     b86:	66 1f       	adc	r22, r22
     b88:	77 1f       	adc	r23, r23
     b8a:	8a 95       	dec	r24
     b8c:	d1 f7       	brne	.-12     	; 0xb82 <__unpack_f+0xd4>
     b8e:	70 64       	ori	r23, 0x40	; 64
     b90:	14 96       	adiw	r26, 0x04	; 4
     b92:	4d 93       	st	X+, r20
     b94:	5d 93       	st	X+, r21
     b96:	6d 93       	st	X+, r22
     b98:	7c 93       	st	X, r23
     b9a:	17 97       	sbiw	r26, 0x07	; 7
     b9c:	08 95       	ret

00000b9e <__fpcmp_parts_f>:
     b9e:	1f 93       	push	r17
     ba0:	dc 01       	movw	r26, r24
     ba2:	fb 01       	movw	r30, r22
     ba4:	9c 91       	ld	r25, X
     ba6:	92 30       	cpi	r25, 0x02	; 2
     ba8:	08 f4       	brcc	.+2      	; 0xbac <__fpcmp_parts_f+0xe>
     baa:	47 c0       	rjmp	.+142    	; 0xc3a <__fpcmp_parts_f+0x9c>
     bac:	80 81       	ld	r24, Z
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	08 f4       	brcc	.+2      	; 0xbb4 <__fpcmp_parts_f+0x16>
     bb2:	43 c0       	rjmp	.+134    	; 0xc3a <__fpcmp_parts_f+0x9c>
     bb4:	94 30       	cpi	r25, 0x04	; 4
     bb6:	51 f4       	brne	.+20     	; 0xbcc <__fpcmp_parts_f+0x2e>
     bb8:	11 96       	adiw	r26, 0x01	; 1
     bba:	1c 91       	ld	r17, X
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	99 f5       	brne	.+102    	; 0xc26 <__fpcmp_parts_f+0x88>
     bc0:	81 81       	ldd	r24, Z+1	; 0x01
     bc2:	68 2f       	mov	r22, r24
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	61 1b       	sub	r22, r17
     bc8:	71 09       	sbc	r23, r1
     bca:	3f c0       	rjmp	.+126    	; 0xc4a <__fpcmp_parts_f+0xac>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	21 f0       	breq	.+8      	; 0xbd8 <__fpcmp_parts_f+0x3a>
     bd0:	92 30       	cpi	r25, 0x02	; 2
     bd2:	31 f4       	brne	.+12     	; 0xbe0 <__fpcmp_parts_f+0x42>
     bd4:	82 30       	cpi	r24, 0x02	; 2
     bd6:	b9 f1       	breq	.+110    	; 0xc46 <__fpcmp_parts_f+0xa8>
     bd8:	81 81       	ldd	r24, Z+1	; 0x01
     bda:	88 23       	and	r24, r24
     bdc:	89 f1       	breq	.+98     	; 0xc40 <__fpcmp_parts_f+0xa2>
     bde:	2d c0       	rjmp	.+90     	; 0xc3a <__fpcmp_parts_f+0x9c>
     be0:	11 96       	adiw	r26, 0x01	; 1
     be2:	1c 91       	ld	r17, X
     be4:	11 97       	sbiw	r26, 0x01	; 1
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	f1 f0       	breq	.+60     	; 0xc26 <__fpcmp_parts_f+0x88>
     bea:	81 81       	ldd	r24, Z+1	; 0x01
     bec:	18 17       	cp	r17, r24
     bee:	d9 f4       	brne	.+54     	; 0xc26 <__fpcmp_parts_f+0x88>
     bf0:	12 96       	adiw	r26, 0x02	; 2
     bf2:	2d 91       	ld	r18, X+
     bf4:	3c 91       	ld	r19, X
     bf6:	13 97       	sbiw	r26, 0x03	; 3
     bf8:	82 81       	ldd	r24, Z+2	; 0x02
     bfa:	93 81       	ldd	r25, Z+3	; 0x03
     bfc:	82 17       	cp	r24, r18
     bfe:	93 07       	cpc	r25, r19
     c00:	94 f0       	brlt	.+36     	; 0xc26 <__fpcmp_parts_f+0x88>
     c02:	28 17       	cp	r18, r24
     c04:	39 07       	cpc	r19, r25
     c06:	bc f0       	brlt	.+46     	; 0xc36 <__fpcmp_parts_f+0x98>
     c08:	14 96       	adiw	r26, 0x04	; 4
     c0a:	8d 91       	ld	r24, X+
     c0c:	9d 91       	ld	r25, X+
     c0e:	0d 90       	ld	r0, X+
     c10:	bc 91       	ld	r27, X
     c12:	a0 2d       	mov	r26, r0
     c14:	24 81       	ldd	r18, Z+4	; 0x04
     c16:	35 81       	ldd	r19, Z+5	; 0x05
     c18:	46 81       	ldd	r20, Z+6	; 0x06
     c1a:	57 81       	ldd	r21, Z+7	; 0x07
     c1c:	28 17       	cp	r18, r24
     c1e:	39 07       	cpc	r19, r25
     c20:	4a 07       	cpc	r20, r26
     c22:	5b 07       	cpc	r21, r27
     c24:	18 f4       	brcc	.+6      	; 0xc2c <__fpcmp_parts_f+0x8e>
     c26:	11 23       	and	r17, r17
     c28:	41 f0       	breq	.+16     	; 0xc3a <__fpcmp_parts_f+0x9c>
     c2a:	0a c0       	rjmp	.+20     	; 0xc40 <__fpcmp_parts_f+0xa2>
     c2c:	82 17       	cp	r24, r18
     c2e:	93 07       	cpc	r25, r19
     c30:	a4 07       	cpc	r26, r20
     c32:	b5 07       	cpc	r27, r21
     c34:	40 f4       	brcc	.+16     	; 0xc46 <__fpcmp_parts_f+0xa8>
     c36:	11 23       	and	r17, r17
     c38:	19 f0       	breq	.+6      	; 0xc40 <__fpcmp_parts_f+0xa2>
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	05 c0       	rjmp	.+10     	; 0xc4a <__fpcmp_parts_f+0xac>
     c40:	6f ef       	ldi	r22, 0xFF	; 255
     c42:	7f ef       	ldi	r23, 0xFF	; 255
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <__fpcmp_parts_f+0xac>
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	cb 01       	movw	r24, r22
     c4c:	1f 91       	pop	r17
     c4e:	08 95       	ret

00000c50 <dtostre>:
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	ee e2       	ldi	r30, 0x2E	; 46
     c56:	f6 e0       	ldi	r31, 0x06	; 6
     c58:	0c 94 03 16 	jmp	0x2c06	; 0x2c06 <__prologue_saves__+0x16>
     c5c:	7a 01       	movw	r14, r20
     c5e:	d0 2e       	mov	r13, r16
     c60:	12 2f       	mov	r17, r18
     c62:	28 30       	cpi	r18, 0x08	; 8
     c64:	08 f0       	brcs	.+2      	; 0xc68 <dtostre+0x18>
     c66:	17 e0       	ldi	r17, 0x07	; 7
     c68:	a7 01       	movw	r20, r14
     c6a:	21 2f       	mov	r18, r17
     c6c:	00 e0       	ldi	r16, 0x00	; 0
     c6e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__ftoa_engine>
     c72:	68 2f       	mov	r22, r24
     c74:	f7 01       	movw	r30, r14
     c76:	51 91       	ld	r21, Z+
     c78:	25 2f       	mov	r18, r21
     c7a:	50 ff       	sbrs	r21, 0
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <dtostre+0x36>
     c7e:	53 fd       	sbrc	r21, 3
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <dtostre+0x36>
     c82:	8d e2       	ldi	r24, 0x2D	; 45
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <dtostre+0x48>
     c86:	d1 fe       	sbrs	r13, 1
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <dtostre+0x3e>
     c8a:	8b e2       	ldi	r24, 0x2B	; 43
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <dtostre+0x48>
     c8e:	d0 fc       	sbrc	r13, 0
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <dtostre+0x46>
     c92:	c7 01       	movw	r24, r14
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <dtostre+0x4e>
     c96:	80 e2       	ldi	r24, 0x20	; 32
     c98:	d7 01       	movw	r26, r14
     c9a:	8c 93       	st	X, r24
     c9c:	cf 01       	movw	r24, r30
     c9e:	48 2f       	mov	r20, r24
     ca0:	39 2f       	mov	r19, r25
     ca2:	23 ff       	sbrs	r18, 3
     ca4:	03 c0       	rjmp	.+6      	; 0xcac <dtostre+0x5c>
     ca6:	6c e5       	ldi	r22, 0x5C	; 92
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	04 c0       	rjmp	.+8      	; 0xcb4 <dtostre+0x64>
     cac:	22 ff       	sbrs	r18, 2
     cae:	0b c0       	rjmp	.+22     	; 0xcc6 <dtostre+0x76>
     cb0:	64 e5       	ldi	r22, 0x54	; 84
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	d2 fe       	sbrs	r13, 2
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <dtostre+0x6c>
     cb8:	6c 5f       	subi	r22, 0xFC	; 252
     cba:	7f 4f       	sbci	r23, 0xFF	; 255
     cbc:	84 2f       	mov	r24, r20
     cbe:	93 2f       	mov	r25, r19
     cc0:	0e 94 86 07 	call	0xf0c	; 0xf0c <strcpy_P>
     cc4:	45 c0       	rjmp	.+138    	; 0xd50 <dtostre+0x100>
     cc6:	f7 01       	movw	r30, r14
     cc8:	21 81       	ldd	r18, Z+1	; 0x01
     cca:	dc 01       	movw	r26, r24
     ccc:	2d 93       	st	X+, r18
     cce:	21 33       	cpi	r18, 0x31	; 49
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <dtostre+0x84>
     cd2:	5f 7e       	andi	r21, 0xEF	; 239
     cd4:	11 23       	and	r17, r17
     cd6:	a9 f0       	breq	.+42     	; 0xd02 <dtostre+0xb2>
     cd8:	e7 01       	movw	r28, r14
     cda:	84 2f       	mov	r24, r20
     cdc:	93 2f       	mov	r25, r19
     cde:	fc 01       	movw	r30, r24
     ce0:	91 2f       	mov	r25, r17
     ce2:	2e e2       	ldi	r18, 0x2E	; 46
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	21 83       	std	Z+1, r18	; 0x01
     ce8:	91 50       	subi	r25, 0x01	; 1
     cea:	21 96       	adiw	r28, 0x01	; 1
     cec:	31 96       	adiw	r30, 0x01	; 1
     cee:	28 2f       	mov	r18, r24
     cf0:	99 23       	and	r25, r25
     cf2:	c1 f7       	brne	.-16     	; 0xce4 <dtostre+0x94>
     cf4:	11 50       	subi	r17, 0x01	; 1
     cf6:	81 2f       	mov	r24, r17
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	a8 0f       	add	r26, r24
     cfe:	b9 1f       	adc	r27, r25
     d00:	2d 93       	st	X+, r18
     d02:	d2 fc       	sbrc	r13, 2
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <dtostre+0xba>
     d06:	85 e6       	ldi	r24, 0x65	; 101
     d08:	01 c0       	rjmp	.+2      	; 0xd0c <dtostre+0xbc>
     d0a:	85 e4       	ldi	r24, 0x45	; 69
     d0c:	96 2f       	mov	r25, r22
     d0e:	fd 01       	movw	r30, r26
     d10:	81 93       	st	Z+, r24
     d12:	67 ff       	sbrs	r22, 7
     d14:	07 c0       	rjmp	.+14     	; 0xd24 <dtostre+0xd4>
     d16:	8d e2       	ldi	r24, 0x2D	; 45
     d18:	11 96       	adiw	r26, 0x01	; 1
     d1a:	8c 93       	st	X, r24
     d1c:	df 01       	movw	r26, r30
     d1e:	11 96       	adiw	r26, 0x01	; 1
     d20:	91 95       	neg	r25
     d22:	0a c0       	rjmp	.+20     	; 0xd38 <dtostre+0xe8>
     d24:	66 23       	and	r22, r22
     d26:	29 f4       	brne	.+10     	; 0xd32 <dtostre+0xe2>
     d28:	54 ff       	sbrs	r21, 4
     d2a:	03 c0       	rjmp	.+6      	; 0xd32 <dtostre+0xe2>
     d2c:	df 01       	movw	r26, r30
     d2e:	8d e2       	ldi	r24, 0x2D	; 45
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <dtostre+0xe6>
     d32:	df 01       	movw	r26, r30
     d34:	8b e2       	ldi	r24, 0x2B	; 43
     d36:	8d 93       	st	X+, r24
     d38:	80 e3       	ldi	r24, 0x30	; 48
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <dtostre+0xf0>
     d3c:	8f 5f       	subi	r24, 0xFF	; 255
     d3e:	9a 50       	subi	r25, 0x0A	; 10
     d40:	9a 30       	cpi	r25, 0x0A	; 10
     d42:	e4 f7       	brge	.-8      	; 0xd3c <dtostre+0xec>
     d44:	fd 01       	movw	r30, r26
     d46:	81 93       	st	Z+, r24
     d48:	90 5d       	subi	r25, 0xD0	; 208
     d4a:	11 96       	adiw	r26, 0x01	; 1
     d4c:	9c 93       	st	X, r25
     d4e:	11 82       	std	Z+1, r1	; 0x01
     d50:	c7 01       	movw	r24, r14
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	e7 e0       	ldi	r30, 0x07	; 7
     d58:	0c 94 1f 16 	jmp	0x2c3e	; 0x2c3e <__epilogue_restores__+0x16>

00000d5c <__ftoa_engine>:
     d5c:	28 30       	cpi	r18, 0x08	; 8
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <__ftoa_engine+0x6>
     d60:	27 e0       	ldi	r18, 0x07	; 7
     d62:	33 27       	eor	r19, r19
     d64:	da 01       	movw	r26, r20
     d66:	99 0f       	add	r25, r25
     d68:	31 1d       	adc	r19, r1
     d6a:	87 fd       	sbrc	r24, 7
     d6c:	91 60       	ori	r25, 0x01	; 1
     d6e:	00 96       	adiw	r24, 0x00	; 0
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	39 f4       	brne	.+14     	; 0xd84 <__ftoa_engine+0x28>
     d76:	32 60       	ori	r19, 0x02	; 2
     d78:	2e 5f       	subi	r18, 0xFE	; 254
     d7a:	3d 93       	st	X+, r19
     d7c:	30 e3       	ldi	r19, 0x30	; 48
     d7e:	2a 95       	dec	r18
     d80:	e1 f7       	brne	.-8      	; 0xd7a <__ftoa_engine+0x1e>
     d82:	08 95       	ret
     d84:	9f 3f       	cpi	r25, 0xFF	; 255
     d86:	30 f0       	brcs	.+12     	; 0xd94 <__ftoa_engine+0x38>
     d88:	80 38       	cpi	r24, 0x80	; 128
     d8a:	71 05       	cpc	r23, r1
     d8c:	61 05       	cpc	r22, r1
     d8e:	09 f0       	breq	.+2      	; 0xd92 <__ftoa_engine+0x36>
     d90:	3c 5f       	subi	r19, 0xFC	; 252
     d92:	3c 5f       	subi	r19, 0xFC	; 252
     d94:	3d 93       	st	X+, r19
     d96:	91 30       	cpi	r25, 0x01	; 1
     d98:	08 f0       	brcs	.+2      	; 0xd9c <__ftoa_engine+0x40>
     d9a:	80 68       	ori	r24, 0x80	; 128
     d9c:	91 1d       	adc	r25, r1
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	1f 93       	push	r17
     da4:	0f 93       	push	r16
     da6:	ff 92       	push	r15
     da8:	ef 92       	push	r14
     daa:	19 2f       	mov	r17, r25
     dac:	98 7f       	andi	r25, 0xF8	; 248
     dae:	96 95       	lsr	r25
     db0:	e9 2f       	mov	r30, r25
     db2:	96 95       	lsr	r25
     db4:	96 95       	lsr	r25
     db6:	e9 0f       	add	r30, r25
     db8:	ff 27       	eor	r31, r31
     dba:	e2 54       	subi	r30, 0x42	; 66
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	99 27       	eor	r25, r25
     dc0:	33 27       	eor	r19, r19
     dc2:	ee 24       	eor	r14, r14
     dc4:	ff 24       	eor	r15, r15
     dc6:	a7 01       	movw	r20, r14
     dc8:	e7 01       	movw	r28, r14
     dca:	05 90       	lpm	r0, Z+
     dcc:	08 94       	sec
     dce:	07 94       	ror	r0
     dd0:	28 f4       	brcc	.+10     	; 0xddc <__ftoa_engine+0x80>
     dd2:	36 0f       	add	r19, r22
     dd4:	e7 1e       	adc	r14, r23
     dd6:	f8 1e       	adc	r15, r24
     dd8:	49 1f       	adc	r20, r25
     dda:	51 1d       	adc	r21, r1
     ddc:	66 0f       	add	r22, r22
     dde:	77 1f       	adc	r23, r23
     de0:	88 1f       	adc	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	06 94       	lsr	r0
     de6:	a1 f7       	brne	.-24     	; 0xdd0 <__ftoa_engine+0x74>
     de8:	05 90       	lpm	r0, Z+
     dea:	07 94       	ror	r0
     dec:	28 f4       	brcc	.+10     	; 0xdf8 <__ftoa_engine+0x9c>
     dee:	e7 0e       	add	r14, r23
     df0:	f8 1e       	adc	r15, r24
     df2:	49 1f       	adc	r20, r25
     df4:	56 1f       	adc	r21, r22
     df6:	c1 1d       	adc	r28, r1
     df8:	77 0f       	add	r23, r23
     dfa:	88 1f       	adc	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	66 1f       	adc	r22, r22
     e00:	06 94       	lsr	r0
     e02:	a1 f7       	brne	.-24     	; 0xdec <__ftoa_engine+0x90>
     e04:	05 90       	lpm	r0, Z+
     e06:	07 94       	ror	r0
     e08:	28 f4       	brcc	.+10     	; 0xe14 <__ftoa_engine+0xb8>
     e0a:	f8 0e       	add	r15, r24
     e0c:	49 1f       	adc	r20, r25
     e0e:	56 1f       	adc	r21, r22
     e10:	c7 1f       	adc	r28, r23
     e12:	d1 1d       	adc	r29, r1
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	66 1f       	adc	r22, r22
     e1a:	77 1f       	adc	r23, r23
     e1c:	06 94       	lsr	r0
     e1e:	a1 f7       	brne	.-24     	; 0xe08 <__ftoa_engine+0xac>
     e20:	05 90       	lpm	r0, Z+
     e22:	07 94       	ror	r0
     e24:	20 f4       	brcc	.+8      	; 0xe2e <__ftoa_engine+0xd2>
     e26:	49 0f       	add	r20, r25
     e28:	56 1f       	adc	r21, r22
     e2a:	c7 1f       	adc	r28, r23
     e2c:	d8 1f       	adc	r29, r24
     e2e:	99 0f       	add	r25, r25
     e30:	66 1f       	adc	r22, r22
     e32:	77 1f       	adc	r23, r23
     e34:	88 1f       	adc	r24, r24
     e36:	06 94       	lsr	r0
     e38:	a9 f7       	brne	.-22     	; 0xe24 <__ftoa_engine+0xc8>
     e3a:	84 91       	lpm	r24, Z+
     e3c:	10 95       	com	r17
     e3e:	17 70       	andi	r17, 0x07	; 7
     e40:	41 f0       	breq	.+16     	; 0xe52 <__ftoa_engine+0xf6>
     e42:	d6 95       	lsr	r29
     e44:	c7 95       	ror	r28
     e46:	57 95       	ror	r21
     e48:	47 95       	ror	r20
     e4a:	f7 94       	ror	r15
     e4c:	e7 94       	ror	r14
     e4e:	1a 95       	dec	r17
     e50:	c1 f7       	brne	.-16     	; 0xe42 <__ftoa_engine+0xe6>
     e52:	e4 e6       	ldi	r30, 0x64	; 100
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	68 94       	set
     e58:	15 90       	lpm	r1, Z+
     e5a:	15 91       	lpm	r17, Z+
     e5c:	35 91       	lpm	r19, Z+
     e5e:	65 91       	lpm	r22, Z+
     e60:	95 91       	lpm	r25, Z+
     e62:	05 90       	lpm	r0, Z+
     e64:	7f e2       	ldi	r23, 0x2F	; 47
     e66:	73 95       	inc	r23
     e68:	e1 18       	sub	r14, r1
     e6a:	f1 0a       	sbc	r15, r17
     e6c:	43 0b       	sbc	r20, r19
     e6e:	56 0b       	sbc	r21, r22
     e70:	c9 0b       	sbc	r28, r25
     e72:	d0 09       	sbc	r29, r0
     e74:	c0 f7       	brcc	.-16     	; 0xe66 <__ftoa_engine+0x10a>
     e76:	e1 0c       	add	r14, r1
     e78:	f1 1e       	adc	r15, r17
     e7a:	43 1f       	adc	r20, r19
     e7c:	56 1f       	adc	r21, r22
     e7e:	c9 1f       	adc	r28, r25
     e80:	d0 1d       	adc	r29, r0
     e82:	7e f4       	brtc	.+30     	; 0xea2 <__ftoa_engine+0x146>
     e84:	70 33       	cpi	r23, 0x30	; 48
     e86:	11 f4       	brne	.+4      	; 0xe8c <__ftoa_engine+0x130>
     e88:	8a 95       	dec	r24
     e8a:	e6 cf       	rjmp	.-52     	; 0xe58 <__ftoa_engine+0xfc>
     e8c:	e8 94       	clt
     e8e:	01 50       	subi	r16, 0x01	; 1
     e90:	30 f0       	brcs	.+12     	; 0xe9e <__ftoa_engine+0x142>
     e92:	08 0f       	add	r16, r24
     e94:	0a f4       	brpl	.+2      	; 0xe98 <__ftoa_engine+0x13c>
     e96:	00 27       	eor	r16, r16
     e98:	02 17       	cp	r16, r18
     e9a:	08 f4       	brcc	.+2      	; 0xe9e <__ftoa_engine+0x142>
     e9c:	20 2f       	mov	r18, r16
     e9e:	23 95       	inc	r18
     ea0:	02 2f       	mov	r16, r18
     ea2:	7a 33       	cpi	r23, 0x3A	; 58
     ea4:	28 f0       	brcs	.+10     	; 0xeb0 <__ftoa_engine+0x154>
     ea6:	79 e3       	ldi	r23, 0x39	; 57
     ea8:	7d 93       	st	X+, r23
     eaa:	2a 95       	dec	r18
     eac:	e9 f7       	brne	.-6      	; 0xea8 <__ftoa_engine+0x14c>
     eae:	10 c0       	rjmp	.+32     	; 0xed0 <__ftoa_engine+0x174>
     eb0:	7d 93       	st	X+, r23
     eb2:	2a 95       	dec	r18
     eb4:	89 f6       	brne	.-94     	; 0xe58 <__ftoa_engine+0xfc>
     eb6:	06 94       	lsr	r0
     eb8:	97 95       	ror	r25
     eba:	67 95       	ror	r22
     ebc:	37 95       	ror	r19
     ebe:	17 95       	ror	r17
     ec0:	17 94       	ror	r1
     ec2:	e1 18       	sub	r14, r1
     ec4:	f1 0a       	sbc	r15, r17
     ec6:	43 0b       	sbc	r20, r19
     ec8:	56 0b       	sbc	r21, r22
     eca:	c9 0b       	sbc	r28, r25
     ecc:	d0 09       	sbc	r29, r0
     ece:	98 f0       	brcs	.+38     	; 0xef6 <__ftoa_engine+0x19a>
     ed0:	23 95       	inc	r18
     ed2:	7e 91       	ld	r23, -X
     ed4:	73 95       	inc	r23
     ed6:	7a 33       	cpi	r23, 0x3A	; 58
     ed8:	08 f0       	brcs	.+2      	; 0xedc <__ftoa_engine+0x180>
     eda:	70 e3       	ldi	r23, 0x30	; 48
     edc:	7c 93       	st	X, r23
     ede:	20 13       	cpse	r18, r16
     ee0:	b8 f7       	brcc	.-18     	; 0xed0 <__ftoa_engine+0x174>
     ee2:	7e 91       	ld	r23, -X
     ee4:	70 61       	ori	r23, 0x10	; 16
     ee6:	7d 93       	st	X+, r23
     ee8:	30 f0       	brcs	.+12     	; 0xef6 <__ftoa_engine+0x19a>
     eea:	83 95       	inc	r24
     eec:	71 e3       	ldi	r23, 0x31	; 49
     eee:	7d 93       	st	X+, r23
     ef0:	70 e3       	ldi	r23, 0x30	; 48
     ef2:	2a 95       	dec	r18
     ef4:	e1 f7       	brne	.-8      	; 0xeee <__ftoa_engine+0x192>
     ef6:	11 24       	eor	r1, r1
     ef8:	ef 90       	pop	r14
     efa:	ff 90       	pop	r15
     efc:	0f 91       	pop	r16
     efe:	1f 91       	pop	r17
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	99 27       	eor	r25, r25
     f06:	87 fd       	sbrc	r24, 7
     f08:	90 95       	com	r25
     f0a:	08 95       	ret

00000f0c <strcpy_P>:
     f0c:	fb 01       	movw	r30, r22
     f0e:	dc 01       	movw	r26, r24
     f10:	05 90       	lpm	r0, Z+
     f12:	0d 92       	st	X+, r0
     f14:	00 20       	and	r0, r0
     f16:	e1 f7       	brne	.-8      	; 0xf10 <strcpy_P+0x4>
     f18:	08 95       	ret

00000f1a <itoa>:
     f1a:	fb 01       	movw	r30, r22
     f1c:	9f 01       	movw	r18, r30
     f1e:	e8 94       	clt
     f20:	42 30       	cpi	r20, 0x02	; 2
     f22:	c4 f0       	brlt	.+48     	; 0xf54 <itoa+0x3a>
     f24:	45 32       	cpi	r20, 0x25	; 37
     f26:	b4 f4       	brge	.+44     	; 0xf54 <itoa+0x3a>
     f28:	4a 30       	cpi	r20, 0x0A	; 10
     f2a:	29 f4       	brne	.+10     	; 0xf36 <itoa+0x1c>
     f2c:	97 fb       	bst	r25, 7
     f2e:	1e f4       	brtc	.+6      	; 0xf36 <itoa+0x1c>
     f30:	90 95       	com	r25
     f32:	81 95       	neg	r24
     f34:	9f 4f       	sbci	r25, 0xFF	; 255
     f36:	64 2f       	mov	r22, r20
     f38:	77 27       	eor	r23, r23
     f3a:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__udivmodhi4>
     f3e:	80 5d       	subi	r24, 0xD0	; 208
     f40:	8a 33       	cpi	r24, 0x3A	; 58
     f42:	0c f0       	brlt	.+2      	; 0xf46 <itoa+0x2c>
     f44:	89 5d       	subi	r24, 0xD9	; 217
     f46:	81 93       	st	Z+, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	a1 f7       	brne	.-24     	; 0xf36 <itoa+0x1c>
     f4e:	16 f4       	brtc	.+4      	; 0xf54 <itoa+0x3a>
     f50:	5d e2       	ldi	r21, 0x2D	; 45
     f52:	51 93       	st	Z+, r21
     f54:	10 82       	st	Z, r1
     f56:	c9 01       	movw	r24, r18
     f58:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <strrev>

00000f5c <strrev>:
     f5c:	dc 01       	movw	r26, r24
     f5e:	fc 01       	movw	r30, r24
     f60:	67 2f       	mov	r22, r23
     f62:	71 91       	ld	r23, Z+
     f64:	77 23       	and	r23, r23
     f66:	e1 f7       	brne	.-8      	; 0xf60 <strrev+0x4>
     f68:	32 97       	sbiw	r30, 0x02	; 2
     f6a:	04 c0       	rjmp	.+8      	; 0xf74 <strrev+0x18>
     f6c:	7c 91       	ld	r23, X
     f6e:	6d 93       	st	X+, r22
     f70:	70 83       	st	Z, r23
     f72:	62 91       	ld	r22, -Z
     f74:	ae 17       	cp	r26, r30
     f76:	bf 07       	cpc	r27, r31
     f78:	c8 f3       	brcs	.-14     	; 0xf6c <strrev+0x10>
     f7a:	08 95       	ret

00000f7c <MTIMER0_voidInit>:

#include "../Timer/MTimer_config.h"
#include "../Timer/MTIMER_interface.h"
#include "../Timer/MTIMER_register.h"

void MTIMER0_voidInit(void){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE == TIMER0_NORMAL

	/*selecting  wave generation mode as normal mode */
	CLR_BIT(TCCR0,TCCR0_WGM00);
     f84:	a3 e5       	ldi	r26, 0x53	; 83
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e3 e5       	ldi	r30, 0x53	; 83
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	8f 7b       	andi	r24, 0xBF	; 191
     f90:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGM01);
     f92:	a3 e5       	ldi	r26, 0x53	; 83
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e3 e5       	ldi	r30, 0x53	; 83
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	87 7f       	andi	r24, 0xF7	; 247
     f9e:	8c 93       	st	X, r24
	/* enable timer 0 interrupt SIE */
	SET_BIT(TIMSK,TIMSK_TOIE0);
     fa0:	a9 e5       	ldi	r26, 0x59	; 89
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e9 e5       	ldi	r30, 0x59	; 89
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	81 60       	ori	r24, 0x01	; 1
     fac:	8c 93       	st	X, r24
	/* setting preload value */
	TCNT0 = PRELOAD_VALUE;
     fae:	e2 e5       	ldi	r30, 0x52	; 82
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	10 82       	st	Z, r1
	CLR_BIT(TCCR0,TCCR0_COM00);
	SET_BIT(TCCR0,TCCR0_COM01);
#endif

	/* selecting timer 0 prescaler as dev by 8*/
	CLR_BIT(TCCR0,TCCR0_CS00);
     fb4:	a3 e5       	ldi	r26, 0x53	; 83
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e3 e5       	ldi	r30, 0x53	; 83
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	8e 7f       	andi	r24, 0xFE	; 254
     fc0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
     fc2:	a3 e5       	ldi	r26, 0x53	; 83
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e3 e5       	ldi	r30, 0x53	; 83
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	82 60       	ori	r24, 0x02	; 2
     fce:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
     fd0:	a3 e5       	ldi	r26, 0x53	; 83
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e3 e5       	ldi	r30, 0x53	; 83
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8b 7f       	andi	r24, 0xFB	; 251
     fdc:	8c 93       	st	X, r24





}
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <MTIMER0_voidDisable>:
void MTIMER0_voidDisable(void){
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
	/*No clock source */
	CLR_BIT(TCCR0,TCCR0_CS00);
     fec:	a3 e5       	ldi	r26, 0x53	; 83
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e3 e5       	ldi	r30, 0x53	; 83
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	8e 7f       	andi	r24, 0xFE	; 254
     ff8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
     ffa:	a3 e5       	ldi	r26, 0x53	; 83
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e3 e5       	ldi	r30, 0x53	; 83
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8d 7f       	andi	r24, 0xFD	; 253
    1006:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    1008:	a3 e5       	ldi	r26, 0x53	; 83
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e3 e5       	ldi	r30, 0x53	; 83
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	8b 7f       	andi	r24, 0xFB	; 251
    1014:	8c 93       	st	X, r24


}
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <MTIMER0_voidSetPreload>:
void MTIMER0_voidSetPreload(u8 Copy_u8Preload){
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	0f 92       	push	r0
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
    1028:	e2 e5       	ldi	r30, 0x52	; 82
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	80 83       	st	Z, r24

}
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <MTIMER0_voidSetDutyCycle>:
void MTIMER0_voidSetDutyCycle(u8 Copy_u8DutyCycle){
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	0f 92       	push	r0
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8DutyCycle;
    1044:	ec e5       	ldi	r30, 0x5C	; 92
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	80 83       	st	Z, r24
}
    104c:	0f 90       	pop	r0
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <MTIMER1_voidInit>:

/*Timer1*/
void MTIMER1_voidInit(Timer1Modes_t Copy_Timer1Mode, TOP_t Copy_Timer1TopMode, Prescaler_t Copy_enuPrescalerValue)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	29 97       	sbiw	r28, 0x09	; 9
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	6a 83       	std	Y+2, r22	; 0x02
    106c:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_Timer1Mode)
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	39 87       	std	Y+9, r19	; 0x09
    1076:	28 87       	std	Y+8, r18	; 0x08
    1078:	88 85       	ldd	r24, Y+8	; 0x08
    107a:	99 85       	ldd	r25, Y+9	; 0x09
    107c:	82 30       	cpi	r24, 0x02	; 2
    107e:	91 05       	cpc	r25, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <MTIMER1_voidInit+0x30>
    1082:	5c c0       	rjmp	.+184    	; 0x113c <MTIMER1_voidInit+0xe8>
    1084:	28 85       	ldd	r18, Y+8	; 0x08
    1086:	39 85       	ldd	r19, Y+9	; 0x09
    1088:	23 30       	cpi	r18, 0x03	; 3
    108a:	31 05       	cpc	r19, r1
    108c:	54 f4       	brge	.+20     	; 0x10a2 <MTIMER1_voidInit+0x4e>
    108e:	88 85       	ldd	r24, Y+8	; 0x08
    1090:	99 85       	ldd	r25, Y+9	; 0x09
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	c9 f0       	breq	.+50     	; 0x10c8 <MTIMER1_voidInit+0x74>
    1096:	28 85       	ldd	r18, Y+8	; 0x08
    1098:	39 85       	ldd	r19, Y+9	; 0x09
    109a:	21 30       	cpi	r18, 0x01	; 1
    109c:	31 05       	cpc	r19, r1
    109e:	89 f1       	breq	.+98     	; 0x1102 <MTIMER1_voidInit+0xae>
    10a0:	c0 c0       	rjmp	.+384    	; 0x1222 <MTIMER1_voidInit+0x1ce>
    10a2:	88 85       	ldd	r24, Y+8	; 0x08
    10a4:	99 85       	ldd	r25, Y+9	; 0x09
    10a6:	84 30       	cpi	r24, 0x04	; 4
    10a8:	91 05       	cpc	r25, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <MTIMER1_voidInit+0x5a>
    10ac:	81 c0       	rjmp	.+258    	; 0x11b0 <MTIMER1_voidInit+0x15c>
    10ae:	28 85       	ldd	r18, Y+8	; 0x08
    10b0:	39 85       	ldd	r19, Y+9	; 0x09
    10b2:	24 30       	cpi	r18, 0x04	; 4
    10b4:	31 05       	cpc	r19, r1
    10b6:	0c f4       	brge	.+2      	; 0x10ba <MTIMER1_voidInit+0x66>
    10b8:	5e c0       	rjmp	.+188    	; 0x1176 <MTIMER1_voidInit+0x122>
    10ba:	88 85       	ldd	r24, Y+8	; 0x08
    10bc:	99 85       	ldd	r25, Y+9	; 0x09
    10be:	85 30       	cpi	r24, 0x05	; 5
    10c0:	91 05       	cpc	r25, r1
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <MTIMER1_voidInit+0x72>
    10c4:	92 c0       	rjmp	.+292    	; 0x11ea <MTIMER1_voidInit+0x196>
    10c6:	ad c0       	rjmp	.+346    	; 0x1222 <MTIMER1_voidInit+0x1ce>
	{
	case NORMAL_MODE:				CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    10c8:	af e4       	ldi	r26, 0x4F	; 79
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	ef e4       	ldi	r30, 0x4F	; 79
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	8f 7b       	andi	r24, 0xBF	; 191
    10d4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    10d6:	af e4       	ldi	r26, 0x4F	; 79
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	ef e4       	ldi	r30, 0x4F	; 79
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	8f 7e       	andi	r24, 0xEF	; 239
    10e2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, TCCR1A_COM1A1);
    10e4:	af e4       	ldi	r26, 0x4F	; 79
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	ef e4       	ldi	r30, 0x4F	; 79
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	8f 77       	andi	r24, 0x7F	; 127
    10f0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, TCCR1A_COM1B1);
    10f2:	af e4       	ldi	r26, 0x4F	; 79
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	ef e4       	ldi	r30, 0x4F	; 79
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8f 7d       	andi	r24, 0xDF	; 223
    10fe:	8c 93       	st	X, r24
    1100:	90 c0       	rjmp	.+288    	; 0x1222 <MTIMER1_voidInit+0x1ce>
	break;
	case CTC_TOGGLE:				SET_BIT(TCCR1A, TCCR1A_COM1A0);
    1102:	af e4       	ldi	r26, 0x4F	; 79
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	ef e4       	ldi	r30, 0x4F	; 79
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	80 64       	ori	r24, 0x40	; 64
    110e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, TCCR1A_COM1B0);
    1110:	af e4       	ldi	r26, 0x4F	; 79
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	ef e4       	ldi	r30, 0x4F	; 79
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	80 61       	ori	r24, 0x10	; 16
    111c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, TCCR1A_COM1A1);
    111e:	af e4       	ldi	r26, 0x4F	; 79
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	ef e4       	ldi	r30, 0x4F	; 79
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	8f 77       	andi	r24, 0x7F	; 127
    112a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, TCCR1A_COM1B1);
    112c:	af e4       	ldi	r26, 0x4F	; 79
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	ef e4       	ldi	r30, 0x4F	; 79
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	8f 7d       	andi	r24, 0xDF	; 223
    1138:	8c 93       	st	X, r24
    113a:	73 c0       	rjmp	.+230    	; 0x1222 <MTIMER1_voidInit+0x1ce>
	break;
	case CTC_SET:					SET_BIT(TCCR1A, TCCR1A_COM1A0);
    113c:	af e4       	ldi	r26, 0x4F	; 79
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	ef e4       	ldi	r30, 0x4F	; 79
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	80 64       	ori	r24, 0x40	; 64
    1148:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, TCCR1A_COM1B0);
    114a:	af e4       	ldi	r26, 0x4F	; 79
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	ef e4       	ldi	r30, 0x4F	; 79
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	80 61       	ori	r24, 0x10	; 16
    1156:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, TCCR1A_COM1A1);
    1158:	af e4       	ldi	r26, 0x4F	; 79
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	ef e4       	ldi	r30, 0x4F	; 79
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	80 68       	ori	r24, 0x80	; 128
    1164:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, TCCR1A_COM1B1);
    1166:	af e4       	ldi	r26, 0x4F	; 79
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	ef e4       	ldi	r30, 0x4F	; 79
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	80 62       	ori	r24, 0x20	; 32
    1172:	8c 93       	st	X, r24
    1174:	56 c0       	rjmp	.+172    	; 0x1222 <MTIMER1_voidInit+0x1ce>
	break;
	case CTC_CLEAR:					CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    1176:	af e4       	ldi	r26, 0x4F	; 79
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	ef e4       	ldi	r30, 0x4F	; 79
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	8f 7b       	andi	r24, 0xBF	; 191
    1182:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    1184:	af e4       	ldi	r26, 0x4F	; 79
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	ef e4       	ldi	r30, 0x4F	; 79
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	8f 7e       	andi	r24, 0xEF	; 239
    1190:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, TCCR1A_COM1A1);
    1192:	af e4       	ldi	r26, 0x4F	; 79
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	ef e4       	ldi	r30, 0x4F	; 79
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	80 68       	ori	r24, 0x80	; 128
    119e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, TCCR1A_COM1B1);
    11a0:	af e4       	ldi	r26, 0x4F	; 79
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	ef e4       	ldi	r30, 0x4F	; 79
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	80 62       	ori	r24, 0x20	; 32
    11ac:	8c 93       	st	X, r24
    11ae:	39 c0       	rjmp	.+114    	; 0x1222 <MTIMER1_voidInit+0x1ce>
	break;
	case FAST_PWM_NON_INVERTING:
		CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    11b0:	af e4       	ldi	r26, 0x4F	; 79
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	ef e4       	ldi	r30, 0x4F	; 79
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	8f 7b       	andi	r24, 0xBF	; 191
    11bc:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    11be:	af e4       	ldi	r26, 0x4F	; 79
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ef e4       	ldi	r30, 0x4F	; 79
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	8f 7e       	andi	r24, 0xEF	; 239
    11ca:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1A1);
    11cc:	af e4       	ldi	r26, 0x4F	; 79
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ef e4       	ldi	r30, 0x4F	; 79
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	80 68       	ori	r24, 0x80	; 128
    11d8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B1);
    11da:	af e4       	ldi	r26, 0x4F	; 79
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ef e4       	ldi	r30, 0x4F	; 79
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	80 62       	ori	r24, 0x20	; 32
    11e6:	8c 93       	st	X, r24
    11e8:	1c c0       	rjmp	.+56     	; 0x1222 <MTIMER1_voidInit+0x1ce>
		break;
	case FAST_PWM_INVERTING:		SET_BIT(TCCR1A, TCCR1A_COM1A0);
    11ea:	af e4       	ldi	r26, 0x4F	; 79
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	ef e4       	ldi	r30, 0x4F	; 79
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	80 64       	ori	r24, 0x40	; 64
    11f6:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, TCCR1A_COM1B0);
    11f8:	af e4       	ldi	r26, 0x4F	; 79
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	ef e4       	ldi	r30, 0x4F	; 79
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	80 61       	ori	r24, 0x10	; 16
    1204:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, TCCR1A_COM1A1);
    1206:	af e4       	ldi	r26, 0x4F	; 79
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	ef e4       	ldi	r30, 0x4F	; 79
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	80 68       	ori	r24, 0x80	; 128
    1212:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, TCCR1A_COM1B1);
    1214:	af e4       	ldi	r26, 0x4F	; 79
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	ef e4       	ldi	r30, 0x4F	; 79
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	80 62       	ori	r24, 0x20	; 32
    1220:	8c 93       	st	X, r24
	break;
	default:						break;
	}
	switch(Copy_Timer1TopMode)
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	3f 83       	std	Y+7, r19	; 0x07
    122a:	2e 83       	std	Y+6, r18	; 0x06
    122c:	8e 81       	ldd	r24, Y+6	; 0x06
    122e:	9f 81       	ldd	r25, Y+7	; 0x07
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	91 05       	cpc	r25, r1
    1234:	b9 f0       	breq	.+46     	; 0x1264 <MTIMER1_voidInit+0x210>
    1236:	2e 81       	ldd	r18, Y+6	; 0x06
    1238:	3f 81       	ldd	r19, Y+7	; 0x07
    123a:	22 30       	cpi	r18, 0x02	; 2
    123c:	31 05       	cpc	r19, r1
    123e:	2c f4       	brge	.+10     	; 0x124a <MTIMER1_voidInit+0x1f6>
    1240:	8e 81       	ldd	r24, Y+6	; 0x06
    1242:	9f 81       	ldd	r25, Y+7	; 0x07
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	59 f1       	breq	.+86     	; 0x129e <MTIMER1_voidInit+0x24a>
    1248:	80 c0       	rjmp	.+256    	; 0x134a <MTIMER1_voidInit+0x2f6>
    124a:	2e 81       	ldd	r18, Y+6	; 0x06
    124c:	3f 81       	ldd	r19, Y+7	; 0x07
    124e:	22 30       	cpi	r18, 0x02	; 2
    1250:	31 05       	cpc	r19, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <MTIMER1_voidInit+0x202>
    1254:	41 c0       	rjmp	.+130    	; 0x12d8 <MTIMER1_voidInit+0x284>
    1256:	8e 81       	ldd	r24, Y+6	; 0x06
    1258:	9f 81       	ldd	r25, Y+7	; 0x07
    125a:	83 30       	cpi	r24, 0x03	; 3
    125c:	91 05       	cpc	r25, r1
    125e:	09 f4       	brne	.+2      	; 0x1262 <MTIMER1_voidInit+0x20e>
    1260:	58 c0       	rjmp	.+176    	; 0x1312 <MTIMER1_voidInit+0x2be>
    1262:	73 c0       	rjmp	.+230    	; 0x134a <MTIMER1_voidInit+0x2f6>
	{
	case TOP_CTC_ICR1:
		CLR_BIT(TCCR1A, TCCR1A_WGM10);
    1264:	af e4       	ldi	r26, 0x4F	; 79
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	ef e4       	ldi	r30, 0x4F	; 79
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8e 7f       	andi	r24, 0xFE	; 254
    1270:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_WGM11);
    1272:	af e4       	ldi	r26, 0x4F	; 79
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	ef e4       	ldi	r30, 0x4F	; 79
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	8d 7f       	andi	r24, 0xFD	; 253
    127e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, TCCR1B_WGM12);
    1280:	ae e4       	ldi	r26, 0x4E	; 78
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	ee e4       	ldi	r30, 0x4E	; 78
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	88 60       	ori	r24, 0x08	; 8
    128c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, TCCR1B_WGM13);
    128e:	ae e4       	ldi	r26, 0x4E	; 78
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	ee e4       	ldi	r30, 0x4E	; 78
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	80 61       	ori	r24, 0x10	; 16
    129a:	8c 93       	st	X, r24
    129c:	56 c0       	rjmp	.+172    	; 0x134a <MTIMER1_voidInit+0x2f6>
		break;
	case TOP_CTC_OCR1A:
		CLR_BIT(TCCR1A, TCCR1A_WGM10);
    129e:	af e4       	ldi	r26, 0x4F	; 79
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	ef e4       	ldi	r30, 0x4F	; 79
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	8e 7f       	andi	r24, 0xFE	; 254
    12aa:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_WGM11);
    12ac:	af e4       	ldi	r26, 0x4F	; 79
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	ef e4       	ldi	r30, 0x4F	; 79
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	8d 7f       	andi	r24, 0xFD	; 253
    12b8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, TCCR1B_WGM12);
    12ba:	ae e4       	ldi	r26, 0x4E	; 78
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	ee e4       	ldi	r30, 0x4E	; 78
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	88 60       	ori	r24, 0x08	; 8
    12c6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, TCCR1B_WGM13);
    12c8:	ae e4       	ldi	r26, 0x4E	; 78
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	ee e4       	ldi	r30, 0x4E	; 78
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	8f 7e       	andi	r24, 0xEF	; 239
    12d4:	8c 93       	st	X, r24
    12d6:	39 c0       	rjmp	.+114    	; 0x134a <MTIMER1_voidInit+0x2f6>
		break;
	case TOP_FPWM_ICR1:
		CLR_BIT(TCCR1A, TCCR1A_WGM10);
    12d8:	af e4       	ldi	r26, 0x4F	; 79
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	ef e4       	ldi	r30, 0x4F	; 79
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	8e 7f       	andi	r24, 0xFE	; 254
    12e4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_WGM11);
    12e6:	af e4       	ldi	r26, 0x4F	; 79
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	ef e4       	ldi	r30, 0x4F	; 79
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	82 60       	ori	r24, 0x02	; 2
    12f2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, TCCR1B_WGM12);
    12f4:	ae e4       	ldi	r26, 0x4E	; 78
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	ee e4       	ldi	r30, 0x4E	; 78
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	88 60       	ori	r24, 0x08	; 8
    1300:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, TCCR1B_WGM13);
    1302:	ae e4       	ldi	r26, 0x4E	; 78
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	ee e4       	ldi	r30, 0x4E	; 78
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	80 61       	ori	r24, 0x10	; 16
    130e:	8c 93       	st	X, r24
    1310:	1c c0       	rjmp	.+56     	; 0x134a <MTIMER1_voidInit+0x2f6>
		break;
	case TOP_FPWM_OCR1A:
		SET_BIT(TCCR1A, TCCR1A_WGM10);
    1312:	af e4       	ldi	r26, 0x4F	; 79
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	ef e4       	ldi	r30, 0x4F	; 79
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	81 60       	ori	r24, 0x01	; 1
    131e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_WGM11);
    1320:	af e4       	ldi	r26, 0x4F	; 79
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	ef e4       	ldi	r30, 0x4F	; 79
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	82 60       	ori	r24, 0x02	; 2
    132c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, TCCR1B_WGM12);
    132e:	ae e4       	ldi	r26, 0x4E	; 78
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	ee e4       	ldi	r30, 0x4E	; 78
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	88 60       	ori	r24, 0x08	; 8
    133a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, TCCR1B_WGM13);
    133c:	ae e4       	ldi	r26, 0x4E	; 78
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	ee e4       	ldi	r30, 0x4E	; 78
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	80 61       	ori	r24, 0x10	; 16
    1348:	8c 93       	st	X, r24
		break;
	default:						break;
	}

	switch(Copy_enuPrescalerValue)
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3d 83       	std	Y+5, r19	; 0x05
    1352:	2c 83       	std	Y+4, r18	; 0x04
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	9d 81       	ldd	r25, Y+5	; 0x05
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	91 05       	cpc	r25, r1
    135c:	01 f1       	breq	.+64     	; 0x139e <MTIMER1_voidInit+0x34a>
    135e:	2c 81       	ldd	r18, Y+4	; 0x04
    1360:	3d 81       	ldd	r19, Y+5	; 0x05
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	89 f1       	breq	.+98     	; 0x13ca <MTIMER1_voidInit+0x376>
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	9d 81       	ldd	r25, Y+5	; 0x05
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	09 f0       	breq	.+2      	; 0x1372 <MTIMER1_voidInit+0x31e>
    1370:	41 c0       	rjmp	.+130    	; 0x13f4 <MTIMER1_voidInit+0x3a0>
	{
	case DIV_8:
		CLR_BIT(TCCR1B, TCCR1B_CS10);
    1372:	ae e4       	ldi	r26, 0x4E	; 78
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	ee e4       	ldi	r30, 0x4E	; 78
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	8e 7f       	andi	r24, 0xFE	; 254
    137e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, TCCR1B_CS11);
    1380:	ae e4       	ldi	r26, 0x4E	; 78
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	ee e4       	ldi	r30, 0x4E	; 78
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	82 60       	ori	r24, 0x02	; 2
    138c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, TCCR1B_CS12);
    138e:	ae e4       	ldi	r26, 0x4E	; 78
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	ee e4       	ldi	r30, 0x4E	; 78
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	8b 7f       	andi	r24, 0xFB	; 251
    139a:	8c 93       	st	X, r24
    139c:	2b c0       	rjmp	.+86     	; 0x13f4 <MTIMER1_voidInit+0x3a0>
		break;
	case DIV_64:
		SET_BIT(TCCR1B, TCCR1B_CS10);
    139e:	ae e4       	ldi	r26, 0x4E	; 78
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	ee e4       	ldi	r30, 0x4E	; 78
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	81 60       	ori	r24, 0x01	; 1
    13aa:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, TCCR1B_CS11);
    13ac:	ae e4       	ldi	r26, 0x4E	; 78
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	ee e4       	ldi	r30, 0x4E	; 78
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	82 60       	ori	r24, 0x02	; 2
    13b8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, TCCR1B_CS12);
    13ba:	ae e4       	ldi	r26, 0x4E	; 78
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	ee e4       	ldi	r30, 0x4E	; 78
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8b 7f       	andi	r24, 0xFB	; 251
    13c6:	8c 93       	st	X, r24
    13c8:	15 c0       	rjmp	.+42     	; 0x13f4 <MTIMER1_voidInit+0x3a0>
		break;
	case DIV_256:					CLR_BIT(TCCR1B, TCCR1B_CS10);
    13ca:	ae e4       	ldi	r26, 0x4E	; 78
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	ee e4       	ldi	r30, 0x4E	; 78
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8e 7f       	andi	r24, 0xFE	; 254
    13d6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, TCCR1B_CS11);
    13d8:	ae e4       	ldi	r26, 0x4E	; 78
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	ee e4       	ldi	r30, 0x4E	; 78
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	8d 7f       	andi	r24, 0xFD	; 253
    13e4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_CS12);
    13e6:	ae e4       	ldi	r26, 0x4E	; 78
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	ee e4       	ldi	r30, 0x4E	; 78
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	84 60       	ori	r24, 0x04	; 4
    13f2:	8c 93       	st	X, r24
	break;
	default:						break;
	}
}
    13f4:	29 96       	adiw	r28, 0x09	; 9
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <MTIMER1_voidSetTopValue>:

void MTIMER1_voidSetTopValue(u16 Copy_u16TopValue, TOP_t Copy_Timer1TopMode)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	00 d0       	rcall	.+0      	; 0x140c <MTIMER1_voidSetTopValue+0x6>
    140c:	00 d0       	rcall	.+0      	; 0x140e <MTIMER1_voidSetTopValue+0x8>
    140e:	0f 92       	push	r0
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	9a 83       	std	Y+2, r25	; 0x02
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	6b 83       	std	Y+3, r22	; 0x03
	switch(Copy_Timer1TopMode)
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	3d 83       	std	Y+5, r19	; 0x05
    1422:	2c 83       	std	Y+4, r18	; 0x04
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	9d 81       	ldd	r25, Y+5	; 0x05
    1428:	82 30       	cpi	r24, 0x02	; 2
    142a:	91 05       	cpc	r25, r1
    142c:	31 f0       	breq	.+12     	; 0x143a <MTIMER1_voidSetTopValue+0x34>
    142e:	2c 81       	ldd	r18, Y+4	; 0x04
    1430:	3d 81       	ldd	r19, Y+5	; 0x05
    1432:	23 30       	cpi	r18, 0x03	; 3
    1434:	31 05       	cpc	r19, r1
    1436:	41 f0       	breq	.+16     	; 0x1448 <MTIMER1_voidSetTopValue+0x42>
    1438:	0d c0       	rjmp	.+26     	; 0x1454 <MTIMER1_voidSetTopValue+0x4e>
	{
	case TOP_FPWM_ICR1:		ICR1 = Copy_u16TopValue;
    143a:	e6 e4       	ldi	r30, 0x46	; 70
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	9a 81       	ldd	r25, Y+2	; 0x02
    1442:	91 83       	std	Z+1, r25	; 0x01
    1444:	80 83       	st	Z, r24
    1446:	06 c0       	rjmp	.+12     	; 0x1454 <MTIMER1_voidSetTopValue+0x4e>
	break;
	case TOP_FPWM_OCR1A:	OCR1A = Copy_u16TopValue;   break;
    1448:	ea e4       	ldi	r30, 0x4A	; 74
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	91 83       	std	Z+1, r25	; 0x01
    1452:	80 83       	st	Z, r24
	default:											break;
	}
}
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <MTIMER1_voidSetDutyCycle>:

void MTIMER1_voidSetDutyCycle(u16 Copy_u16DutyCycleValue)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	00 d0       	rcall	.+0      	; 0x146a <MTIMER1_voidSetDutyCycle+0x6>
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	9a 83       	std	Y+2, r25	; 0x02
    1470:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16DutyCycleValue;
    1472:	ea e4       	ldi	r30, 0x4A	; 74
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	9a 81       	ldd	r25, Y+2	; 0x02
    147a:	91 83       	std	Z+1, r25	; 0x01
    147c:	80 83       	st	Z, r24
}
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <MDIO_SetPinValue>:
		}
	}
}*/

Error_State_t MDIO_SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	28 97       	sbiw	r28, 0x08	; 8
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
    149c:	8a 83       	std	Y+2, r24	; 0x02
    149e:	6b 83       	std	Y+3, r22	; 0x03
    14a0:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Error_state = Return_Ok;
    14a2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin > 7)
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	88 30       	cpi	r24, 0x08	; 8
    14a8:	18 f0       	brcs	.+6      	; 0x14b0 <MDIO_SetPinValue+0x28>
	{
		Error_state = Return_NOk;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	f2 c0       	rjmp	.+484    	; 0x1694 <MDIO_SetPinValue+0x20c>
	}
	else
	{
		if(Copy_u8Value == DIO_LOW)
    14b0:	8c 81       	ldd	r24, Y+4	; 0x04
    14b2:	88 23       	and	r24, r24
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <MDIO_SetPinValue+0x30>
    14b6:	78 c0       	rjmp	.+240    	; 0x15a8 <MDIO_SetPinValue+0x120>
		{
			switch(Copy_u8Port)
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	38 87       	std	Y+8, r19	; 0x08
    14c0:	2f 83       	std	Y+7, r18	; 0x07
    14c2:	8f 81       	ldd	r24, Y+7	; 0x07
    14c4:	98 85       	ldd	r25, Y+8	; 0x08
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	91 05       	cpc	r25, r1
    14ca:	61 f1       	breq	.+88     	; 0x1524 <MDIO_SetPinValue+0x9c>
    14cc:	2f 81       	ldd	r18, Y+7	; 0x07
    14ce:	38 85       	ldd	r19, Y+8	; 0x08
    14d0:	23 30       	cpi	r18, 0x03	; 3
    14d2:	31 05       	cpc	r19, r1
    14d4:	34 f4       	brge	.+12     	; 0x14e2 <MDIO_SetPinValue+0x5a>
    14d6:	8f 81       	ldd	r24, Y+7	; 0x07
    14d8:	98 85       	ldd	r25, Y+8	; 0x08
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	69 f0       	breq	.+26     	; 0x14fa <MDIO_SetPinValue+0x72>
    14e0:	60 c0       	rjmp	.+192    	; 0x15a2 <MDIO_SetPinValue+0x11a>
    14e2:	2f 81       	ldd	r18, Y+7	; 0x07
    14e4:	38 85       	ldd	r19, Y+8	; 0x08
    14e6:	23 30       	cpi	r18, 0x03	; 3
    14e8:	31 05       	cpc	r19, r1
    14ea:	89 f1       	breq	.+98     	; 0x154e <MDIO_SetPinValue+0xc6>
    14ec:	8f 81       	ldd	r24, Y+7	; 0x07
    14ee:	98 85       	ldd	r25, Y+8	; 0x08
    14f0:	84 30       	cpi	r24, 0x04	; 4
    14f2:	91 05       	cpc	r25, r1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <MDIO_SetPinValue+0x70>
    14f6:	40 c0       	rjmp	.+128    	; 0x1578 <MDIO_SetPinValue+0xf0>
    14f8:	54 c0       	rjmp	.+168    	; 0x15a2 <MDIO_SetPinValue+0x11a>
			{
			case DIO_PORTA:	CLR_BIT(PORTA, Copy_u8Pin);	break;
    14fa:	ab e3       	ldi	r26, 0x3B	; 59
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	eb e3       	ldi	r30, 0x3B	; 59
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	48 2f       	mov	r20, r24
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 2e       	mov	r0, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <MDIO_SetPinValue+0x90>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <MDIO_SetPinValue+0x8c>
    151c:	80 95       	com	r24
    151e:	84 23       	and	r24, r20
    1520:	8c 93       	st	X, r24
    1522:	b8 c0       	rjmp	.+368    	; 0x1694 <MDIO_SetPinValue+0x20c>
			case DIO_PORTB:	CLR_BIT(PORTB, Copy_u8Pin);	break;
    1524:	a8 e3       	ldi	r26, 0x38	; 56
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e8 e3       	ldi	r30, 0x38	; 56
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <MDIO_SetPinValue+0xba>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <MDIO_SetPinValue+0xb6>
    1546:	80 95       	com	r24
    1548:	84 23       	and	r24, r20
    154a:	8c 93       	st	X, r24
    154c:	a3 c0       	rjmp	.+326    	; 0x1694 <MDIO_SetPinValue+0x20c>
			case DIO_PORTC:	CLR_BIT(PORTC, Copy_u8Pin);	break;
    154e:	a5 e3       	ldi	r26, 0x35	; 53
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e5 e3       	ldi	r30, 0x35	; 53
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <MDIO_SetPinValue+0xe4>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <MDIO_SetPinValue+0xe0>
    1570:	80 95       	com	r24
    1572:	84 23       	and	r24, r20
    1574:	8c 93       	st	X, r24
    1576:	8e c0       	rjmp	.+284    	; 0x1694 <MDIO_SetPinValue+0x20c>
			case DIO_PORTD:	CLR_BIT(PORTD, Copy_u8Pin);	break;
    1578:	a2 e3       	ldi	r26, 0x32	; 50
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e2 e3       	ldi	r30, 0x32	; 50
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <MDIO_SetPinValue+0x10e>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <MDIO_SetPinValue+0x10a>
    159a:	80 95       	com	r24
    159c:	84 23       	and	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	79 c0       	rjmp	.+242    	; 0x1694 <MDIO_SetPinValue+0x20c>
			default:	Error_state = Return_NOk;	break;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	76 c0       	rjmp	.+236    	; 0x1694 <MDIO_SetPinValue+0x20c>
			}
		}
		else if(Copy_u8Value == DIO_HIGH)
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <MDIO_SetPinValue+0x128>
    15ae:	72 c0       	rjmp	.+228    	; 0x1694 <MDIO_SetPinValue+0x20c>
		{
			switch(Copy_u8Port)
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3e 83       	std	Y+6, r19	; 0x06
    15b8:	2d 83       	std	Y+5, r18	; 0x05
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	9e 81       	ldd	r25, Y+6	; 0x06
    15be:	82 30       	cpi	r24, 0x02	; 2
    15c0:	91 05       	cpc	r25, r1
    15c2:	51 f1       	breq	.+84     	; 0x1618 <MDIO_SetPinValue+0x190>
    15c4:	2d 81       	ldd	r18, Y+5	; 0x05
    15c6:	3e 81       	ldd	r19, Y+6	; 0x06
    15c8:	23 30       	cpi	r18, 0x03	; 3
    15ca:	31 05       	cpc	r19, r1
    15cc:	34 f4       	brge	.+12     	; 0x15da <MDIO_SetPinValue+0x152>
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	91 05       	cpc	r25, r1
    15d6:	61 f0       	breq	.+24     	; 0x15f0 <MDIO_SetPinValue+0x168>
    15d8:	5b c0       	rjmp	.+182    	; 0x1690 <MDIO_SetPinValue+0x208>
    15da:	2d 81       	ldd	r18, Y+5	; 0x05
    15dc:	3e 81       	ldd	r19, Y+6	; 0x06
    15de:	23 30       	cpi	r18, 0x03	; 3
    15e0:	31 05       	cpc	r19, r1
    15e2:	71 f1       	breq	.+92     	; 0x1640 <MDIO_SetPinValue+0x1b8>
    15e4:	8d 81       	ldd	r24, Y+5	; 0x05
    15e6:	9e 81       	ldd	r25, Y+6	; 0x06
    15e8:	84 30       	cpi	r24, 0x04	; 4
    15ea:	91 05       	cpc	r25, r1
    15ec:	e9 f1       	breq	.+122    	; 0x1668 <MDIO_SetPinValue+0x1e0>
    15ee:	50 c0       	rjmp	.+160    	; 0x1690 <MDIO_SetPinValue+0x208>
			{
			case DIO_PORTA:	SET_BIT(PORTA, Copy_u8Pin);	break;
    15f0:	ab e3       	ldi	r26, 0x3B	; 59
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	eb e3       	ldi	r30, 0x3B	; 59
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <MDIO_SetPinValue+0x186>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <MDIO_SetPinValue+0x182>
    1612:	84 2b       	or	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	3e c0       	rjmp	.+124    	; 0x1694 <MDIO_SetPinValue+0x20c>
			case DIO_PORTB:	SET_BIT(PORTB, Copy_u8Pin);	break;
    1618:	a8 e3       	ldi	r26, 0x38	; 56
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e8 e3       	ldi	r30, 0x38	; 56
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <MDIO_SetPinValue+0x1ae>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <MDIO_SetPinValue+0x1aa>
    163a:	84 2b       	or	r24, r20
    163c:	8c 93       	st	X, r24
    163e:	2a c0       	rjmp	.+84     	; 0x1694 <MDIO_SetPinValue+0x20c>
			case DIO_PORTC:	SET_BIT(PORTC, Copy_u8Pin);	break;
    1640:	a5 e3       	ldi	r26, 0x35	; 53
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e5 e3       	ldi	r30, 0x35	; 53
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	48 2f       	mov	r20, r24
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	02 2e       	mov	r0, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <MDIO_SetPinValue+0x1d6>
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	0a 94       	dec	r0
    1660:	e2 f7       	brpl	.-8      	; 0x165a <MDIO_SetPinValue+0x1d2>
    1662:	84 2b       	or	r24, r20
    1664:	8c 93       	st	X, r24
    1666:	16 c0       	rjmp	.+44     	; 0x1694 <MDIO_SetPinValue+0x20c>
			case DIO_PORTD:	SET_BIT(PORTD, Copy_u8Pin);	break;
    1668:	a2 e3       	ldi	r26, 0x32	; 50
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e2 e3       	ldi	r30, 0x32	; 50
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <MDIO_SetPinValue+0x1fe>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <MDIO_SetPinValue+0x1fa>
    168a:	84 2b       	or	r24, r20
    168c:	8c 93       	st	X, r24
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <MDIO_SetPinValue+0x20c>
			default:	Error_state = Return_NOk;	break;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	return Error_state;
    1694:	89 81       	ldd	r24, Y+1	; 0x01
}
    1696:	28 96       	adiw	r28, 0x08	; 8
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	08 95       	ret

000016a8 <MDIO_GetPinValue>:

Error_State_t MDIO_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* P_u8Value)
{
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	27 97       	sbiw	r28, 0x07	; 7
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	8a 83       	std	Y+2, r24	; 0x02
    16be:	6b 83       	std	Y+3, r22	; 0x03
    16c0:	5d 83       	std	Y+5, r21	; 0x05
    16c2:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Error_state = Return_Ok;
    16c4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin > 7)
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	88 30       	cpi	r24, 0x08	; 8
    16ca:	18 f0       	brcs	.+6      	; 0x16d2 <MDIO_GetPinValue+0x2a>
	{
		Error_state = Return_NOk;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	73 c0       	rjmp	.+230    	; 0x17b8 <MDIO_GetPinValue+0x110>
	}
	else
	{
		switch(Copy_u8Port)
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	3f 83       	std	Y+7, r19	; 0x07
    16da:	2e 83       	std	Y+6, r18	; 0x06
    16dc:	4e 81       	ldd	r20, Y+6	; 0x06
    16de:	5f 81       	ldd	r21, Y+7	; 0x07
    16e0:	42 30       	cpi	r20, 0x02	; 2
    16e2:	51 05       	cpc	r21, r1
    16e4:	59 f1       	breq	.+86     	; 0x173c <MDIO_GetPinValue+0x94>
    16e6:	8e 81       	ldd	r24, Y+6	; 0x06
    16e8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ea:	83 30       	cpi	r24, 0x03	; 3
    16ec:	91 05       	cpc	r25, r1
    16ee:	34 f4       	brge	.+12     	; 0x16fc <MDIO_GetPinValue+0x54>
    16f0:	2e 81       	ldd	r18, Y+6	; 0x06
    16f2:	3f 81       	ldd	r19, Y+7	; 0x07
    16f4:	21 30       	cpi	r18, 0x01	; 1
    16f6:	31 05       	cpc	r19, r1
    16f8:	69 f0       	breq	.+26     	; 0x1714 <MDIO_GetPinValue+0x6c>
    16fa:	5c c0       	rjmp	.+184    	; 0x17b4 <MDIO_GetPinValue+0x10c>
    16fc:	4e 81       	ldd	r20, Y+6	; 0x06
    16fe:	5f 81       	ldd	r21, Y+7	; 0x07
    1700:	43 30       	cpi	r20, 0x03	; 3
    1702:	51 05       	cpc	r21, r1
    1704:	79 f1       	breq	.+94     	; 0x1764 <MDIO_GetPinValue+0xbc>
    1706:	8e 81       	ldd	r24, Y+6	; 0x06
    1708:	9f 81       	ldd	r25, Y+7	; 0x07
    170a:	84 30       	cpi	r24, 0x04	; 4
    170c:	91 05       	cpc	r25, r1
    170e:	09 f4       	brne	.+2      	; 0x1712 <MDIO_GetPinValue+0x6a>
    1710:	3d c0       	rjmp	.+122    	; 0x178c <MDIO_GetPinValue+0xe4>
    1712:	50 c0       	rjmp	.+160    	; 0x17b4 <MDIO_GetPinValue+0x10c>
		{
		case DIO_PORTA:	*P_u8Value = GET_BIT(PINA, Copy_u8Pin);	break;
    1714:	e9 e3       	ldi	r30, 0x39	; 57
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	a9 01       	movw	r20, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <MDIO_GetPinValue+0x84>
    1728:	55 95       	asr	r21
    172a:	47 95       	ror	r20
    172c:	8a 95       	dec	r24
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <MDIO_GetPinValue+0x80>
    1730:	ca 01       	movw	r24, r20
    1732:	81 70       	andi	r24, 0x01	; 1
    1734:	ec 81       	ldd	r30, Y+4	; 0x04
    1736:	fd 81       	ldd	r31, Y+5	; 0x05
    1738:	80 83       	st	Z, r24
    173a:	3e c0       	rjmp	.+124    	; 0x17b8 <MDIO_GetPinValue+0x110>
		case DIO_PORTB:	*P_u8Value = GET_BIT(PINB, Copy_u8Pin);	break;
    173c:	e6 e3       	ldi	r30, 0x36	; 54
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	a9 01       	movw	r20, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <MDIO_GetPinValue+0xac>
    1750:	55 95       	asr	r21
    1752:	47 95       	ror	r20
    1754:	8a 95       	dec	r24
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <MDIO_GetPinValue+0xa8>
    1758:	ca 01       	movw	r24, r20
    175a:	81 70       	andi	r24, 0x01	; 1
    175c:	ec 81       	ldd	r30, Y+4	; 0x04
    175e:	fd 81       	ldd	r31, Y+5	; 0x05
    1760:	80 83       	st	Z, r24
    1762:	2a c0       	rjmp	.+84     	; 0x17b8 <MDIO_GetPinValue+0x110>
		case DIO_PORTC:	*P_u8Value = GET_BIT(PINC, Copy_u8Pin);	break;
    1764:	e3 e3       	ldi	r30, 0x33	; 51
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a9 01       	movw	r20, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <MDIO_GetPinValue+0xd4>
    1778:	55 95       	asr	r21
    177a:	47 95       	ror	r20
    177c:	8a 95       	dec	r24
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <MDIO_GetPinValue+0xd0>
    1780:	ca 01       	movw	r24, r20
    1782:	81 70       	andi	r24, 0x01	; 1
    1784:	ec 81       	ldd	r30, Y+4	; 0x04
    1786:	fd 81       	ldd	r31, Y+5	; 0x05
    1788:	80 83       	st	Z, r24
    178a:	16 c0       	rjmp	.+44     	; 0x17b8 <MDIO_GetPinValue+0x110>
		case DIO_PORTD:	*P_u8Value = GET_BIT(PIND, Copy_u8Pin);	break;
    178c:	e0 e3       	ldi	r30, 0x30	; 48
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a9 01       	movw	r20, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <MDIO_GetPinValue+0xfc>
    17a0:	55 95       	asr	r21
    17a2:	47 95       	ror	r20
    17a4:	8a 95       	dec	r24
    17a6:	e2 f7       	brpl	.-8      	; 0x17a0 <MDIO_GetPinValue+0xf8>
    17a8:	ca 01       	movw	r24, r20
    17aa:	81 70       	andi	r24, 0x01	; 1
    17ac:	ec 81       	ldd	r30, Y+4	; 0x04
    17ae:	fd 81       	ldd	r31, Y+5	; 0x05
    17b0:	80 83       	st	Z, r24
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <MDIO_GetPinValue+0x110>
		default:	Error_state = Return_NOk;					break;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Error_state;
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ba:	27 96       	adiw	r28, 0x07	; 7
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <MDIO_SetPortValue>:

Error_State_t MDIO_SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <MDIO_SetPortValue+0x6>
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <MDIO_SetPortValue+0x8>
    17d4:	0f 92       	push	r0
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	8a 83       	std	Y+2, r24	; 0x02
    17dc:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_state = Return_Ok;
    17de:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	3d 83       	std	Y+5, r19	; 0x05
    17e8:	2c 83       	std	Y+4, r18	; 0x04
    17ea:	8c 81       	ldd	r24, Y+4	; 0x04
    17ec:	9d 81       	ldd	r25, Y+5	; 0x05
    17ee:	82 30       	cpi	r24, 0x02	; 2
    17f0:	91 05       	cpc	r25, r1
    17f2:	d9 f0       	breq	.+54     	; 0x182a <MDIO_SetPortValue+0x5e>
    17f4:	2c 81       	ldd	r18, Y+4	; 0x04
    17f6:	3d 81       	ldd	r19, Y+5	; 0x05
    17f8:	23 30       	cpi	r18, 0x03	; 3
    17fa:	31 05       	cpc	r19, r1
    17fc:	34 f4       	brge	.+12     	; 0x180a <MDIO_SetPortValue+0x3e>
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1800:	9d 81       	ldd	r25, Y+5	; 0x05
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	91 05       	cpc	r25, r1
    1806:	61 f0       	breq	.+24     	; 0x1820 <MDIO_SetPortValue+0x54>
    1808:	1f c0       	rjmp	.+62     	; 0x1848 <MDIO_SetPortValue+0x7c>
    180a:	2c 81       	ldd	r18, Y+4	; 0x04
    180c:	3d 81       	ldd	r19, Y+5	; 0x05
    180e:	23 30       	cpi	r18, 0x03	; 3
    1810:	31 05       	cpc	r19, r1
    1812:	81 f0       	breq	.+32     	; 0x1834 <MDIO_SetPortValue+0x68>
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	9d 81       	ldd	r25, Y+5	; 0x05
    1818:	84 30       	cpi	r24, 0x04	; 4
    181a:	91 05       	cpc	r25, r1
    181c:	81 f0       	breq	.+32     	; 0x183e <MDIO_SetPortValue+0x72>
    181e:	14 c0       	rjmp	.+40     	; 0x1848 <MDIO_SetPortValue+0x7c>
	{
	case DIO_PORTA:	PORTA = Copy_u8Value;	break;
    1820:	eb e3       	ldi	r30, 0x3B	; 59
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	80 83       	st	Z, r24
    1828:	11 c0       	rjmp	.+34     	; 0x184c <MDIO_SetPortValue+0x80>
	case DIO_PORTB:	PORTB = Copy_u8Value;	break;
    182a:	e8 e3       	ldi	r30, 0x38	; 56
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	80 83       	st	Z, r24
    1832:	0c c0       	rjmp	.+24     	; 0x184c <MDIO_SetPortValue+0x80>
	case DIO_PORTC:	PORTC = Copy_u8Value;	break;
    1834:	e5 e3       	ldi	r30, 0x35	; 53
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	80 83       	st	Z, r24
    183c:	07 c0       	rjmp	.+14     	; 0x184c <MDIO_SetPortValue+0x80>
	case DIO_PORTD:	PORTD = Copy_u8Value;	break;
    183e:	e2 e3       	ldi	r30, 0x32	; 50
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	80 83       	st	Z, r24
    1846:	02 c0       	rjmp	.+4      	; 0x184c <MDIO_SetPortValue+0x80>
	default:	Error_state = Return_NOk;	break;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state;
    184c:	89 81       	ldd	r24, Y+1	; 0x01
}
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <MDIO_GetPortValue>:

Error_State_t MDIO_GetPortValue(u8 Copy_u8Port, u8* P_u8Value)
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	00 d0       	rcall	.+0      	; 0x1864 <MDIO_GetPortValue+0x6>
    1864:	00 d0       	rcall	.+0      	; 0x1866 <MDIO_GetPortValue+0x8>
    1866:	00 d0       	rcall	.+0      	; 0x1868 <MDIO_GetPortValue+0xa>
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	8a 83       	std	Y+2, r24	; 0x02
    186e:	7c 83       	std	Y+4, r23	; 0x04
    1870:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_state = Return_Ok;
    1872:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	3e 83       	std	Y+6, r19	; 0x06
    187c:	2d 83       	std	Y+5, r18	; 0x05
    187e:	4d 81       	ldd	r20, Y+5	; 0x05
    1880:	5e 81       	ldd	r21, Y+6	; 0x06
    1882:	42 30       	cpi	r20, 0x02	; 2
    1884:	51 05       	cpc	r21, r1
    1886:	59 f1       	breq	.+86     	; 0x18de <MDIO_GetPortValue+0x80>
    1888:	8d 81       	ldd	r24, Y+5	; 0x05
    188a:	9e 81       	ldd	r25, Y+6	; 0x06
    188c:	83 30       	cpi	r24, 0x03	; 3
    188e:	91 05       	cpc	r25, r1
    1890:	34 f4       	brge	.+12     	; 0x189e <MDIO_GetPortValue+0x40>
    1892:	2d 81       	ldd	r18, Y+5	; 0x05
    1894:	3e 81       	ldd	r19, Y+6	; 0x06
    1896:	21 30       	cpi	r18, 0x01	; 1
    1898:	31 05       	cpc	r19, r1
    189a:	69 f0       	breq	.+26     	; 0x18b6 <MDIO_GetPortValue+0x58>
    189c:	5c c0       	rjmp	.+184    	; 0x1956 <MDIO_GetPortValue+0xf8>
    189e:	4d 81       	ldd	r20, Y+5	; 0x05
    18a0:	5e 81       	ldd	r21, Y+6	; 0x06
    18a2:	43 30       	cpi	r20, 0x03	; 3
    18a4:	51 05       	cpc	r21, r1
    18a6:	79 f1       	breq	.+94     	; 0x1906 <MDIO_GetPortValue+0xa8>
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	9e 81       	ldd	r25, Y+6	; 0x06
    18ac:	84 30       	cpi	r24, 0x04	; 4
    18ae:	91 05       	cpc	r25, r1
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <MDIO_GetPortValue+0x56>
    18b2:	3d c0       	rjmp	.+122    	; 0x192e <MDIO_GetPortValue+0xd0>
    18b4:	50 c0       	rjmp	.+160    	; 0x1956 <MDIO_GetPortValue+0xf8>
	{
	case DIO_PORTA:	*P_u8Value = GET_BIT(PORTA, Copy_u8Port);	break;
    18b6:	eb e3       	ldi	r30, 0x3B	; 59
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a9 01       	movw	r20, r18
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <MDIO_GetPortValue+0x70>
    18ca:	55 95       	asr	r21
    18cc:	47 95       	ror	r20
    18ce:	8a 95       	dec	r24
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <MDIO_GetPortValue+0x6c>
    18d2:	ca 01       	movw	r24, r20
    18d4:	81 70       	andi	r24, 0x01	; 1
    18d6:	eb 81       	ldd	r30, Y+3	; 0x03
    18d8:	fc 81       	ldd	r31, Y+4	; 0x04
    18da:	80 83       	st	Z, r24
    18dc:	3e c0       	rjmp	.+124    	; 0x195a <MDIO_GetPortValue+0xfc>
	case DIO_PORTB:	*P_u8Value = GET_BIT(PORTB, Copy_u8Port);	break;
    18de:	e8 e3       	ldi	r30, 0x38	; 56
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a9 01       	movw	r20, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <MDIO_GetPortValue+0x98>
    18f2:	55 95       	asr	r21
    18f4:	47 95       	ror	r20
    18f6:	8a 95       	dec	r24
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <MDIO_GetPortValue+0x94>
    18fa:	ca 01       	movw	r24, r20
    18fc:	81 70       	andi	r24, 0x01	; 1
    18fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1900:	fc 81       	ldd	r31, Y+4	; 0x04
    1902:	80 83       	st	Z, r24
    1904:	2a c0       	rjmp	.+84     	; 0x195a <MDIO_GetPortValue+0xfc>
	case DIO_PORTC:	*P_u8Value = GET_BIT(PORTC, Copy_u8Port);	break;
    1906:	e5 e3       	ldi	r30, 0x35	; 53
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a9 01       	movw	r20, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <MDIO_GetPortValue+0xc0>
    191a:	55 95       	asr	r21
    191c:	47 95       	ror	r20
    191e:	8a 95       	dec	r24
    1920:	e2 f7       	brpl	.-8      	; 0x191a <MDIO_GetPortValue+0xbc>
    1922:	ca 01       	movw	r24, r20
    1924:	81 70       	andi	r24, 0x01	; 1
    1926:	eb 81       	ldd	r30, Y+3	; 0x03
    1928:	fc 81       	ldd	r31, Y+4	; 0x04
    192a:	80 83       	st	Z, r24
    192c:	16 c0       	rjmp	.+44     	; 0x195a <MDIO_GetPortValue+0xfc>
	case DIO_PORTD:	*P_u8Value = GET_BIT(PORTD, Copy_u8Port);	break;
    192e:	e2 e3       	ldi	r30, 0x32	; 50
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a9 01       	movw	r20, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <MDIO_GetPortValue+0xe8>
    1942:	55 95       	asr	r21
    1944:	47 95       	ror	r20
    1946:	8a 95       	dec	r24
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <MDIO_GetPortValue+0xe4>
    194a:	ca 01       	movw	r24, r20
    194c:	81 70       	andi	r24, 0x01	; 1
    194e:	eb 81       	ldd	r30, Y+3	; 0x03
    1950:	fc 81       	ldd	r31, Y+4	; 0x04
    1952:	80 83       	st	Z, r24
    1954:	02 c0       	rjmp	.+4      	; 0x195a <MDIO_GetPortValue+0xfc>
	default:	Error_state = Return_NOk;						break;
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state;
    195a:	89 81       	ldd	r24, Y+1	; 0x01
}
    195c:	26 96       	adiw	r28, 0x06	; 6
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <MDIO_TogglePin>:

Error_State_t MDIO_TogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <MDIO_TogglePin+0x6>
    1974:	00 d0       	rcall	.+0      	; 0x1976 <MDIO_TogglePin+0x8>
    1976:	0f 92       	push	r0
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	8a 83       	std	Y+2, r24	; 0x02
    197e:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_state = Return_Ok;
    1980:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin > 7)
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	88 30       	cpi	r24, 0x08	; 8
    1986:	18 f0       	brcs	.+6      	; 0x198e <MDIO_TogglePin+0x20>
	{
		Error_state = Return_NOk;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	72 c0       	rjmp	.+228    	; 0x1a72 <MDIO_TogglePin+0x104>
	}
	else
	{
		switch(Copy_u8Port)
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	3d 83       	std	Y+5, r19	; 0x05
    1996:	2c 83       	std	Y+4, r18	; 0x04
    1998:	8c 81       	ldd	r24, Y+4	; 0x04
    199a:	9d 81       	ldd	r25, Y+5	; 0x05
    199c:	82 30       	cpi	r24, 0x02	; 2
    199e:	91 05       	cpc	r25, r1
    19a0:	51 f1       	breq	.+84     	; 0x19f6 <MDIO_TogglePin+0x88>
    19a2:	2c 81       	ldd	r18, Y+4	; 0x04
    19a4:	3d 81       	ldd	r19, Y+5	; 0x05
    19a6:	23 30       	cpi	r18, 0x03	; 3
    19a8:	31 05       	cpc	r19, r1
    19aa:	34 f4       	brge	.+12     	; 0x19b8 <MDIO_TogglePin+0x4a>
    19ac:	8c 81       	ldd	r24, Y+4	; 0x04
    19ae:	9d 81       	ldd	r25, Y+5	; 0x05
    19b0:	81 30       	cpi	r24, 0x01	; 1
    19b2:	91 05       	cpc	r25, r1
    19b4:	61 f0       	breq	.+24     	; 0x19ce <MDIO_TogglePin+0x60>
    19b6:	5b c0       	rjmp	.+182    	; 0x1a6e <MDIO_TogglePin+0x100>
    19b8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ba:	3d 81       	ldd	r19, Y+5	; 0x05
    19bc:	23 30       	cpi	r18, 0x03	; 3
    19be:	31 05       	cpc	r19, r1
    19c0:	71 f1       	breq	.+92     	; 0x1a1e <MDIO_TogglePin+0xb0>
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	9d 81       	ldd	r25, Y+5	; 0x05
    19c6:	84 30       	cpi	r24, 0x04	; 4
    19c8:	91 05       	cpc	r25, r1
    19ca:	e9 f1       	breq	.+122    	; 0x1a46 <MDIO_TogglePin+0xd8>
    19cc:	50 c0       	rjmp	.+160    	; 0x1a6e <MDIO_TogglePin+0x100>
		{
		case DIO_PORTA:	TOGGLE_BIT(PORTA, Copy_u8Pin);	break;
    19ce:	ab e3       	ldi	r26, 0x3B	; 59
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	eb e3       	ldi	r30, 0x3B	; 59
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	48 2f       	mov	r20, r24
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	02 2e       	mov	r0, r18
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <MDIO_TogglePin+0x7e>
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	0a 94       	dec	r0
    19ee:	e2 f7       	brpl	.-8      	; 0x19e8 <MDIO_TogglePin+0x7a>
    19f0:	84 27       	eor	r24, r20
    19f2:	8c 93       	st	X, r24
    19f4:	3e c0       	rjmp	.+124    	; 0x1a72 <MDIO_TogglePin+0x104>
		case DIO_PORTB:	TOGGLE_BIT(PORTB, Copy_u8Pin);	break;
    19f6:	a8 e3       	ldi	r26, 0x38	; 56
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e8 e3       	ldi	r30, 0x38	; 56
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	48 2f       	mov	r20, r24
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 2e       	mov	r0, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <MDIO_TogglePin+0xa6>
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	0a 94       	dec	r0
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <MDIO_TogglePin+0xa2>
    1a18:	84 27       	eor	r24, r20
    1a1a:	8c 93       	st	X, r24
    1a1c:	2a c0       	rjmp	.+84     	; 0x1a72 <MDIO_TogglePin+0x104>
		case DIO_PORTC:	TOGGLE_BIT(PORTC, Copy_u8Pin);	break;
    1a1e:	a5 e3       	ldi	r26, 0x35	; 53
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e5 e3       	ldi	r30, 0x35	; 53
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	48 2f       	mov	r20, r24
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 2e       	mov	r0, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <MDIO_TogglePin+0xce>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <MDIO_TogglePin+0xca>
    1a40:	84 27       	eor	r24, r20
    1a42:	8c 93       	st	X, r24
    1a44:	16 c0       	rjmp	.+44     	; 0x1a72 <MDIO_TogglePin+0x104>
		case DIO_PORTD:	TOGGLE_BIT(PORTD, Copy_u8Pin);	break;
    1a46:	a2 e3       	ldi	r26, 0x32	; 50
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e2 e3       	ldi	r30, 0x32	; 50
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <MDIO_TogglePin+0xf6>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <MDIO_TogglePin+0xf2>
    1a68:	84 27       	eor	r24, r20
    1a6a:	8c 93       	st	X, r24
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <MDIO_TogglePin+0x104>
		default:	Error_state = Return_NOk;			break;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Error_state;
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <Port_VoidInit>:


void Port_VoidInit(void)
{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    1a8c:	ea e3       	ldi	r30, 0x3A	; 58
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	8c ef       	ldi	r24, 0xFC	; 252
    1a92:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1a94:	e7 e3       	ldi	r30, 0x37	; 55
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 ef       	ldi	r24, 0xF0	; 240
    1a9a:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    1a9c:	e4 e3       	ldi	r30, 0x34	; 52
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	8f ef       	ldi	r24, 0xFF	; 255
    1aa2:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    1aa4:	e1 e3       	ldi	r30, 0x31	; 49
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	8f ef       	ldi	r24, 0xFF	; 255
    1aaa:	80 83       	st	Z, r24

	PORTA = PORTA_INIT_VAL;
    1aac:	eb e3       	ldi	r30, 0x3B	; 59
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 ef       	ldi	r24, 0xF0	; 240
    1ab2:	80 83       	st	Z, r24
	PORTB = PORTB_INIT_VAL;
    1ab4:	e8 e3       	ldi	r30, 0x38	; 56
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	10 82       	st	Z, r1
	PORTC = PORTC_INIT_VAL;
    1aba:	e5 e3       	ldi	r30, 0x35	; 53
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	10 82       	st	Z, r1
	PORTD = PORTD_INIT_VAL;
    1ac0:	e2 e3       	ldi	r30, 0x32	; 50
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	10 82       	st	Z, r1
}
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <MADC_voidInit>:
#include "M_ADC_register.h"
#include "M_ADC_private.h"
#include "M_ADC_interface.h"

void MADC_voidInit(void)
{
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADMUX, ADMUX_REFS0);
	CLR_BIT(ADMUX, ADMUX_REFS1);


#elif ADC_REFERENCE == AVCC
	SET_BIT(ADMUX, ADMUX_REFS0);
    1ad4:	a7 e2       	ldi	r26, 0x27	; 39
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e7 e2       	ldi	r30, 0x27	; 39
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	80 64       	ori	r24, 0x40	; 64
    1ae0:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_REFS1);
    1ae2:	a7 e2       	ldi	r26, 0x27	; 39
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e7 e2       	ldi	r30, 0x27	; 39
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	8f 77       	andi	r24, 0x7F	; 127
    1aee:	8c 93       	st	X, r24
#warning "Invalid ADC Reference Selection "

#endif

	/*Select Right Adjust, the data size is 10 bits*/
	CLR_BIT(ADMUX, ADMUX_ADLAR);
    1af0:	a7 e2       	ldi	r26, 0x27	; 39
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e7 e2       	ldi	r30, 0x27	; 39
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	8f 7d       	andi	r24, 0xDF	; 223
    1afc:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADCSRA_ADPS0);
	CLR_BIT(ADCSRA, ADCSRA_ADPS1);
	SET_BIT(ADCSRA, ADCSRA_ADPS2);

#elif PRESCALER == DIV_32
	SET_BIT(ADCSRA, ADCSRA_ADPS0);
    1afe:	a6 e2       	ldi	r26, 0x26	; 38
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e6 e2       	ldi	r30, 0x26	; 38
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	81 60       	ori	r24, 0x01	; 1
    1b0a:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADCSRA_ADPS1);
    1b0c:	a6 e2       	ldi	r26, 0x26	; 38
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e6 e2       	ldi	r30, 0x26	; 38
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	8d 7f       	andi	r24, 0xFD	; 253
    1b18:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS2);
    1b1a:	a6 e2       	ldi	r26, 0x26	; 38
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e6 e2       	ldi	r30, 0x26	; 38
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	84 60       	ori	r24, 0x04	; 4
    1b26:	8c 93       	st	X, r24
#warning "Invalid ADC Prescaler Selection "

#endif

	/*Enable ADC*/
	SET_BIT(ADCSRA, ADCSRA_ADEN);
    1b28:	a6 e2       	ldi	r26, 0x26	; 38
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e6 e2       	ldi	r30, 0x26	; 38
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	80 68       	ori	r24, 0x80	; 128
    1b34:	8c 93       	st	X, r24
}
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <MADC_u16GetValue>:

u16 MADC_u16GetValue(u8 copy_u8Channel)
{
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	0f 92       	push	r0
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	89 83       	std	Y+1, r24	; 0x01
	/*clear the first 5 bits to choose the ADC channel*/
	ADMUX &= 0b11100000;
    1b48:	a7 e2       	ldi	r26, 0x27	; 39
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	e7 e2       	ldi	r30, 0x27	; 39
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	80 7e       	andi	r24, 0xE0	; 224
    1b54:	8c 93       	st	X, r24

	/*select the ADC channel*/
	ADMUX |= copy_u8Channel;
    1b56:	a7 e2       	ldi	r26, 0x27	; 39
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e7 e2       	ldi	r30, 0x27	; 39
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	90 81       	ld	r25, Z
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	89 2b       	or	r24, r25
    1b64:	8c 93       	st	X, r24

	/*ADC start conversion*/
	SET_BIT(ADCSRA, ADCSRA_ADSC);
    1b66:	a6 e2       	ldi	r26, 0x26	; 38
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e6 e2       	ldi	r30, 0x26	; 38
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	80 64       	ori	r24, 0x40	; 64
    1b72:	8c 93       	st	X, r24

	/*Busy wait until ADC complete conversion flag is set and counter reaching timeout*/
	while(GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
    1b74:	e6 e2       	ldi	r30, 0x26	; 38
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	82 95       	swap	r24
    1b7c:	8f 70       	andi	r24, 0x0F	; 15
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	81 70       	andi	r24, 0x01	; 1
    1b84:	90 70       	andi	r25, 0x00	; 0
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	a9 f3       	breq	.-22     	; 0x1b74 <MADC_u16GetValue+0x38>
	/*clear the flag*/
	SET_BIT(ADCSRA, ADCSRA_ADIF);
    1b8a:	a6 e2       	ldi	r26, 0x26	; 38
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e6 e2       	ldi	r30, 0x26	; 38
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	80 61       	ori	r24, 0x10	; 16
    1b96:	8c 93       	st	X, r24
	return ADC_DATA_REG;
    1b98:	e4 e2       	ldi	r30, 0x24	; 36
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <HLCD_voidSendCommand>:
#include "HLCD_config.h"
#include "../../MCAL/DIO/MDIO_interface.h"

#if LCD_MODE == 4
void HLCD_voidSendCommand(u8 Copy_u8Command)
{
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	e9 97       	sbiw	r28, 0x39	; 57
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	89 af       	std	Y+57, r24	; 0x39
	/*clear RS pin to send command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_RS,DIO_LOW);
    1bbe:	84 e0       	ldi	r24, 0x04	; 4
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	40 e0       	ldi	r20, 0x00	; 0
    1bc4:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	/*clear the RW pin to write*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_RW,DIO_LOW);
    1bc8:	84 e0       	ldi	r24, 0x04	; 4
    1bca:	61 e0       	ldi	r22, 0x01	; 1
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	/*send data*/
	if(GET_BIT(Copy_u8Command, 4))
    1bd2:	89 ad       	ldd	r24, Y+57	; 0x39
    1bd4:	82 95       	swap	r24
    1bd6:	8f 70       	andi	r24, 0x0F	; 15
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	81 70       	andi	r24, 0x01	; 1
    1bde:	90 70       	andi	r25, 0x00	; 0
    1be0:	88 23       	and	r24, r24
    1be2:	31 f0       	breq	.+12     	; 0x1bf0 <HLCD_voidSendCommand+0x48>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN4, DIO_HIGH);}
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	64 e0       	ldi	r22, 0x04	; 4
    1be8:	41 e0       	ldi	r20, 0x01	; 1
    1bea:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    1bee:	05 c0       	rjmp	.+10     	; 0x1bfa <HLCD_voidSendCommand+0x52>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN4, DIO_LOW);}
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	64 e0       	ldi	r22, 0x04	; 4
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 5))
    1bfa:	89 ad       	ldd	r24, Y+57	; 0x39
    1bfc:	82 95       	swap	r24
    1bfe:	86 95       	lsr	r24
    1c00:	87 70       	andi	r24, 0x07	; 7
    1c02:	88 2f       	mov	r24, r24
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	81 70       	andi	r24, 0x01	; 1
    1c08:	90 70       	andi	r25, 0x00	; 0
    1c0a:	88 23       	and	r24, r24
    1c0c:	31 f0       	breq	.+12     	; 0x1c1a <HLCD_voidSendCommand+0x72>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN5, DIO_HIGH);}
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	65 e0       	ldi	r22, 0x05	; 5
    1c12:	41 e0       	ldi	r20, 0x01	; 1
    1c14:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    1c18:	05 c0       	rjmp	.+10     	; 0x1c24 <HLCD_voidSendCommand+0x7c>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN5, DIO_LOW);}
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	65 e0       	ldi	r22, 0x05	; 5
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 6))
    1c24:	89 ad       	ldd	r24, Y+57	; 0x39
    1c26:	82 95       	swap	r24
    1c28:	86 95       	lsr	r24
    1c2a:	86 95       	lsr	r24
    1c2c:	83 70       	andi	r24, 0x03	; 3
    1c2e:	88 2f       	mov	r24, r24
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	81 70       	andi	r24, 0x01	; 1
    1c34:	90 70       	andi	r25, 0x00	; 0
    1c36:	88 23       	and	r24, r24
    1c38:	31 f0       	breq	.+12     	; 0x1c46 <HLCD_voidSendCommand+0x9e>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN6, DIO_HIGH);}
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	66 e0       	ldi	r22, 0x06	; 6
    1c3e:	41 e0       	ldi	r20, 0x01	; 1
    1c40:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    1c44:	05 c0       	rjmp	.+10     	; 0x1c50 <HLCD_voidSendCommand+0xa8>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN6, DIO_LOW);}
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	66 e0       	ldi	r22, 0x06	; 6
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 7))
    1c50:	89 ad       	ldd	r24, Y+57	; 0x39
    1c52:	88 23       	and	r24, r24
    1c54:	34 f4       	brge	.+12     	; 0x1c62 <HLCD_voidSendCommand+0xba>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN7, DIO_HIGH);}
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	67 e0       	ldi	r22, 0x07	; 7
    1c5a:	41 e0       	ldi	r20, 0x01	; 1
    1c5c:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    1c60:	05 c0       	rjmp	.+10     	; 0x1c6c <HLCD_voidSendCommand+0xc4>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN7, DIO_LOW);}
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	67 e0       	ldi	r22, 0x07	; 7
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	/*set EN to make LCD Micro. read command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_HIGH);
    1c6c:	84 e0       	ldi	r24, 0x04	; 4
    1c6e:	62 e0       	ldi	r22, 0x02	; 2
    1c70:	41 e0       	ldi	r20, 0x01	; 1
    1c72:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a0 e8       	ldi	r26, 0x80	; 128
    1c7c:	bf e3       	ldi	r27, 0x3F	; 63
    1c7e:	8d ab       	std	Y+53, r24	; 0x35
    1c80:	9e ab       	std	Y+54, r25	; 0x36
    1c82:	af ab       	std	Y+55, r26	; 0x37
    1c84:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c86:	6d a9       	ldd	r22, Y+53	; 0x35
    1c88:	7e a9       	ldd	r23, Y+54	; 0x36
    1c8a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c8c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a ef       	ldi	r20, 0xFA	; 250
    1c94:	54 e4       	ldi	r21, 0x44	; 68
    1c96:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	89 ab       	std	Y+49, r24	; 0x31
    1ca0:	9a ab       	std	Y+50, r25	; 0x32
    1ca2:	ab ab       	std	Y+51, r26	; 0x33
    1ca4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ca6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca8:	7a a9       	ldd	r23, Y+50	; 0x32
    1caa:	8b a9       	ldd	r24, Y+51	; 0x33
    1cac:	9c a9       	ldd	r25, Y+52	; 0x34
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e8       	ldi	r20, 0x80	; 128
    1cb4:	5f e3       	ldi	r21, 0x3F	; 63
    1cb6:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    1cba:	88 23       	and	r24, r24
    1cbc:	2c f4       	brge	.+10     	; 0x1cc8 <HLCD_voidSendCommand+0x120>
		__ticks = 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	98 ab       	std	Y+48, r25	; 0x30
    1cc4:	8f a7       	std	Y+47, r24	; 0x2f
    1cc6:	3f c0       	rjmp	.+126    	; 0x1d46 <HLCD_voidSendCommand+0x19e>
	else if (__tmp > 65535)
    1cc8:	69 a9       	ldd	r22, Y+49	; 0x31
    1cca:	7a a9       	ldd	r23, Y+50	; 0x32
    1ccc:	8b a9       	ldd	r24, Y+51	; 0x33
    1cce:	9c a9       	ldd	r25, Y+52	; 0x34
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	3f ef       	ldi	r19, 0xFF	; 255
    1cd4:	4f e7       	ldi	r20, 0x7F	; 127
    1cd6:	57 e4       	ldi	r21, 0x47	; 71
    1cd8:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    1cdc:	18 16       	cp	r1, r24
    1cde:	4c f5       	brge	.+82     	; 0x1d32 <HLCD_voidSendCommand+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ce2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ce4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ce6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e2       	ldi	r20, 0x20	; 32
    1cee:	51 e4       	ldi	r21, 0x41	; 65
    1cf0:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	98 ab       	std	Y+48, r25	; 0x30
    1d06:	8f a7       	std	Y+47, r24	; 0x2f
    1d08:	0f c0       	rjmp	.+30     	; 0x1d28 <HLCD_voidSendCommand+0x180>
    1d0a:	88 ec       	ldi	r24, 0xC8	; 200
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9e a7       	std	Y+46, r25	; 0x2e
    1d10:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d12:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d14:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <HLCD_voidSendCommand+0x16e>
    1d1a:	9e a7       	std	Y+46, r25	; 0x2e
    1d1c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d20:	98 a9       	ldd	r25, Y+48	; 0x30
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	98 ab       	std	Y+48, r25	; 0x30
    1d26:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	69 f7       	brne	.-38     	; 0x1d0a <HLCD_voidSendCommand+0x162>
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <HLCD_voidSendCommand+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d32:	69 a9       	ldd	r22, Y+49	; 0x31
    1d34:	7a a9       	ldd	r23, Y+50	; 0x32
    1d36:	8b a9       	ldd	r24, Y+51	; 0x33
    1d38:	9c a9       	ldd	r25, Y+52	; 0x34
    1d3a:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	98 ab       	std	Y+48, r25	; 0x30
    1d44:	8f a7       	std	Y+47, r24	; 0x2f
    1d46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d48:	98 a9       	ldd	r25, Y+48	; 0x30
    1d4a:	9c a7       	std	Y+44, r25	; 0x2c
    1d4c:	8b a7       	std	Y+43, r24	; 0x2b
    1d4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d50:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <HLCD_voidSendCommand+0x1aa>
    1d56:	9c a7       	std	Y+44, r25	; 0x2c
    1d58:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_LOW);
    1d5a:	84 e0       	ldi	r24, 0x04	; 4
    1d5c:	62 e0       	ldi	r22, 0x02	; 2
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a0 e0       	ldi	r26, 0x00	; 0
    1d6a:	b0 e4       	ldi	r27, 0x40	; 64
    1d6c:	8f a3       	std	Y+39, r24	; 0x27
    1d6e:	98 a7       	std	Y+40, r25	; 0x28
    1d70:	a9 a7       	std	Y+41, r26	; 0x29
    1d72:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d74:	6f a1       	ldd	r22, Y+39	; 0x27
    1d76:	78 a5       	ldd	r23, Y+40	; 0x28
    1d78:	89 a5       	ldd	r24, Y+41	; 0x29
    1d7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	4a ef       	ldi	r20, 0xFA	; 250
    1d82:	54 e4       	ldi	r21, 0x44	; 68
    1d84:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	8b a3       	std	Y+35, r24	; 0x23
    1d8e:	9c a3       	std	Y+36, r25	; 0x24
    1d90:	ad a3       	std	Y+37, r26	; 0x25
    1d92:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d94:	6b a1       	ldd	r22, Y+35	; 0x23
    1d96:	7c a1       	ldd	r23, Y+36	; 0x24
    1d98:	8d a1       	ldd	r24, Y+37	; 0x25
    1d9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e8       	ldi	r20, 0x80	; 128
    1da2:	5f e3       	ldi	r21, 0x3F	; 63
    1da4:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    1da8:	88 23       	and	r24, r24
    1daa:	2c f4       	brge	.+10     	; 0x1db6 <HLCD_voidSendCommand+0x20e>
		__ticks = 1;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	9a a3       	std	Y+34, r25	; 0x22
    1db2:	89 a3       	std	Y+33, r24	; 0x21
    1db4:	3f c0       	rjmp	.+126    	; 0x1e34 <HLCD_voidSendCommand+0x28c>
	else if (__tmp > 65535)
    1db6:	6b a1       	ldd	r22, Y+35	; 0x23
    1db8:	7c a1       	ldd	r23, Y+36	; 0x24
    1dba:	8d a1       	ldd	r24, Y+37	; 0x25
    1dbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
    1dc2:	4f e7       	ldi	r20, 0x7F	; 127
    1dc4:	57 e4       	ldi	r21, 0x47	; 71
    1dc6:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    1dca:	18 16       	cp	r1, r24
    1dcc:	4c f5       	brge	.+82     	; 0x1e20 <HLCD_voidSendCommand+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dce:	6f a1       	ldd	r22, Y+39	; 0x27
    1dd0:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd2:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e2       	ldi	r20, 0x20	; 32
    1ddc:	51 e4       	ldi	r21, 0x41	; 65
    1dde:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	bc 01       	movw	r22, r24
    1de8:	cd 01       	movw	r24, r26
    1dea:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	9a a3       	std	Y+34, r25	; 0x22
    1df4:	89 a3       	std	Y+33, r24	; 0x21
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <HLCD_voidSendCommand+0x26e>
    1df8:	88 ec       	ldi	r24, 0xC8	; 200
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	98 a3       	std	Y+32, r25	; 0x20
    1dfe:	8f 8f       	std	Y+31, r24	; 0x1f
    1e00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e02:	98 a1       	ldd	r25, Y+32	; 0x20
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <HLCD_voidSendCommand+0x25c>
    1e08:	98 a3       	std	Y+32, r25	; 0x20
    1e0a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	9a a3       	std	Y+34, r25	; 0x22
    1e14:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e16:	89 a1       	ldd	r24, Y+33	; 0x21
    1e18:	9a a1       	ldd	r25, Y+34	; 0x22
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	69 f7       	brne	.-38     	; 0x1df8 <HLCD_voidSendCommand+0x250>
    1e1e:	14 c0       	rjmp	.+40     	; 0x1e48 <HLCD_voidSendCommand+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e20:	6b a1       	ldd	r22, Y+35	; 0x23
    1e22:	7c a1       	ldd	r23, Y+36	; 0x24
    1e24:	8d a1       	ldd	r24, Y+37	; 0x25
    1e26:	9e a1       	ldd	r25, Y+38	; 0x26
    1e28:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9a a3       	std	Y+34, r25	; 0x22
    1e32:	89 a3       	std	Y+33, r24	; 0x21
    1e34:	89 a1       	ldd	r24, Y+33	; 0x21
    1e36:	9a a1       	ldd	r25, Y+34	; 0x22
    1e38:	9e 8f       	std	Y+30, r25	; 0x1e
    1e3a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <HLCD_voidSendCommand+0x298>
    1e44:	9e 8f       	std	Y+30, r25	; 0x1e
    1e46:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	if(GET_BIT(Copy_u8Command, 0))
    1e48:	89 ad       	ldd	r24, Y+57	; 0x39
    1e4a:	88 2f       	mov	r24, r24
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	81 70       	andi	r24, 0x01	; 1
    1e50:	90 70       	andi	r25, 0x00	; 0
    1e52:	88 23       	and	r24, r24
    1e54:	31 f0       	breq	.+12     	; 0x1e62 <HLCD_voidSendCommand+0x2ba>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN4, DIO_HIGH);}
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	64 e0       	ldi	r22, 0x04	; 4
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    1e60:	05 c0       	rjmp	.+10     	; 0x1e6c <HLCD_voidSendCommand+0x2c4>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN4, DIO_LOW);}
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	64 e0       	ldi	r22, 0x04	; 4
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 1))
    1e6c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e6e:	86 95       	lsr	r24
    1e70:	88 2f       	mov	r24, r24
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	81 70       	andi	r24, 0x01	; 1
    1e76:	90 70       	andi	r25, 0x00	; 0
    1e78:	88 23       	and	r24, r24
    1e7a:	31 f0       	breq	.+12     	; 0x1e88 <HLCD_voidSendCommand+0x2e0>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN5, DIO_HIGH);}
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	65 e0       	ldi	r22, 0x05	; 5
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    1e86:	05 c0       	rjmp	.+10     	; 0x1e92 <HLCD_voidSendCommand+0x2ea>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN5, DIO_LOW);}
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	65 e0       	ldi	r22, 0x05	; 5
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 2))
    1e92:	89 ad       	ldd	r24, Y+57	; 0x39
    1e94:	86 95       	lsr	r24
    1e96:	86 95       	lsr	r24
    1e98:	88 2f       	mov	r24, r24
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	81 70       	andi	r24, 0x01	; 1
    1e9e:	90 70       	andi	r25, 0x00	; 0
    1ea0:	88 23       	and	r24, r24
    1ea2:	31 f0       	breq	.+12     	; 0x1eb0 <HLCD_voidSendCommand+0x308>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN6, DIO_HIGH);}
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	66 e0       	ldi	r22, 0x06	; 6
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    1eae:	05 c0       	rjmp	.+10     	; 0x1eba <HLCD_voidSendCommand+0x312>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN6, DIO_LOW);}
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	66 e0       	ldi	r22, 0x06	; 6
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 3))
    1eba:	89 ad       	ldd	r24, Y+57	; 0x39
    1ebc:	86 95       	lsr	r24
    1ebe:	86 95       	lsr	r24
    1ec0:	86 95       	lsr	r24
    1ec2:	88 2f       	mov	r24, r24
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	81 70       	andi	r24, 0x01	; 1
    1ec8:	90 70       	andi	r25, 0x00	; 0
    1eca:	88 23       	and	r24, r24
    1ecc:	31 f0       	breq	.+12     	; 0x1eda <HLCD_voidSendCommand+0x332>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN7, DIO_HIGH);}
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	67 e0       	ldi	r22, 0x07	; 7
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    1ed8:	05 c0       	rjmp	.+10     	; 0x1ee4 <HLCD_voidSendCommand+0x33c>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN7, DIO_LOW);}
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	67 e0       	ldi	r22, 0x07	; 7
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	/*set EN to make LCD Micro. read command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_HIGH);
    1ee4:	84 e0       	ldi	r24, 0x04	; 4
    1ee6:	62 e0       	ldi	r22, 0x02	; 2
    1ee8:	41 e0       	ldi	r20, 0x01	; 1
    1eea:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	a0 e8       	ldi	r26, 0x80	; 128
    1ef4:	bf e3       	ldi	r27, 0x3F	; 63
    1ef6:	89 8f       	std	Y+25, r24	; 0x19
    1ef8:	9a 8f       	std	Y+26, r25	; 0x1a
    1efa:	ab 8f       	std	Y+27, r26	; 0x1b
    1efc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efe:	69 8d       	ldd	r22, Y+25	; 0x19
    1f00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	4a ef       	ldi	r20, 0xFA	; 250
    1f0c:	54 e4       	ldi	r21, 0x44	; 68
    1f0e:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	8d 8b       	std	Y+21, r24	; 0x15
    1f18:	9e 8b       	std	Y+22, r25	; 0x16
    1f1a:	af 8b       	std	Y+23, r26	; 0x17
    1f1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f20:	7e 89       	ldd	r23, Y+22	; 0x16
    1f22:	8f 89       	ldd	r24, Y+23	; 0x17
    1f24:	98 8d       	ldd	r25, Y+24	; 0x18
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e8       	ldi	r20, 0x80	; 128
    1f2c:	5f e3       	ldi	r21, 0x3F	; 63
    1f2e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    1f32:	88 23       	and	r24, r24
    1f34:	2c f4       	brge	.+10     	; 0x1f40 <HLCD_voidSendCommand+0x398>
		__ticks = 1;
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	9c 8b       	std	Y+20, r25	; 0x14
    1f3c:	8b 8b       	std	Y+19, r24	; 0x13
    1f3e:	3f c0       	rjmp	.+126    	; 0x1fbe <HLCD_voidSendCommand+0x416>
	else if (__tmp > 65535)
    1f40:	6d 89       	ldd	r22, Y+21	; 0x15
    1f42:	7e 89       	ldd	r23, Y+22	; 0x16
    1f44:	8f 89       	ldd	r24, Y+23	; 0x17
    1f46:	98 8d       	ldd	r25, Y+24	; 0x18
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	3f ef       	ldi	r19, 0xFF	; 255
    1f4c:	4f e7       	ldi	r20, 0x7F	; 127
    1f4e:	57 e4       	ldi	r21, 0x47	; 71
    1f50:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    1f54:	18 16       	cp	r1, r24
    1f56:	4c f5       	brge	.+82     	; 0x1faa <HLCD_voidSendCommand+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f58:	69 8d       	ldd	r22, Y+25	; 0x19
    1f5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e2       	ldi	r20, 0x20	; 32
    1f66:	51 e4       	ldi	r21, 0x41	; 65
    1f68:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	bc 01       	movw	r22, r24
    1f72:	cd 01       	movw	r24, r26
    1f74:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	9c 8b       	std	Y+20, r25	; 0x14
    1f7e:	8b 8b       	std	Y+19, r24	; 0x13
    1f80:	0f c0       	rjmp	.+30     	; 0x1fa0 <HLCD_voidSendCommand+0x3f8>
    1f82:	88 ec       	ldi	r24, 0xC8	; 200
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	9a 8b       	std	Y+18, r25	; 0x12
    1f88:	89 8b       	std	Y+17, r24	; 0x11
    1f8a:	89 89       	ldd	r24, Y+17	; 0x11
    1f8c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	f1 f7       	brne	.-4      	; 0x1f8e <HLCD_voidSendCommand+0x3e6>
    1f92:	9a 8b       	std	Y+18, r25	; 0x12
    1f94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f96:	8b 89       	ldd	r24, Y+19	; 0x13
    1f98:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	9c 8b       	std	Y+20, r25	; 0x14
    1f9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	69 f7       	brne	.-38     	; 0x1f82 <HLCD_voidSendCommand+0x3da>
    1fa8:	14 c0       	rjmp	.+40     	; 0x1fd2 <HLCD_voidSendCommand+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1faa:	6d 89       	ldd	r22, Y+21	; 0x15
    1fac:	7e 89       	ldd	r23, Y+22	; 0x16
    1fae:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb2:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	9c 8b       	std	Y+20, r25	; 0x14
    1fbc:	8b 8b       	std	Y+19, r24	; 0x13
    1fbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc2:	98 8b       	std	Y+16, r25	; 0x10
    1fc4:	8f 87       	std	Y+15, r24	; 0x0f
    1fc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc8:	98 89       	ldd	r25, Y+16	; 0x10
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <HLCD_voidSendCommand+0x422>
    1fce:	98 8b       	std	Y+16, r25	; 0x10
    1fd0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_LOW);
    1fd2:	84 e0       	ldi	r24, 0x04	; 4
    1fd4:	62 e0       	ldi	r22, 0x02	; 2
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	a0 e0       	ldi	r26, 0x00	; 0
    1fe2:	b0 e4       	ldi	r27, 0x40	; 64
    1fe4:	8b 87       	std	Y+11, r24	; 0x0b
    1fe6:	9c 87       	std	Y+12, r25	; 0x0c
    1fe8:	ad 87       	std	Y+13, r26	; 0x0d
    1fea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	4a ef       	ldi	r20, 0xFA	; 250
    1ffa:	54 e4       	ldi	r21, 0x44	; 68
    1ffc:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	8f 83       	std	Y+7, r24	; 0x07
    2006:	98 87       	std	Y+8, r25	; 0x08
    2008:	a9 87       	std	Y+9, r26	; 0x09
    200a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    200c:	6f 81       	ldd	r22, Y+7	; 0x07
    200e:	78 85       	ldd	r23, Y+8	; 0x08
    2010:	89 85       	ldd	r24, Y+9	; 0x09
    2012:	9a 85       	ldd	r25, Y+10	; 0x0a
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e8       	ldi	r20, 0x80	; 128
    201a:	5f e3       	ldi	r21, 0x3F	; 63
    201c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    2020:	88 23       	and	r24, r24
    2022:	2c f4       	brge	.+10     	; 0x202e <HLCD_voidSendCommand+0x486>
		__ticks = 1;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	9e 83       	std	Y+6, r25	; 0x06
    202a:	8d 83       	std	Y+5, r24	; 0x05
    202c:	3f c0       	rjmp	.+126    	; 0x20ac <HLCD_voidSendCommand+0x504>
	else if (__tmp > 65535)
    202e:	6f 81       	ldd	r22, Y+7	; 0x07
    2030:	78 85       	ldd	r23, Y+8	; 0x08
    2032:	89 85       	ldd	r24, Y+9	; 0x09
    2034:	9a 85       	ldd	r25, Y+10	; 0x0a
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	3f ef       	ldi	r19, 0xFF	; 255
    203a:	4f e7       	ldi	r20, 0x7F	; 127
    203c:	57 e4       	ldi	r21, 0x47	; 71
    203e:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    2042:	18 16       	cp	r1, r24
    2044:	4c f5       	brge	.+82     	; 0x2098 <HLCD_voidSendCommand+0x4f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2046:	6b 85       	ldd	r22, Y+11	; 0x0b
    2048:	7c 85       	ldd	r23, Y+12	; 0x0c
    204a:	8d 85       	ldd	r24, Y+13	; 0x0d
    204c:	9e 85       	ldd	r25, Y+14	; 0x0e
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e2       	ldi	r20, 0x20	; 32
    2054:	51 e4       	ldi	r21, 0x41	; 65
    2056:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	bc 01       	movw	r22, r24
    2060:	cd 01       	movw	r24, r26
    2062:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	8d 83       	std	Y+5, r24	; 0x05
    206e:	0f c0       	rjmp	.+30     	; 0x208e <HLCD_voidSendCommand+0x4e6>
    2070:	88 ec       	ldi	r24, 0xC8	; 200
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	9c 83       	std	Y+4, r25	; 0x04
    2076:	8b 83       	std	Y+3, r24	; 0x03
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	9c 81       	ldd	r25, Y+4	; 0x04
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <HLCD_voidSendCommand+0x4d4>
    2080:	9c 83       	std	Y+4, r25	; 0x04
    2082:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2084:	8d 81       	ldd	r24, Y+5	; 0x05
    2086:	9e 81       	ldd	r25, Y+6	; 0x06
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
    2090:	9e 81       	ldd	r25, Y+6	; 0x06
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	69 f7       	brne	.-38     	; 0x2070 <HLCD_voidSendCommand+0x4c8>
    2096:	14 c0       	rjmp	.+40     	; 0x20c0 <HLCD_voidSendCommand+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2098:	6f 81       	ldd	r22, Y+7	; 0x07
    209a:	78 85       	ldd	r23, Y+8	; 0x08
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a0:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	9e 83       	std	Y+6, r25	; 0x06
    20aa:	8d 83       	std	Y+5, r24	; 0x05
    20ac:	8d 81       	ldd	r24, Y+5	; 0x05
    20ae:	9e 81       	ldd	r25, Y+6	; 0x06
    20b0:	9a 83       	std	Y+2, r25	; 0x02
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	9a 81       	ldd	r25, Y+2	; 0x02
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <HLCD_voidSendCommand+0x510>
    20bc:	9a 83       	std	Y+2, r25	; 0x02
    20be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    20c0:	e9 96       	adiw	r28, 0x39	; 57
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <HLCD_voidsendData>:

void HLCD_voidsendData(u8 Copy_u8Data)
{
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	e9 97       	sbiw	r28, 0x39	; 57
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
    20e6:	89 af       	std	Y+57, r24	; 0x39
	/*set RS pin to send command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_RS,DIO_HIGH);
    20e8:	84 e0       	ldi	r24, 0x04	; 4
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	/*clear the RW pin to write*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_RW,DIO_LOW);
    20f2:	84 e0       	ldi	r24, 0x04	; 4
    20f4:	61 e0       	ldi	r22, 0x01	; 1
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	/*send data*/
	if(GET_BIT(Copy_u8Data, 4))
    20fc:	89 ad       	ldd	r24, Y+57	; 0x39
    20fe:	82 95       	swap	r24
    2100:	8f 70       	andi	r24, 0x0F	; 15
    2102:	88 2f       	mov	r24, r24
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	81 70       	andi	r24, 0x01	; 1
    2108:	90 70       	andi	r25, 0x00	; 0
    210a:	88 23       	and	r24, r24
    210c:	31 f0       	breq	.+12     	; 0x211a <HLCD_voidsendData+0x48>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN4, DIO_HIGH);}
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	64 e0       	ldi	r22, 0x04	; 4
    2112:	41 e0       	ldi	r20, 0x01	; 1
    2114:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    2118:	05 c0       	rjmp	.+10     	; 0x2124 <HLCD_voidsendData+0x52>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN4, DIO_LOW);}
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	64 e0       	ldi	r22, 0x04	; 4
    211e:	40 e0       	ldi	r20, 0x00	; 0
    2120:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 5))
    2124:	89 ad       	ldd	r24, Y+57	; 0x39
    2126:	82 95       	swap	r24
    2128:	86 95       	lsr	r24
    212a:	87 70       	andi	r24, 0x07	; 7
    212c:	88 2f       	mov	r24, r24
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	81 70       	andi	r24, 0x01	; 1
    2132:	90 70       	andi	r25, 0x00	; 0
    2134:	88 23       	and	r24, r24
    2136:	31 f0       	breq	.+12     	; 0x2144 <HLCD_voidsendData+0x72>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN5, DIO_HIGH);}
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	65 e0       	ldi	r22, 0x05	; 5
    213c:	41 e0       	ldi	r20, 0x01	; 1
    213e:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    2142:	05 c0       	rjmp	.+10     	; 0x214e <HLCD_voidsendData+0x7c>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN5, DIO_LOW);}
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	65 e0       	ldi	r22, 0x05	; 5
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 6))
    214e:	89 ad       	ldd	r24, Y+57	; 0x39
    2150:	82 95       	swap	r24
    2152:	86 95       	lsr	r24
    2154:	86 95       	lsr	r24
    2156:	83 70       	andi	r24, 0x03	; 3
    2158:	88 2f       	mov	r24, r24
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	81 70       	andi	r24, 0x01	; 1
    215e:	90 70       	andi	r25, 0x00	; 0
    2160:	88 23       	and	r24, r24
    2162:	31 f0       	breq	.+12     	; 0x2170 <HLCD_voidsendData+0x9e>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN6, DIO_HIGH);}
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	66 e0       	ldi	r22, 0x06	; 6
    2168:	41 e0       	ldi	r20, 0x01	; 1
    216a:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    216e:	05 c0       	rjmp	.+10     	; 0x217a <HLCD_voidsendData+0xa8>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN6, DIO_LOW);}
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	66 e0       	ldi	r22, 0x06	; 6
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 7))
    217a:	89 ad       	ldd	r24, Y+57	; 0x39
    217c:	88 23       	and	r24, r24
    217e:	34 f4       	brge	.+12     	; 0x218c <HLCD_voidsendData+0xba>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN7, DIO_HIGH);}
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	67 e0       	ldi	r22, 0x07	; 7
    2184:	41 e0       	ldi	r20, 0x01	; 1
    2186:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    218a:	05 c0       	rjmp	.+10     	; 0x2196 <HLCD_voidsendData+0xc4>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN7, DIO_LOW);}
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	67 e0       	ldi	r22, 0x07	; 7
    2190:	40 e0       	ldi	r20, 0x00	; 0
    2192:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	/*set EN to make LCD Micro. read command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_HIGH);
    2196:	84 e0       	ldi	r24, 0x04	; 4
    2198:	62 e0       	ldi	r22, 0x02	; 2
    219a:	41 e0       	ldi	r20, 0x01	; 1
    219c:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	a0 e8       	ldi	r26, 0x80	; 128
    21a6:	bf e3       	ldi	r27, 0x3F	; 63
    21a8:	8d ab       	std	Y+53, r24	; 0x35
    21aa:	9e ab       	std	Y+54, r25	; 0x36
    21ac:	af ab       	std	Y+55, r26	; 0x37
    21ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b0:	6d a9       	ldd	r22, Y+53	; 0x35
    21b2:	7e a9       	ldd	r23, Y+54	; 0x36
    21b4:	8f a9       	ldd	r24, Y+55	; 0x37
    21b6:	98 ad       	ldd	r25, Y+56	; 0x38
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	4a ef       	ldi	r20, 0xFA	; 250
    21be:	54 e4       	ldi	r21, 0x44	; 68
    21c0:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	89 ab       	std	Y+49, r24	; 0x31
    21ca:	9a ab       	std	Y+50, r25	; 0x32
    21cc:	ab ab       	std	Y+51, r26	; 0x33
    21ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21d0:	69 a9       	ldd	r22, Y+49	; 0x31
    21d2:	7a a9       	ldd	r23, Y+50	; 0x32
    21d4:	8b a9       	ldd	r24, Y+51	; 0x33
    21d6:	9c a9       	ldd	r25, Y+52	; 0x34
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e8       	ldi	r20, 0x80	; 128
    21de:	5f e3       	ldi	r21, 0x3F	; 63
    21e0:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    21e4:	88 23       	and	r24, r24
    21e6:	2c f4       	brge	.+10     	; 0x21f2 <HLCD_voidsendData+0x120>
		__ticks = 1;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	98 ab       	std	Y+48, r25	; 0x30
    21ee:	8f a7       	std	Y+47, r24	; 0x2f
    21f0:	3f c0       	rjmp	.+126    	; 0x2270 <HLCD_voidsendData+0x19e>
	else if (__tmp > 65535)
    21f2:	69 a9       	ldd	r22, Y+49	; 0x31
    21f4:	7a a9       	ldd	r23, Y+50	; 0x32
    21f6:	8b a9       	ldd	r24, Y+51	; 0x33
    21f8:	9c a9       	ldd	r25, Y+52	; 0x34
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	3f ef       	ldi	r19, 0xFF	; 255
    21fe:	4f e7       	ldi	r20, 0x7F	; 127
    2200:	57 e4       	ldi	r21, 0x47	; 71
    2202:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    2206:	18 16       	cp	r1, r24
    2208:	4c f5       	brge	.+82     	; 0x225c <HLCD_voidsendData+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220a:	6d a9       	ldd	r22, Y+53	; 0x35
    220c:	7e a9       	ldd	r23, Y+54	; 0x36
    220e:	8f a9       	ldd	r24, Y+55	; 0x37
    2210:	98 ad       	ldd	r25, Y+56	; 0x38
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e2       	ldi	r20, 0x20	; 32
    2218:	51 e4       	ldi	r21, 0x41	; 65
    221a:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	bc 01       	movw	r22, r24
    2224:	cd 01       	movw	r24, r26
    2226:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	98 ab       	std	Y+48, r25	; 0x30
    2230:	8f a7       	std	Y+47, r24	; 0x2f
    2232:	0f c0       	rjmp	.+30     	; 0x2252 <HLCD_voidsendData+0x180>
    2234:	88 ec       	ldi	r24, 0xC8	; 200
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	9e a7       	std	Y+46, r25	; 0x2e
    223a:	8d a7       	std	Y+45, r24	; 0x2d
    223c:	8d a5       	ldd	r24, Y+45	; 0x2d
    223e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <HLCD_voidsendData+0x16e>
    2244:	9e a7       	std	Y+46, r25	; 0x2e
    2246:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2248:	8f a5       	ldd	r24, Y+47	; 0x2f
    224a:	98 a9       	ldd	r25, Y+48	; 0x30
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	98 ab       	std	Y+48, r25	; 0x30
    2250:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2252:	8f a5       	ldd	r24, Y+47	; 0x2f
    2254:	98 a9       	ldd	r25, Y+48	; 0x30
    2256:	00 97       	sbiw	r24, 0x00	; 0
    2258:	69 f7       	brne	.-38     	; 0x2234 <HLCD_voidsendData+0x162>
    225a:	14 c0       	rjmp	.+40     	; 0x2284 <HLCD_voidsendData+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225c:	69 a9       	ldd	r22, Y+49	; 0x31
    225e:	7a a9       	ldd	r23, Y+50	; 0x32
    2260:	8b a9       	ldd	r24, Y+51	; 0x33
    2262:	9c a9       	ldd	r25, Y+52	; 0x34
    2264:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	98 ab       	std	Y+48, r25	; 0x30
    226e:	8f a7       	std	Y+47, r24	; 0x2f
    2270:	8f a5       	ldd	r24, Y+47	; 0x2f
    2272:	98 a9       	ldd	r25, Y+48	; 0x30
    2274:	9c a7       	std	Y+44, r25	; 0x2c
    2276:	8b a7       	std	Y+43, r24	; 0x2b
    2278:	8b a5       	ldd	r24, Y+43	; 0x2b
    227a:	9c a5       	ldd	r25, Y+44	; 0x2c
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <HLCD_voidsendData+0x1aa>
    2280:	9c a7       	std	Y+44, r25	; 0x2c
    2282:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_LOW);
    2284:	84 e0       	ldi	r24, 0x04	; 4
    2286:	62 e0       	ldi	r22, 0x02	; 2
    2288:	40 e0       	ldi	r20, 0x00	; 0
    228a:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	a0 e0       	ldi	r26, 0x00	; 0
    2294:	b0 e4       	ldi	r27, 0x40	; 64
    2296:	8f a3       	std	Y+39, r24	; 0x27
    2298:	98 a7       	std	Y+40, r25	; 0x28
    229a:	a9 a7       	std	Y+41, r26	; 0x29
    229c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229e:	6f a1       	ldd	r22, Y+39	; 0x27
    22a0:	78 a5       	ldd	r23, Y+40	; 0x28
    22a2:	89 a5       	ldd	r24, Y+41	; 0x29
    22a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	4a ef       	ldi	r20, 0xFA	; 250
    22ac:	54 e4       	ldi	r21, 0x44	; 68
    22ae:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	8b a3       	std	Y+35, r24	; 0x23
    22b8:	9c a3       	std	Y+36, r25	; 0x24
    22ba:	ad a3       	std	Y+37, r26	; 0x25
    22bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22be:	6b a1       	ldd	r22, Y+35	; 0x23
    22c0:	7c a1       	ldd	r23, Y+36	; 0x24
    22c2:	8d a1       	ldd	r24, Y+37	; 0x25
    22c4:	9e a1       	ldd	r25, Y+38	; 0x26
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e8       	ldi	r20, 0x80	; 128
    22cc:	5f e3       	ldi	r21, 0x3F	; 63
    22ce:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    22d2:	88 23       	and	r24, r24
    22d4:	2c f4       	brge	.+10     	; 0x22e0 <HLCD_voidsendData+0x20e>
		__ticks = 1;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9a a3       	std	Y+34, r25	; 0x22
    22dc:	89 a3       	std	Y+33, r24	; 0x21
    22de:	3f c0       	rjmp	.+126    	; 0x235e <HLCD_voidsendData+0x28c>
	else if (__tmp > 65535)
    22e0:	6b a1       	ldd	r22, Y+35	; 0x23
    22e2:	7c a1       	ldd	r23, Y+36	; 0x24
    22e4:	8d a1       	ldd	r24, Y+37	; 0x25
    22e6:	9e a1       	ldd	r25, Y+38	; 0x26
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	3f ef       	ldi	r19, 0xFF	; 255
    22ec:	4f e7       	ldi	r20, 0x7F	; 127
    22ee:	57 e4       	ldi	r21, 0x47	; 71
    22f0:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    22f4:	18 16       	cp	r1, r24
    22f6:	4c f5       	brge	.+82     	; 0x234a <HLCD_voidsendData+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f8:	6f a1       	ldd	r22, Y+39	; 0x27
    22fa:	78 a5       	ldd	r23, Y+40	; 0x28
    22fc:	89 a5       	ldd	r24, Y+41	; 0x29
    22fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e2       	ldi	r20, 0x20	; 32
    2306:	51 e4       	ldi	r21, 0x41	; 65
    2308:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	bc 01       	movw	r22, r24
    2312:	cd 01       	movw	r24, r26
    2314:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	9a a3       	std	Y+34, r25	; 0x22
    231e:	89 a3       	std	Y+33, r24	; 0x21
    2320:	0f c0       	rjmp	.+30     	; 0x2340 <HLCD_voidsendData+0x26e>
    2322:	88 ec       	ldi	r24, 0xC8	; 200
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	98 a3       	std	Y+32, r25	; 0x20
    2328:	8f 8f       	std	Y+31, r24	; 0x1f
    232a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    232c:	98 a1       	ldd	r25, Y+32	; 0x20
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <HLCD_voidsendData+0x25c>
    2332:	98 a3       	std	Y+32, r25	; 0x20
    2334:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2336:	89 a1       	ldd	r24, Y+33	; 0x21
    2338:	9a a1       	ldd	r25, Y+34	; 0x22
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	9a a3       	std	Y+34, r25	; 0x22
    233e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2340:	89 a1       	ldd	r24, Y+33	; 0x21
    2342:	9a a1       	ldd	r25, Y+34	; 0x22
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	69 f7       	brne	.-38     	; 0x2322 <HLCD_voidsendData+0x250>
    2348:	14 c0       	rjmp	.+40     	; 0x2372 <HLCD_voidsendData+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234a:	6b a1       	ldd	r22, Y+35	; 0x23
    234c:	7c a1       	ldd	r23, Y+36	; 0x24
    234e:	8d a1       	ldd	r24, Y+37	; 0x25
    2350:	9e a1       	ldd	r25, Y+38	; 0x26
    2352:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9a a3       	std	Y+34, r25	; 0x22
    235c:	89 a3       	std	Y+33, r24	; 0x21
    235e:	89 a1       	ldd	r24, Y+33	; 0x21
    2360:	9a a1       	ldd	r25, Y+34	; 0x22
    2362:	9e 8f       	std	Y+30, r25	; 0x1e
    2364:	8d 8f       	std	Y+29, r24	; 0x1d
    2366:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2368:	9e 8d       	ldd	r25, Y+30	; 0x1e
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <HLCD_voidsendData+0x298>
    236e:	9e 8f       	std	Y+30, r25	; 0x1e
    2370:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	if(GET_BIT(Copy_u8Data, 0))
    2372:	89 ad       	ldd	r24, Y+57	; 0x39
    2374:	88 2f       	mov	r24, r24
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	81 70       	andi	r24, 0x01	; 1
    237a:	90 70       	andi	r25, 0x00	; 0
    237c:	88 23       	and	r24, r24
    237e:	31 f0       	breq	.+12     	; 0x238c <HLCD_voidsendData+0x2ba>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN4, DIO_HIGH);}
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	64 e0       	ldi	r22, 0x04	; 4
    2384:	41 e0       	ldi	r20, 0x01	; 1
    2386:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    238a:	05 c0       	rjmp	.+10     	; 0x2396 <HLCD_voidsendData+0x2c4>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN4, DIO_LOW);}
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	64 e0       	ldi	r22, 0x04	; 4
    2390:	40 e0       	ldi	r20, 0x00	; 0
    2392:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 1))
    2396:	89 ad       	ldd	r24, Y+57	; 0x39
    2398:	86 95       	lsr	r24
    239a:	88 2f       	mov	r24, r24
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	81 70       	andi	r24, 0x01	; 1
    23a0:	90 70       	andi	r25, 0x00	; 0
    23a2:	88 23       	and	r24, r24
    23a4:	31 f0       	breq	.+12     	; 0x23b2 <HLCD_voidsendData+0x2e0>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN5, DIO_HIGH);}
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	65 e0       	ldi	r22, 0x05	; 5
    23aa:	41 e0       	ldi	r20, 0x01	; 1
    23ac:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    23b0:	05 c0       	rjmp	.+10     	; 0x23bc <HLCD_voidsendData+0x2ea>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN5, DIO_LOW);}
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	65 e0       	ldi	r22, 0x05	; 5
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 2))
    23bc:	89 ad       	ldd	r24, Y+57	; 0x39
    23be:	86 95       	lsr	r24
    23c0:	86 95       	lsr	r24
    23c2:	88 2f       	mov	r24, r24
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	81 70       	andi	r24, 0x01	; 1
    23c8:	90 70       	andi	r25, 0x00	; 0
    23ca:	88 23       	and	r24, r24
    23cc:	31 f0       	breq	.+12     	; 0x23da <HLCD_voidsendData+0x308>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN6, DIO_HIGH);}
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	66 e0       	ldi	r22, 0x06	; 6
    23d2:	41 e0       	ldi	r20, 0x01	; 1
    23d4:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    23d8:	05 c0       	rjmp	.+10     	; 0x23e4 <HLCD_voidsendData+0x312>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN6, DIO_LOW);}
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	66 e0       	ldi	r22, 0x06	; 6
    23de:	40 e0       	ldi	r20, 0x00	; 0
    23e0:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 3))
    23e4:	89 ad       	ldd	r24, Y+57	; 0x39
    23e6:	86 95       	lsr	r24
    23e8:	86 95       	lsr	r24
    23ea:	86 95       	lsr	r24
    23ec:	88 2f       	mov	r24, r24
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	81 70       	andi	r24, 0x01	; 1
    23f2:	90 70       	andi	r25, 0x00	; 0
    23f4:	88 23       	and	r24, r24
    23f6:	31 f0       	breq	.+12     	; 0x2404 <HLCD_voidsendData+0x332>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN7, DIO_HIGH);}
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	67 e0       	ldi	r22, 0x07	; 7
    23fc:	41 e0       	ldi	r20, 0x01	; 1
    23fe:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    2402:	05 c0       	rjmp	.+10     	; 0x240e <HLCD_voidsendData+0x33c>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN7, DIO_LOW);}
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	67 e0       	ldi	r22, 0x07	; 7
    2408:	40 e0       	ldi	r20, 0x00	; 0
    240a:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
	/*set EN to make LCD Micro. read command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_HIGH);
    240e:	84 e0       	ldi	r24, 0x04	; 4
    2410:	62 e0       	ldi	r22, 0x02	; 2
    2412:	41 e0       	ldi	r20, 0x01	; 1
    2414:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	a0 e8       	ldi	r26, 0x80	; 128
    241e:	bf e3       	ldi	r27, 0x3F	; 63
    2420:	89 8f       	std	Y+25, r24	; 0x19
    2422:	9a 8f       	std	Y+26, r25	; 0x1a
    2424:	ab 8f       	std	Y+27, r26	; 0x1b
    2426:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2428:	69 8d       	ldd	r22, Y+25	; 0x19
    242a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    242c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    242e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	4a ef       	ldi	r20, 0xFA	; 250
    2436:	54 e4       	ldi	r21, 0x44	; 68
    2438:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	8d 8b       	std	Y+21, r24	; 0x15
    2442:	9e 8b       	std	Y+22, r25	; 0x16
    2444:	af 8b       	std	Y+23, r26	; 0x17
    2446:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2448:	6d 89       	ldd	r22, Y+21	; 0x15
    244a:	7e 89       	ldd	r23, Y+22	; 0x16
    244c:	8f 89       	ldd	r24, Y+23	; 0x17
    244e:	98 8d       	ldd	r25, Y+24	; 0x18
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e8       	ldi	r20, 0x80	; 128
    2456:	5f e3       	ldi	r21, 0x3F	; 63
    2458:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    245c:	88 23       	and	r24, r24
    245e:	2c f4       	brge	.+10     	; 0x246a <HLCD_voidsendData+0x398>
		__ticks = 1;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	9c 8b       	std	Y+20, r25	; 0x14
    2466:	8b 8b       	std	Y+19, r24	; 0x13
    2468:	3f c0       	rjmp	.+126    	; 0x24e8 <HLCD_voidsendData+0x416>
	else if (__tmp > 65535)
    246a:	6d 89       	ldd	r22, Y+21	; 0x15
    246c:	7e 89       	ldd	r23, Y+22	; 0x16
    246e:	8f 89       	ldd	r24, Y+23	; 0x17
    2470:	98 8d       	ldd	r25, Y+24	; 0x18
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	3f ef       	ldi	r19, 0xFF	; 255
    2476:	4f e7       	ldi	r20, 0x7F	; 127
    2478:	57 e4       	ldi	r21, 0x47	; 71
    247a:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    247e:	18 16       	cp	r1, r24
    2480:	4c f5       	brge	.+82     	; 0x24d4 <HLCD_voidsendData+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2482:	69 8d       	ldd	r22, Y+25	; 0x19
    2484:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2486:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2488:	9c 8d       	ldd	r25, Y+28	; 0x1c
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e2       	ldi	r20, 0x20	; 32
    2490:	51 e4       	ldi	r21, 0x41	; 65
    2492:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	9c 8b       	std	Y+20, r25	; 0x14
    24a8:	8b 8b       	std	Y+19, r24	; 0x13
    24aa:	0f c0       	rjmp	.+30     	; 0x24ca <HLCD_voidsendData+0x3f8>
    24ac:	88 ec       	ldi	r24, 0xC8	; 200
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9a 8b       	std	Y+18, r25	; 0x12
    24b2:	89 8b       	std	Y+17, r24	; 0x11
    24b4:	89 89       	ldd	r24, Y+17	; 0x11
    24b6:	9a 89       	ldd	r25, Y+18	; 0x12
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <HLCD_voidsendData+0x3e6>
    24bc:	9a 8b       	std	Y+18, r25	; 0x12
    24be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c0:	8b 89       	ldd	r24, Y+19	; 0x13
    24c2:	9c 89       	ldd	r25, Y+20	; 0x14
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	9c 8b       	std	Y+20, r25	; 0x14
    24c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ca:	8b 89       	ldd	r24, Y+19	; 0x13
    24cc:	9c 89       	ldd	r25, Y+20	; 0x14
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	69 f7       	brne	.-38     	; 0x24ac <HLCD_voidsendData+0x3da>
    24d2:	14 c0       	rjmp	.+40     	; 0x24fc <HLCD_voidsendData+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d4:	6d 89       	ldd	r22, Y+21	; 0x15
    24d6:	7e 89       	ldd	r23, Y+22	; 0x16
    24d8:	8f 89       	ldd	r24, Y+23	; 0x17
    24da:	98 8d       	ldd	r25, Y+24	; 0x18
    24dc:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	9c 8b       	std	Y+20, r25	; 0x14
    24e6:	8b 8b       	std	Y+19, r24	; 0x13
    24e8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ea:	9c 89       	ldd	r25, Y+20	; 0x14
    24ec:	98 8b       	std	Y+16, r25	; 0x10
    24ee:	8f 87       	std	Y+15, r24	; 0x0f
    24f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f2:	98 89       	ldd	r25, Y+16	; 0x10
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <HLCD_voidsendData+0x422>
    24f8:	98 8b       	std	Y+16, r25	; 0x10
    24fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_LOW);
    24fc:	84 e0       	ldi	r24, 0x04	; 4
    24fe:	62 e0       	ldi	r22, 0x02	; 2
    2500:	40 e0       	ldi	r20, 0x00	; 0
    2502:	0e 94 44 0a 	call	0x1488	; 0x1488 <MDIO_SetPinValue>
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	a0 e0       	ldi	r26, 0x00	; 0
    250c:	b0 e4       	ldi	r27, 0x40	; 64
    250e:	8b 87       	std	Y+11, r24	; 0x0b
    2510:	9c 87       	std	Y+12, r25	; 0x0c
    2512:	ad 87       	std	Y+13, r26	; 0x0d
    2514:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2516:	6b 85       	ldd	r22, Y+11	; 0x0b
    2518:	7c 85       	ldd	r23, Y+12	; 0x0c
    251a:	8d 85       	ldd	r24, Y+13	; 0x0d
    251c:	9e 85       	ldd	r25, Y+14	; 0x0e
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	4a ef       	ldi	r20, 0xFA	; 250
    2524:	54 e4       	ldi	r21, 0x44	; 68
    2526:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	8f 83       	std	Y+7, r24	; 0x07
    2530:	98 87       	std	Y+8, r25	; 0x08
    2532:	a9 87       	std	Y+9, r26	; 0x09
    2534:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2536:	6f 81       	ldd	r22, Y+7	; 0x07
    2538:	78 85       	ldd	r23, Y+8	; 0x08
    253a:	89 85       	ldd	r24, Y+9	; 0x09
    253c:	9a 85       	ldd	r25, Y+10	; 0x0a
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e8       	ldi	r20, 0x80	; 128
    2544:	5f e3       	ldi	r21, 0x3F	; 63
    2546:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    254a:	88 23       	and	r24, r24
    254c:	2c f4       	brge	.+10     	; 0x2558 <HLCD_voidsendData+0x486>
		__ticks = 1;
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9e 83       	std	Y+6, r25	; 0x06
    2554:	8d 83       	std	Y+5, r24	; 0x05
    2556:	3f c0       	rjmp	.+126    	; 0x25d6 <HLCD_voidsendData+0x504>
	else if (__tmp > 65535)
    2558:	6f 81       	ldd	r22, Y+7	; 0x07
    255a:	78 85       	ldd	r23, Y+8	; 0x08
    255c:	89 85       	ldd	r24, Y+9	; 0x09
    255e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	3f ef       	ldi	r19, 0xFF	; 255
    2564:	4f e7       	ldi	r20, 0x7F	; 127
    2566:	57 e4       	ldi	r21, 0x47	; 71
    2568:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    256c:	18 16       	cp	r1, r24
    256e:	4c f5       	brge	.+82     	; 0x25c2 <HLCD_voidsendData+0x4f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2570:	6b 85       	ldd	r22, Y+11	; 0x0b
    2572:	7c 85       	ldd	r23, Y+12	; 0x0c
    2574:	8d 85       	ldd	r24, Y+13	; 0x0d
    2576:	9e 85       	ldd	r25, Y+14	; 0x0e
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e2       	ldi	r20, 0x20	; 32
    257e:	51 e4       	ldi	r21, 0x41	; 65
    2580:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	bc 01       	movw	r22, r24
    258a:	cd 01       	movw	r24, r26
    258c:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9e 83       	std	Y+6, r25	; 0x06
    2596:	8d 83       	std	Y+5, r24	; 0x05
    2598:	0f c0       	rjmp	.+30     	; 0x25b8 <HLCD_voidsendData+0x4e6>
    259a:	88 ec       	ldi	r24, 0xC8	; 200
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	9c 83       	std	Y+4, r25	; 0x04
    25a0:	8b 83       	std	Y+3, r24	; 0x03
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	9c 81       	ldd	r25, Y+4	; 0x04
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <HLCD_voidsendData+0x4d4>
    25aa:	9c 83       	std	Y+4, r25	; 0x04
    25ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ae:	8d 81       	ldd	r24, Y+5	; 0x05
    25b0:	9e 81       	ldd	r25, Y+6	; 0x06
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	9e 83       	std	Y+6, r25	; 0x06
    25b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ba:	9e 81       	ldd	r25, Y+6	; 0x06
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	69 f7       	brne	.-38     	; 0x259a <HLCD_voidsendData+0x4c8>
    25c0:	14 c0       	rjmp	.+40     	; 0x25ea <HLCD_voidsendData+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c2:	6f 81       	ldd	r22, Y+7	; 0x07
    25c4:	78 85       	ldd	r23, Y+8	; 0x08
    25c6:	89 85       	ldd	r24, Y+9	; 0x09
    25c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ca:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	9e 83       	std	Y+6, r25	; 0x06
    25d4:	8d 83       	std	Y+5, r24	; 0x05
    25d6:	8d 81       	ldd	r24, Y+5	; 0x05
    25d8:	9e 81       	ldd	r25, Y+6	; 0x06
    25da:	9a 83       	std	Y+2, r25	; 0x02
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	9a 81       	ldd	r25, Y+2	; 0x02
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <HLCD_voidsendData+0x510>
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    25ea:	e9 96       	adiw	r28, 0x39	; 57
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <HLCD_voidinit>:

void HLCD_voidinit()
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	2e 97       	sbiw	r28, 0x0e	; 14
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	a0 e2       	ldi	r26, 0x20	; 32
    2616:	b2 e4       	ldi	r27, 0x42	; 66
    2618:	8b 87       	std	Y+11, r24	; 0x0b
    261a:	9c 87       	std	Y+12, r25	; 0x0c
    261c:	ad 87       	std	Y+13, r26	; 0x0d
    261e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2620:	6b 85       	ldd	r22, Y+11	; 0x0b
    2622:	7c 85       	ldd	r23, Y+12	; 0x0c
    2624:	8d 85       	ldd	r24, Y+13	; 0x0d
    2626:	9e 85       	ldd	r25, Y+14	; 0x0e
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	4a ef       	ldi	r20, 0xFA	; 250
    262e:	54 e4       	ldi	r21, 0x44	; 68
    2630:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	8f 83       	std	Y+7, r24	; 0x07
    263a:	98 87       	std	Y+8, r25	; 0x08
    263c:	a9 87       	std	Y+9, r26	; 0x09
    263e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2640:	6f 81       	ldd	r22, Y+7	; 0x07
    2642:	78 85       	ldd	r23, Y+8	; 0x08
    2644:	89 85       	ldd	r24, Y+9	; 0x09
    2646:	9a 85       	ldd	r25, Y+10	; 0x0a
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e8       	ldi	r20, 0x80	; 128
    264e:	5f e3       	ldi	r21, 0x3F	; 63
    2650:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    2654:	88 23       	and	r24, r24
    2656:	2c f4       	brge	.+10     	; 0x2662 <HLCD_voidinit+0x66>
		__ticks = 1;
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	9e 83       	std	Y+6, r25	; 0x06
    265e:	8d 83       	std	Y+5, r24	; 0x05
    2660:	3f c0       	rjmp	.+126    	; 0x26e0 <HLCD_voidinit+0xe4>
	else if (__tmp > 65535)
    2662:	6f 81       	ldd	r22, Y+7	; 0x07
    2664:	78 85       	ldd	r23, Y+8	; 0x08
    2666:	89 85       	ldd	r24, Y+9	; 0x09
    2668:	9a 85       	ldd	r25, Y+10	; 0x0a
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	3f ef       	ldi	r19, 0xFF	; 255
    266e:	4f e7       	ldi	r20, 0x7F	; 127
    2670:	57 e4       	ldi	r21, 0x47	; 71
    2672:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    2676:	18 16       	cp	r1, r24
    2678:	4c f5       	brge	.+82     	; 0x26cc <HLCD_voidinit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267a:	6b 85       	ldd	r22, Y+11	; 0x0b
    267c:	7c 85       	ldd	r23, Y+12	; 0x0c
    267e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2680:	9e 85       	ldd	r25, Y+14	; 0x0e
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e2       	ldi	r20, 0x20	; 32
    2688:	51 e4       	ldi	r21, 0x41	; 65
    268a:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
    26a2:	0f c0       	rjmp	.+30     	; 0x26c2 <HLCD_voidinit+0xc6>
    26a4:	88 ec       	ldi	r24, 0xC8	; 200
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	9c 83       	std	Y+4, r25	; 0x04
    26aa:	8b 83       	std	Y+3, r24	; 0x03
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	9c 81       	ldd	r25, Y+4	; 0x04
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	f1 f7       	brne	.-4      	; 0x26b0 <HLCD_voidinit+0xb4>
    26b4:	9c 83       	std	Y+4, r25	; 0x04
    26b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ba:	9e 81       	ldd	r25, Y+6	; 0x06
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	9e 83       	std	Y+6, r25	; 0x06
    26c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c2:	8d 81       	ldd	r24, Y+5	; 0x05
    26c4:	9e 81       	ldd	r25, Y+6	; 0x06
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	69 f7       	brne	.-38     	; 0x26a4 <HLCD_voidinit+0xa8>
    26ca:	14 c0       	rjmp	.+40     	; 0x26f4 <HLCD_voidinit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26cc:	6f 81       	ldd	r22, Y+7	; 0x07
    26ce:	78 85       	ldd	r23, Y+8	; 0x08
    26d0:	89 85       	ldd	r24, Y+9	; 0x09
    26d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d4:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	8d 83       	std	Y+5, r24	; 0x05
    26e0:	8d 81       	ldd	r24, Y+5	; 0x05
    26e2:	9e 81       	ldd	r25, Y+6	; 0x06
    26e4:	9a 83       	std	Y+2, r25	; 0x02
    26e6:	89 83       	std	Y+1, r24	; 0x01
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <HLCD_voidinit+0xf0>
    26f0:	9a 83       	std	Y+2, r25	; 0x02
    26f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	HLCD_voidSendCommand(0x33);
    26f4:	83 e3       	ldi	r24, 0x33	; 51
    26f6:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x32);			//send for 4 bit initialization of LCD
    26fa:	82 e3       	ldi	r24, 0x32	; 50
    26fc:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x28);			//select 4 bit mode, 5*7 dots
    2700:	88 e2       	ldi	r24, 0x28	; 40
    2702:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x0F);			//display on, cursor blinking
    2706:	8f e0       	ldi	r24, 0x0F	; 15
    2708:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x06);			//entry mode increment cursor to right
    270c:	86 e0       	ldi	r24, 0x06	; 6
    270e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x01);			//clear display
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <HLCD_voidSendCommand>
}
    2718:	2e 96       	adiw	r28, 0x0e	; 14
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	f8 94       	cli
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	cd bf       	out	0x3d, r28	; 61
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <HLCD_voidclear>:


#endif

void HLCD_voidclear(void)
{
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0x01);			//clear command
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x80);			//8 is for first line & 0 is for 0th position
    2738:	80 e8       	ldi	r24, 0x80	; 128
    273a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <HLCD_voidSendCommand>
}
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <HLCD_voidsendNumber>:

void HLCD_voidsendNumber(u16 Number)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	66 97       	sbiw	r28, 0x16	; 22
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	9e 8b       	std	Y+22, r25	; 0x16
    275a:	8d 8b       	std	Y+21, r24	; 0x15
	char n[20];
	itoa(Number, n, 10);
    275c:	8d 89       	ldd	r24, Y+21	; 0x15
    275e:	9e 89       	ldd	r25, Y+22	; 0x16
    2760:	9e 01       	movw	r18, r28
    2762:	2f 5f       	subi	r18, 0xFF	; 255
    2764:	3f 4f       	sbci	r19, 0xFF	; 255
    2766:	b9 01       	movw	r22, r18
    2768:	4a e0       	ldi	r20, 0x0A	; 10
    276a:	50 e0       	ldi	r21, 0x00	; 0
    276c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <itoa>
	HLCD_voidsendString(n);
    2770:	ce 01       	movw	r24, r28
    2772:	01 96       	adiw	r24, 0x01	; 1
    2774:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <HLCD_voidsendString>
}
    2778:	66 96       	adiw	r28, 0x16	; 22
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	cf 91       	pop	r28
    2786:	df 91       	pop	r29
    2788:	08 95       	ret

0000278a <HLCD_voidsendFloat>:

void HLCD_voidsendFloat(float32 Number)
{
    278a:	0f 93       	push	r16
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
    2794:	68 97       	sbiw	r28, 0x18	; 24
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	cd bf       	out	0x3d, r28	; 61
    27a0:	6d 8b       	std	Y+21, r22	; 0x15
    27a2:	7e 8b       	std	Y+22, r23	; 0x16
    27a4:	8f 8b       	std	Y+23, r24	; 0x17
    27a6:	98 8f       	std	Y+24, r25	; 0x18
	char n[20];
	dtostre(Number,n, 2, 2);				//convert 2 characters width & 2 decimal places
    27a8:	8d 89       	ldd	r24, Y+21	; 0x15
    27aa:	9e 89       	ldd	r25, Y+22	; 0x16
    27ac:	af 89       	ldd	r26, Y+23	; 0x17
    27ae:	b8 8d       	ldd	r27, Y+24	; 0x18
    27b0:	bc 01       	movw	r22, r24
    27b2:	cd 01       	movw	r24, r26
    27b4:	9e 01       	movw	r18, r28
    27b6:	2f 5f       	subi	r18, 0xFF	; 255
    27b8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ba:	a9 01       	movw	r20, r18
    27bc:	22 e0       	ldi	r18, 0x02	; 2
    27be:	02 e0       	ldi	r16, 0x02	; 2
    27c0:	0e 94 28 06 	call	0xc50	; 0xc50 <dtostre>
	HLCD_voidsendString(n);
    27c4:	ce 01       	movw	r24, r28
    27c6:	01 96       	adiw	r24, 0x01	; 1
    27c8:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <HLCD_voidsendString>
}
    27cc:	68 96       	adiw	r28, 0x18	; 24
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	0f 91       	pop	r16
    27de:	08 95       	ret

000027e0 <HLCD_voidsendString>:

void HLCD_voidsendString(char *string)
{
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <HLCD_voidsendString+0x6>
    27e6:	0f 92       	push	r0
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	9b 83       	std	Y+3, r25	; 0x03
    27ee:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for(i=0; string[i] != 0; i++)
    27f0:	19 82       	std	Y+1, r1	; 0x01
    27f2:	0e c0       	rjmp	.+28     	; 0x2810 <HLCD_voidsendString+0x30>
	{
		HLCD_voidsendData(string[i]);
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	28 2f       	mov	r18, r24
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	9b 81       	ldd	r25, Y+3	; 0x03
    27fe:	fc 01       	movw	r30, r24
    2800:	e2 0f       	add	r30, r18
    2802:	f3 1f       	adc	r31, r19
    2804:	80 81       	ld	r24, Z
    2806:	0e 94 69 10 	call	0x20d2	; 0x20d2 <HLCD_voidsendData>
}

void HLCD_voidsendString(char *string)
{
	u8 i;
	for(i=0; string[i] != 0; i++)
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	8f 5f       	subi	r24, 0xFF	; 255
    280e:	89 83       	std	Y+1, r24	; 0x01
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	28 2f       	mov	r18, r24
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	8a 81       	ldd	r24, Y+2	; 0x02
    2818:	9b 81       	ldd	r25, Y+3	; 0x03
    281a:	fc 01       	movw	r30, r24
    281c:	e2 0f       	add	r30, r18
    281e:	f3 1f       	adc	r31, r19
    2820:	80 81       	ld	r24, Z
    2822:	88 23       	and	r24, r24
    2824:	39 f7       	brne	.-50     	; 0x27f4 <HLCD_voidsendString+0x14>
	{
		HLCD_voidsendData(string[i]);
	}
}
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <HLCD_voidgotoXY>:

void HLCD_voidgotoXY(u8 x_pos, u8 y_pos)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	00 d0       	rcall	.+0      	; 0x2838 <HLCD_voidgotoXY+0x6>
    2838:	0f 92       	push	r0
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	8a 83       	std	Y+2, r24	; 0x02
    2840:	6b 83       	std	Y+3, r22	; 0x03
	u8 add = 0;
    2842:	19 82       	std	Y+1, r1	; 0x01
	if(x_pos == 0)
    2844:	8a 81       	ldd	r24, Y+2	; 0x02
    2846:	88 23       	and	r24, r24
    2848:	19 f4       	brne	.+6      	; 0x2850 <HLCD_voidgotoXY+0x1e>
	{
		add = 0x80;
    284a:	80 e8       	ldi	r24, 0x80	; 128
    284c:	89 83       	std	Y+1, r24	; 0x01
    284e:	05 c0       	rjmp	.+10     	; 0x285a <HLCD_voidgotoXY+0x28>
	}
	else if(x_pos == 1)
    2850:	8a 81       	ldd	r24, Y+2	; 0x02
    2852:	81 30       	cpi	r24, 0x01	; 1
    2854:	11 f4       	brne	.+4      	; 0x285a <HLCD_voidgotoXY+0x28>
	{
		add = 0xc0;
    2856:	80 ec       	ldi	r24, 0xC0	; 192
    2858:	89 83       	std	Y+1, r24	; 0x01
	}
	else{}
	if(y_pos <16)
    285a:	8b 81       	ldd	r24, Y+3	; 0x03
    285c:	80 31       	cpi	r24, 0x10	; 16
    285e:	20 f4       	brcc	.+8      	; 0x2868 <HLCD_voidgotoXY+0x36>
	{
		add += y_pos;
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	9b 81       	ldd	r25, Y+3	; 0x03
    2864:	89 0f       	add	r24, r25
    2866:	89 83       	std	Y+1, r24	; 0x01
	}
	HLCD_voidSendCommand(add);
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <HLCD_voidSendCommand>
}
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	0f 90       	pop	r0
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <HLCD_IncrementCursor>:

void HLCD_IncrementCursor(u8 times){
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	00 d0       	rcall	.+0      	; 0x2880 <HLCD_IncrementCursor+0x6>
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
    2884:	8a 83       	std	Y+2, r24	; 0x02
	for (u8 i=0; i<times;i++)
    2886:	19 82       	std	Y+1, r1	; 0x01
    2888:	06 c0       	rjmp	.+12     	; 0x2896 <HLCD_IncrementCursor+0x1c>
	{
		HLCD_voidSendCommand(0x14);
    288a:	84 e1       	ldi	r24, 0x14	; 20
    288c:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <HLCD_voidSendCommand>
	}
	HLCD_voidSendCommand(add);
}

void HLCD_IncrementCursor(u8 times){
	for (u8 i=0; i<times;i++)
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	8f 5f       	subi	r24, 0xFF	; 255
    2894:	89 83       	std	Y+1, r24	; 0x01
    2896:	99 81       	ldd	r25, Y+1	; 0x01
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
    289a:	98 17       	cp	r25, r24
    289c:	b0 f3       	brcs	.-20     	; 0x288a <HLCD_IncrementCursor+0x10>
	{
		HLCD_voidSendCommand(0x14);
	}
}
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <HLCD_DecrementCursor>:

void HLCD_DecrementCursor(u8 times){
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <HLCD_DecrementCursor+0x6>
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	8a 83       	std	Y+2, r24	; 0x02
	for (u8 i=0; i<times;i++)
    28b4:	19 82       	std	Y+1, r1	; 0x01
    28b6:	06 c0       	rjmp	.+12     	; 0x28c4 <HLCD_DecrementCursor+0x1c>
	{
		HLCD_voidSendCommand(0x10);
    28b8:	80 e1       	ldi	r24, 0x10	; 16
    28ba:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <HLCD_voidSendCommand>
		HLCD_voidSendCommand(0x14);
	}
}

void HLCD_DecrementCursor(u8 times){
	for (u8 i=0; i<times;i++)
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	8f 5f       	subi	r24, 0xFF	; 255
    28c2:	89 83       	std	Y+1, r24	; 0x01
    28c4:	99 81       	ldd	r25, Y+1	; 0x01
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	98 17       	cp	r25, r24
    28ca:	b0 f3       	brcs	.-20     	; 0x28b8 <HLCD_DecrementCursor+0x10>
	{
		HLCD_voidSendCommand(0x10);
	}
}
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <main>:
u16 MADC_u16Reading;
u16 ADC_u16Mapped;
u16 Reading_u16Mapped;

int main()
{
    28d6:	0f 93       	push	r16
    28d8:	1f 93       	push	r17
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	2e 97       	sbiw	r28, 0x0e	; 14
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61
	Port_VoidInit();
    28ee:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Port_VoidInit>
	MADC_voidInit();
    28f2:	0e 94 66 0d 	call	0x1acc	; 0x1acc <MADC_voidInit>
	HLCD_voidinit();
    28f6:	0e 94 fe 12 	call	0x25fc	; 0x25fc <HLCD_voidinit>
	MTIMER1_voidInit(FAST_PWM_NON_INVERTING, TOP_FPWM_ICR1, DIV_8);					/*Initialize Timer1*/
    28fa:	84 e0       	ldi	r24, 0x04	; 4
    28fc:	62 e0       	ldi	r22, 0x02	; 2
    28fe:	40 e0       	ldi	r20, 0x00	; 0
    2900:	0e 94 2a 08 	call	0x1054	; 0x1054 <MTIMER1_voidInit>
	MTIMER1_voidSetTopValue(20000, TOP_FPWM_ICR1);
    2904:	80 e2       	ldi	r24, 0x20	; 32
    2906:	9e e4       	ldi	r25, 0x4E	; 78
    2908:	62 e0       	ldi	r22, 0x02	; 2
    290a:	0e 94 03 0a 	call	0x1406	; 0x1406 <MTIMER1_voidSetTopValue>

	while(1)
	{
		//reading from LDR to control Servo
		MADC_u16Reading = MADC_u16GetValue(ADC_CHANNEL0);
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <MADC_u16GetValue>
    2914:	90 93 73 00 	sts	0x0073, r25
    2918:	80 93 72 00 	sts	0x0072, r24
		ADC_u16Mapped = MAP_u16Mapping(2550, 450,1023, 0, MADC_u16Reading);
    291c:	e0 91 72 00 	lds	r30, 0x0072
    2920:	f0 91 73 00 	lds	r31, 0x0073
    2924:	86 ef       	ldi	r24, 0xF6	; 246
    2926:	99 e0       	ldi	r25, 0x09	; 9
    2928:	62 ec       	ldi	r22, 0xC2	; 194
    292a:	71 e0       	ldi	r23, 0x01	; 1
    292c:	4f ef       	ldi	r20, 0xFF	; 255
    292e:	53 e0       	ldi	r21, 0x03	; 3
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	8f 01       	movw	r16, r30
    2936:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <MAP_u16Mapping>
    293a:	90 93 75 00 	sts	0x0075, r25
    293e:	80 93 74 00 	sts	0x0074, r24
		Reading_u16Mapped = MAP_u16Mapping(180, 0,2550, 450, ADC_u16Mapped);
    2942:	e0 91 74 00 	lds	r30, 0x0074
    2946:	f0 91 75 00 	lds	r31, 0x0075
    294a:	84 eb       	ldi	r24, 0xB4	; 180
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	60 e0       	ldi	r22, 0x00	; 0
    2950:	70 e0       	ldi	r23, 0x00	; 0
    2952:	46 ef       	ldi	r20, 0xF6	; 246
    2954:	59 e0       	ldi	r21, 0x09	; 9
    2956:	22 ec       	ldi	r18, 0xC2	; 194
    2958:	31 e0       	ldi	r19, 0x01	; 1
    295a:	8f 01       	movw	r16, r30
    295c:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <MAP_u16Mapping>
    2960:	90 93 71 00 	sts	0x0071, r25
    2964:	80 93 70 00 	sts	0x0070, r24
		if(Reading_u16Mapped > 100)
    2968:	80 91 70 00 	lds	r24, 0x0070
    296c:	90 91 71 00 	lds	r25, 0x0071
    2970:	85 36       	cpi	r24, 0x65	; 101
    2972:	91 05       	cpc	r25, r1
    2974:	98 f0       	brcs	.+38     	; 0x299c <main+0xc6>
		{
			HLCD_voidgotoXY(0, 0);
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	60 e0       	ldi	r22, 0x00	; 0
    297a:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidgotoXY>
			HLCD_voidsendString("Angle:");
    297e:	80 e6       	ldi	r24, 0x60	; 96
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <HLCD_voidsendString>
			HLCD_voidgotoXY(0, 7);
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	67 e0       	ldi	r22, 0x07	; 7
    298a:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidgotoXY>
			HLCD_voidsendNumber(Reading_u16Mapped);
    298e:	80 91 70 00 	lds	r24, 0x0070
    2992:	90 91 71 00 	lds	r25, 0x0071
    2996:	0e 94 a2 13 	call	0x2744	; 0x2744 <HLCD_voidsendNumber>
    299a:	15 c0       	rjmp	.+42     	; 0x29c6 <main+0xf0>
		}
		else
		{
			HLCD_voidgotoXY(0, 0);
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	60 e0       	ldi	r22, 0x00	; 0
    29a0:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidgotoXY>
			HLCD_voidsendString("Angle:");
    29a4:	80 e6       	ldi	r24, 0x60	; 96
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <HLCD_voidsendString>
			HLCD_voidgotoXY(0, 7);
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	67 e0       	ldi	r22, 0x07	; 7
    29b0:	0e 94 19 14 	call	0x2832	; 0x2832 <HLCD_voidgotoXY>
			HLCD_voidsendNumber(Reading_u16Mapped);
    29b4:	80 91 70 00 	lds	r24, 0x0070
    29b8:	90 91 71 00 	lds	r25, 0x0071
    29bc:	0e 94 a2 13 	call	0x2744	; 0x2744 <HLCD_voidsendNumber>
			HLCD_voidsendData(' ');
    29c0:	80 e2       	ldi	r24, 0x20	; 32
    29c2:	0e 94 69 10 	call	0x20d2	; 0x20d2 <HLCD_voidsendData>
		}
		MTIMER1_voidSetDutyCycle(ADC_u16Mapped);
    29c6:	80 91 74 00 	lds	r24, 0x0074
    29ca:	90 91 75 00 	lds	r25, 0x0075
    29ce:	0e 94 32 0a 	call	0x1464	; 0x1464 <MTIMER1_voidSetDutyCycle>
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	a6 e1       	ldi	r26, 0x16	; 22
    29d8:	b3 e4       	ldi	r27, 0x43	; 67
    29da:	8b 87       	std	Y+11, r24	; 0x0b
    29dc:	9c 87       	std	Y+12, r25	; 0x0c
    29de:	ad 87       	std	Y+13, r26	; 0x0d
    29e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	4a ef       	ldi	r20, 0xFA	; 250
    29f0:	54 e4       	ldi	r21, 0x44	; 68
    29f2:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	8f 83       	std	Y+7, r24	; 0x07
    29fc:	98 87       	std	Y+8, r25	; 0x08
    29fe:	a9 87       	std	Y+9, r26	; 0x09
    2a00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a02:	6f 81       	ldd	r22, Y+7	; 0x07
    2a04:	78 85       	ldd	r23, Y+8	; 0x08
    2a06:	89 85       	ldd	r24, Y+9	; 0x09
    2a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e8       	ldi	r20, 0x80	; 128
    2a10:	5f e3       	ldi	r21, 0x3F	; 63
    2a12:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__ltsf2>
    2a16:	88 23       	and	r24, r24
    2a18:	2c f4       	brge	.+10     	; 0x2a24 <main+0x14e>
		__ticks = 1;
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	9e 83       	std	Y+6, r25	; 0x06
    2a20:	8d 83       	std	Y+5, r24	; 0x05
    2a22:	3f c0       	rjmp	.+126    	; 0x2aa2 <main+0x1cc>
	else if (__tmp > 65535)
    2a24:	6f 81       	ldd	r22, Y+7	; 0x07
    2a26:	78 85       	ldd	r23, Y+8	; 0x08
    2a28:	89 85       	ldd	r24, Y+9	; 0x09
    2a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	3f ef       	ldi	r19, 0xFF	; 255
    2a30:	4f e7       	ldi	r20, 0x7F	; 127
    2a32:	57 e4       	ldi	r21, 0x47	; 71
    2a34:	0e 94 9e 03 	call	0x73c	; 0x73c <__gtsf2>
    2a38:	18 16       	cp	r1, r24
    2a3a:	4c f5       	brge	.+82     	; 0x2a8e <main+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e2       	ldi	r20, 0x20	; 32
    2a4a:	51 e4       	ldi	r21, 0x41	; 65
    2a4c:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	bc 01       	movw	r22, r24
    2a56:	cd 01       	movw	r24, r26
    2a58:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	9e 83       	std	Y+6, r25	; 0x06
    2a62:	8d 83       	std	Y+5, r24	; 0x05
    2a64:	0f c0       	rjmp	.+30     	; 0x2a84 <main+0x1ae>
    2a66:	88 ec       	ldi	r24, 0xC8	; 200
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	9c 83       	std	Y+4, r25	; 0x04
    2a6c:	8b 83       	std	Y+3, r24	; 0x03
    2a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a70:	9c 81       	ldd	r25, Y+4	; 0x04
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	f1 f7       	brne	.-4      	; 0x2a72 <main+0x19c>
    2a76:	9c 83       	std	Y+4, r25	; 0x04
    2a78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	9e 83       	std	Y+6, r25	; 0x06
    2a82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a84:	8d 81       	ldd	r24, Y+5	; 0x05
    2a86:	9e 81       	ldd	r25, Y+6	; 0x06
    2a88:	00 97       	sbiw	r24, 0x00	; 0
    2a8a:	69 f7       	brne	.-38     	; 0x2a66 <main+0x190>
    2a8c:	40 cf       	rjmp	.-384    	; 0x290e <main+0x38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a90:	78 85       	ldd	r23, Y+8	; 0x08
    2a92:	89 85       	ldd	r24, Y+9	; 0x09
    2a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a96:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	9e 83       	std	Y+6, r25	; 0x06
    2aa0:	8d 83       	std	Y+5, r24	; 0x05
    2aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa6:	9a 83       	std	Y+2, r25	; 0x02
    2aa8:	89 83       	std	Y+1, r24	; 0x01
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	9a 81       	ldd	r25, Y+2	; 0x02
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	f1 f7       	brne	.-4      	; 0x2aae <main+0x1d8>
    2ab2:	9a 83       	std	Y+2, r25	; 0x02
    2ab4:	89 83       	std	Y+1, r24	; 0x01
    2ab6:	2b cf       	rjmp	.-426    	; 0x290e <main+0x38>

00002ab8 <MAP_u16Mapping>:
		_delay_ms(150);
	}
}

u16 MAP_u16Mapping(u16 x_Max, u16 x_Min, u16 y_Max, u16 y_Min, u16 y)
{
    2ab8:	ef 92       	push	r14
    2aba:	ff 92       	push	r15
    2abc:	0f 93       	push	r16
    2abe:	1f 93       	push	r17
    2ac0:	df 93       	push	r29
    2ac2:	cf 93       	push	r28
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	2c 97       	sbiw	r28, 0x0c	; 12
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	9c 83       	std	Y+4, r25	; 0x04
    2ad6:	8b 83       	std	Y+3, r24	; 0x03
    2ad8:	7e 83       	std	Y+6, r23	; 0x06
    2ada:	6d 83       	std	Y+5, r22	; 0x05
    2adc:	58 87       	std	Y+8, r21	; 0x08
    2ade:	4f 83       	std	Y+7, r20	; 0x07
    2ae0:	3a 87       	std	Y+10, r19	; 0x0a
    2ae2:	29 87       	std	Y+9, r18	; 0x09
    2ae4:	1c 87       	std	Y+12, r17	; 0x0c
    2ae6:	0b 87       	std	Y+11, r16	; 0x0b
	u16 x;
	x = (((u32)(x_Max - x_Min) * (y - y_Min)) / (y_Max - y_Min)) + x_Min;
    2ae8:	2b 81       	ldd	r18, Y+3	; 0x03
    2aea:	3c 81       	ldd	r19, Y+4	; 0x04
    2aec:	8d 81       	ldd	r24, Y+5	; 0x05
    2aee:	9e 81       	ldd	r25, Y+6	; 0x06
    2af0:	a9 01       	movw	r20, r18
    2af2:	48 1b       	sub	r20, r24
    2af4:	59 0b       	sbc	r21, r25
    2af6:	ca 01       	movw	r24, r20
    2af8:	7c 01       	movw	r14, r24
    2afa:	00 e0       	ldi	r16, 0x00	; 0
    2afc:	10 e0       	ldi	r17, 0x00	; 0
    2afe:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b00:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b02:	89 85       	ldd	r24, Y+9	; 0x09
    2b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b06:	a9 01       	movw	r20, r18
    2b08:	48 1b       	sub	r20, r24
    2b0a:	59 0b       	sbc	r21, r25
    2b0c:	ca 01       	movw	r24, r20
    2b0e:	9c 01       	movw	r18, r24
    2b10:	40 e0       	ldi	r20, 0x00	; 0
    2b12:	50 e0       	ldi	r21, 0x00	; 0
    2b14:	c8 01       	movw	r24, r16
    2b16:	b7 01       	movw	r22, r14
    2b18:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__mulsi3>
    2b1c:	7b 01       	movw	r14, r22
    2b1e:	8c 01       	movw	r16, r24
    2b20:	2f 81       	ldd	r18, Y+7	; 0x07
    2b22:	38 85       	ldd	r19, Y+8	; 0x08
    2b24:	89 85       	ldd	r24, Y+9	; 0x09
    2b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b28:	a9 01       	movw	r20, r18
    2b2a:	48 1b       	sub	r20, r24
    2b2c:	59 0b       	sbc	r21, r25
    2b2e:	ca 01       	movw	r24, r20
    2b30:	9c 01       	movw	r18, r24
    2b32:	40 e0       	ldi	r20, 0x00	; 0
    2b34:	50 e0       	ldi	r21, 0x00	; 0
    2b36:	c8 01       	movw	r24, r16
    2b38:	b7 01       	movw	r22, r14
    2b3a:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__udivmodsi4>
    2b3e:	da 01       	movw	r26, r20
    2b40:	c9 01       	movw	r24, r18
    2b42:	9c 01       	movw	r18, r24
    2b44:	8d 81       	ldd	r24, Y+5	; 0x05
    2b46:	9e 81       	ldd	r25, Y+6	; 0x06
    2b48:	82 0f       	add	r24, r18
    2b4a:	93 1f       	adc	r25, r19
    2b4c:	9a 83       	std	Y+2, r25	; 0x02
    2b4e:	89 83       	std	Y+1, r24	; 0x01
	return x;
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2b54:	2c 96       	adiw	r28, 0x0c	; 12
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	de bf       	out	0x3e, r29	; 62
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	cd bf       	out	0x3d, r28	; 61
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	1f 91       	pop	r17
    2b66:	0f 91       	pop	r16
    2b68:	ff 90       	pop	r15
    2b6a:	ef 90       	pop	r14
    2b6c:	08 95       	ret

00002b6e <__mulsi3>:
    2b6e:	62 9f       	mul	r22, r18
    2b70:	d0 01       	movw	r26, r0
    2b72:	73 9f       	mul	r23, r19
    2b74:	f0 01       	movw	r30, r0
    2b76:	82 9f       	mul	r24, r18
    2b78:	e0 0d       	add	r30, r0
    2b7a:	f1 1d       	adc	r31, r1
    2b7c:	64 9f       	mul	r22, r20
    2b7e:	e0 0d       	add	r30, r0
    2b80:	f1 1d       	adc	r31, r1
    2b82:	92 9f       	mul	r25, r18
    2b84:	f0 0d       	add	r31, r0
    2b86:	83 9f       	mul	r24, r19
    2b88:	f0 0d       	add	r31, r0
    2b8a:	74 9f       	mul	r23, r20
    2b8c:	f0 0d       	add	r31, r0
    2b8e:	65 9f       	mul	r22, r21
    2b90:	f0 0d       	add	r31, r0
    2b92:	99 27       	eor	r25, r25
    2b94:	72 9f       	mul	r23, r18
    2b96:	b0 0d       	add	r27, r0
    2b98:	e1 1d       	adc	r30, r1
    2b9a:	f9 1f       	adc	r31, r25
    2b9c:	63 9f       	mul	r22, r19
    2b9e:	b0 0d       	add	r27, r0
    2ba0:	e1 1d       	adc	r30, r1
    2ba2:	f9 1f       	adc	r31, r25
    2ba4:	bd 01       	movw	r22, r26
    2ba6:	cf 01       	movw	r24, r30
    2ba8:	11 24       	eor	r1, r1
    2baa:	08 95       	ret

00002bac <__udivmodsi4>:
    2bac:	a1 e2       	ldi	r26, 0x21	; 33
    2bae:	1a 2e       	mov	r1, r26
    2bb0:	aa 1b       	sub	r26, r26
    2bb2:	bb 1b       	sub	r27, r27
    2bb4:	fd 01       	movw	r30, r26
    2bb6:	0d c0       	rjmp	.+26     	; 0x2bd2 <__udivmodsi4_ep>

00002bb8 <__udivmodsi4_loop>:
    2bb8:	aa 1f       	adc	r26, r26
    2bba:	bb 1f       	adc	r27, r27
    2bbc:	ee 1f       	adc	r30, r30
    2bbe:	ff 1f       	adc	r31, r31
    2bc0:	a2 17       	cp	r26, r18
    2bc2:	b3 07       	cpc	r27, r19
    2bc4:	e4 07       	cpc	r30, r20
    2bc6:	f5 07       	cpc	r31, r21
    2bc8:	20 f0       	brcs	.+8      	; 0x2bd2 <__udivmodsi4_ep>
    2bca:	a2 1b       	sub	r26, r18
    2bcc:	b3 0b       	sbc	r27, r19
    2bce:	e4 0b       	sbc	r30, r20
    2bd0:	f5 0b       	sbc	r31, r21

00002bd2 <__udivmodsi4_ep>:
    2bd2:	66 1f       	adc	r22, r22
    2bd4:	77 1f       	adc	r23, r23
    2bd6:	88 1f       	adc	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	1a 94       	dec	r1
    2bdc:	69 f7       	brne	.-38     	; 0x2bb8 <__udivmodsi4_loop>
    2bde:	60 95       	com	r22
    2be0:	70 95       	com	r23
    2be2:	80 95       	com	r24
    2be4:	90 95       	com	r25
    2be6:	9b 01       	movw	r18, r22
    2be8:	ac 01       	movw	r20, r24
    2bea:	bd 01       	movw	r22, r26
    2bec:	cf 01       	movw	r24, r30
    2bee:	08 95       	ret

00002bf0 <__prologue_saves__>:
    2bf0:	2f 92       	push	r2
    2bf2:	3f 92       	push	r3
    2bf4:	4f 92       	push	r4
    2bf6:	5f 92       	push	r5
    2bf8:	6f 92       	push	r6
    2bfa:	7f 92       	push	r7
    2bfc:	8f 92       	push	r8
    2bfe:	9f 92       	push	r9
    2c00:	af 92       	push	r10
    2c02:	bf 92       	push	r11
    2c04:	cf 92       	push	r12
    2c06:	df 92       	push	r13
    2c08:	ef 92       	push	r14
    2c0a:	ff 92       	push	r15
    2c0c:	0f 93       	push	r16
    2c0e:	1f 93       	push	r17
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	ca 1b       	sub	r28, r26
    2c1a:	db 0b       	sbc	r29, r27
    2c1c:	0f b6       	in	r0, 0x3f	; 63
    2c1e:	f8 94       	cli
    2c20:	de bf       	out	0x3e, r29	; 62
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	cd bf       	out	0x3d, r28	; 61
    2c26:	09 94       	ijmp

00002c28 <__epilogue_restores__>:
    2c28:	2a 88       	ldd	r2, Y+18	; 0x12
    2c2a:	39 88       	ldd	r3, Y+17	; 0x11
    2c2c:	48 88       	ldd	r4, Y+16	; 0x10
    2c2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c30:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c32:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c34:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c36:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c38:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c3a:	b9 84       	ldd	r11, Y+9	; 0x09
    2c3c:	c8 84       	ldd	r12, Y+8	; 0x08
    2c3e:	df 80       	ldd	r13, Y+7	; 0x07
    2c40:	ee 80       	ldd	r14, Y+6	; 0x06
    2c42:	fd 80       	ldd	r15, Y+5	; 0x05
    2c44:	0c 81       	ldd	r16, Y+4	; 0x04
    2c46:	1b 81       	ldd	r17, Y+3	; 0x03
    2c48:	aa 81       	ldd	r26, Y+2	; 0x02
    2c4a:	b9 81       	ldd	r27, Y+1	; 0x01
    2c4c:	ce 0f       	add	r28, r30
    2c4e:	d1 1d       	adc	r29, r1
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	f8 94       	cli
    2c54:	de bf       	out	0x3e, r29	; 62
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	cd bf       	out	0x3d, r28	; 61
    2c5a:	ed 01       	movw	r28, r26
    2c5c:	08 95       	ret

00002c5e <__udivmodhi4>:
    2c5e:	aa 1b       	sub	r26, r26
    2c60:	bb 1b       	sub	r27, r27
    2c62:	51 e1       	ldi	r21, 0x11	; 17
    2c64:	07 c0       	rjmp	.+14     	; 0x2c74 <__udivmodhi4_ep>

00002c66 <__udivmodhi4_loop>:
    2c66:	aa 1f       	adc	r26, r26
    2c68:	bb 1f       	adc	r27, r27
    2c6a:	a6 17       	cp	r26, r22
    2c6c:	b7 07       	cpc	r27, r23
    2c6e:	10 f0       	brcs	.+4      	; 0x2c74 <__udivmodhi4_ep>
    2c70:	a6 1b       	sub	r26, r22
    2c72:	b7 0b       	sbc	r27, r23

00002c74 <__udivmodhi4_ep>:
    2c74:	88 1f       	adc	r24, r24
    2c76:	99 1f       	adc	r25, r25
    2c78:	5a 95       	dec	r21
    2c7a:	a9 f7       	brne	.-22     	; 0x2c66 <__udivmodhi4_loop>
    2c7c:	80 95       	com	r24
    2c7e:	90 95       	com	r25
    2c80:	bc 01       	movw	r22, r24
    2c82:	cd 01       	movw	r24, r26
    2c84:	08 95       	ret

00002c86 <_exit>:
    2c86:	f8 94       	cli

00002c88 <__stop_program>:
    2c88:	ff cf       	rjmp	.-2      	; 0x2c88 <__stop_program>
